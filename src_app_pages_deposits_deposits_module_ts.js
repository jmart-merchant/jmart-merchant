"use strict";
(self["webpackChunkjysan"] = self["webpackChunkjysan"] || []).push([["src_app_pages_deposits_deposits_module_ts"],{

/***/ 65804:
/*!******************************************!*\
  !*** ./src/app/core/animations/aside.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asideAnimations": () => (/* binding */ asideAnimations)
/* harmony export */ });
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ 31631);

const wrapperInitialState = {
    opacity: 0,
    transform: 'scale(0.8)',
    transformOrigin: '50% 50%',
};
const wrapperFinalState = {
    opacity: 1,
    transform: 'scale(1)',
    transformOrigin: '50% 50%',
};
const duration = '200ms ease-in-out';
const childInitialState = {
    right: '-100%',
};
const childFinalState = {
    right: 0,
};
const asideAnimations = [
    (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.trigger)('wrapperAnimations', [
        (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.state)('in', (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.style)(wrapperFinalState)),
        (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.transition)(':enter', [
            (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.style)(wrapperInitialState),
            (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.animate)(duration),
            (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.query)('@childAnimations', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.animateChild)()]),
        ]),
        (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.transition)(':leave', [
            (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.query)('@childAnimations', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.animateChild)()]),
            (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.animate)(duration, (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.style)(wrapperInitialState)),
        ]),
    ]),
    (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.trigger)('childAnimations', [
        (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.state)('in', (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.style)(childFinalState)),
        (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.transition)(':enter', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.style)(childInitialState), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.animate)(duration)]),
        (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.transition)(':leave', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.animate)(duration, (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.style)(childInitialState))]),
    ]),
];


/***/ }),

/***/ 45747:
/*!******************************************!*\
  !*** ./src/app/core/animations/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asideAnimations": () => (/* reexport safe */ _aside__WEBPACK_IMPORTED_MODULE_0__.asideAnimations)
/* harmony export */ });
/* harmony import */ var _aside__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aside */ 65804);



/***/ }),

/***/ 76349:
/*!********************************************************!*\
  !*** ./src/app/helpers/statement2/components/index.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Statement2GroupComponent": () => (/* reexport safe */ _statement2_group_statement2_group_component__WEBPACK_IMPORTED_MODULE_0__.Statement2GroupComponent),
/* harmony export */   "Statement2TransactionComponent": () => (/* reexport safe */ _statement2_transaction_statement2_transaction_component__WEBPACK_IMPORTED_MODULE_1__.Statement2TransactionComponent),
/* harmony export */   "Statement2HeaderComponent": () => (/* reexport safe */ _statement2_header_statement2_header_component__WEBPACK_IMPORTED_MODULE_2__.Statement2HeaderComponent),
/* harmony export */   "Statement2DetailsComponent": () => (/* reexport safe */ _statement2_details_statement2_details_component__WEBPACK_IMPORTED_MODULE_3__.Statement2DetailsComponent),
/* harmony export */   "Statement2LoadingComponent": () => (/* reexport safe */ _statement2_loading_statement2_loading_component__WEBPACK_IMPORTED_MODULE_4__.Statement2LoadingComponent)
/* harmony export */ });
/* harmony import */ var _statement2_group_statement2_group_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./statement2-group/statement2-group.component */ 91531);
/* harmony import */ var _statement2_transaction_statement2_transaction_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./statement2-transaction/statement2-transaction.component */ 51202);
/* harmony import */ var _statement2_header_statement2_header_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./statement2-header/statement2-header.component */ 46344);
/* harmony import */ var _statement2_details_statement2_details_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./statement2-details/statement2-details.component */ 1981);
/* harmony import */ var _statement2_loading_statement2_loading_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./statement2-loading/statement2-loading.component */ 96070);







/***/ }),

/***/ 1981:
/*!**************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-details/statement2-details.component.ts ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Statement2DetailsComponent": () => (/* binding */ Statement2DetailsComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _statement2_details_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./statement2-details.component.html?ngResource */ 33988);
/* harmony import */ var _statement2_details_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./statement2-details.component.scss?ngResource */ 93068);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _shared_masked_masked__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/masked/masked */ 31475);
/* harmony import */ var _shared_pipes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @shared/pipes */ 39843);
/* harmony import */ var ngx_mask__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ngx-mask */ 7038);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../models */ 52714);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services */ 1335);









let Statement2DetailsComponent = class Statement2DetailsComponent {
    constructor(statement2Service, maskPipe, bankAccountName) {
        this.statement2Service = statement2Service;
        this.maskPipe = maskPipe;
        this.bankAccountName = bankAccountName;
        this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    }
    ngOnInit() {
        this.mapDate();
        this.mapTransactionType();
        this.mapGroups();
        console.log(this.transaction);
    }
    onClose() {
        this.closed.emit();
    }
    mapDate() {
        this.date$ = this.statement2Service.mapTransactionDate(this.transaction.documentDate);
    }
    mapTransactionType() {
        this.isCredit = this.transaction.type === _models__WEBPACK_IMPORTED_MODULE_4__.TRANSACTION_TYPE.CREDIT;
    }
    mapGroups() {
        this.groups = [
            {
                title: this.mapMainLabel('TITLE'),
                data: this.generateMainData(),
            },
            {
                title: this.mapRecipientLabel('TITLE'),
                data: this.generateRecipientData(),
            },
        ];
    }
    generateMainData() {
        const data = [];
        if (this.isCredit) {
            const { code, name } = this.transaction.knp;
            data.push({
                label: this.mapMainLabel('KNP'),
                value: `${code} ${name ? '-' : ''} ${name}`,
            });
        }
        data.push({
            label: this.mapMainLabel('DOCUMENT_NUMBER'),
            value: `â„–${this.transaction.documentNumber}`,
        });
        return data;
    }
    generateRecipientData() {
        const data = [
            {
                label: this.mapRecipientLabel('NAME'),
                value: this.transaction.correspondentName,
            },
            {
                label: this.mapRecipientLabel('BIN'),
                value: this.maskPipe.transform(this.transaction.correspondentBin, _shared_masked_masked__WEBPACK_IMPORTED_MODULE_2__.Masks.iin.mask),
            },
        ];
        if (!this.isCredit) {
            data.push({
                label: this.mapRecipientLabel('ACCOUNT'),
                value: this.maskPipe.transform(this.transaction.correspondentAccount, _shared_masked_masked__WEBPACK_IMPORTED_MODULE_2__.Masks.account.mask),
            });
        }
        data.push({
            label: this.mapRecipientLabel('KBE'),
            value: this.transaction.kbe.code,
        }, {
            label: this.mapRecipientLabel('BANK'),
            value: this.bankAccountName.transform(this.transaction.correspondentAccount),
        }, {
            label: this.mapRecipientLabel('BIC'),
            value: this.transaction.correspondentBankBic,
        });
        return data;
    }
    mapMainLabel(key) {
        return this.mapDetailsLabel(`MAIN.${key}`);
    }
    mapRecipientLabel(key) {
        return this.mapDetailsLabel(`RECIPIENT.${key}`);
    }
    mapDetailsLabel(key) {
        return `DEPOSITS.STATEMENT.DETAILS.${key}`;
    }
};
Statement2DetailsComponent.ctorParameters = () => [
    { type: _services__WEBPACK_IMPORTED_MODULE_5__.Statement2Service },
    { type: ngx_mask__WEBPACK_IMPORTED_MODULE_7__.MaskPipe },
    { type: _shared_pipes__WEBPACK_IMPORTED_MODULE_3__.BankAccountNamePipe }
];
Statement2DetailsComponent.propDecorators = {
    transaction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input }],
    closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Output }]
};
Statement2DetailsComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__.Component)({
        selector: 'j-statement2-details',
        template: _statement2_details_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ChangeDetectionStrategy.OnPush,
        styles: [_statement2_details_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], Statement2DetailsComponent);



/***/ }),

/***/ 91531:
/*!**********************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-group/statement2-group.component.ts ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Statement2GroupComponent": () => (/* binding */ Statement2GroupComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _statement2_group_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./statement2-group.component.html?ngResource */ 59669);
/* harmony import */ var _statement2_group_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./statement2-group.component.scss?ngResource */ 31007);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ 16901);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../models */ 52714);






let Statement2GroupComponent = class Statement2GroupComponent {
    constructor() {
        this.clicked = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    }
    ngOnInit() {
        this.mapTitle();
    }
    onClick(transaction) {
        this.clicked.emit(transaction);
    }
    mapTitle() {
        switch (this.groupType) {
            case _models__WEBPACK_IMPORTED_MODULE_3__.TRANSACTION_GROUP_TYPE.MONTH:
                let monthName = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.group.groupDate).format('MMMM');
                this.title = `${monthName[0].toUpperCase()}${monthName.slice(1)}`;
                break;
            default:
            case _models__WEBPACK_IMPORTED_MODULE_3__.TRANSACTION_GROUP_TYPE.DAY:
                this.title = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.group.groupDate).format('DD.MM.YYYY');
                break;
        }
    }
};
Statement2GroupComponent.ctorParameters = () => [];
Statement2GroupComponent.propDecorators = {
    group: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }],
    groupType: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }],
    groupHeaderTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }],
    transactionTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }],
    clicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output }]
};
Statement2GroupComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Component)({
        selector: 'j-statement2-group',
        template: _statement2_group_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush,
        styles: [_statement2_group_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], Statement2GroupComponent);



/***/ }),

/***/ 46344:
/*!************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-header/statement2-header.component.ts ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Statement2HeaderComponent": () => (/* binding */ Statement2HeaderComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _statement2_header_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./statement2-header.component.html?ngResource */ 96707);
/* harmony import */ var _statement2_header_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./statement2-header.component.scss?ngResource */ 82703);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 3184);




let Statement2HeaderComponent = class Statement2HeaderComponent {
    constructor() { }
    ngOnInit() {
        this.balances = [
            {
                label: 'DEPOSITS.STATEMENT.HEADER.INCOME',
                classList: 'text-success',
                showSign: true,
                isCredit: true,
                money: this.statement.creditTotalSum,
            },
            {
                label: 'DEPOSITS.STATEMENT.HEADER.OUTCOME',
                classList: 'text-danger',
                showSign: true,
                isDebit: true,
                money: this.statement.debitTotalSum,
            },
            {
                label: 'DEPOSITS.STATEMENT.HEADER.BALANCE_IN',
                money: this.statement.balanceIn,
            },
            {
                label: 'DEPOSITS.STATEMENT.HEADER.BALANCE_OUT',
                money: this.statement.balanceOut,
            },
        ];
    }
};
Statement2HeaderComponent.ctorParameters = () => [];
Statement2HeaderComponent.propDecorators = {
    statement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input }]
};
Statement2HeaderComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Component)({
        selector: 'j-statement2-header',
        template: _statement2_header_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ChangeDetectionStrategy.OnPush,
        styles: [_statement2_header_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], Statement2HeaderComponent);



/***/ }),

/***/ 96070:
/*!**************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-loading/statement2-loading.component.ts ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Statement2LoadingComponent": () => (/* binding */ Statement2LoadingComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _statement2_loading_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./statement2-loading.component.html?ngResource */ 42091);
/* harmony import */ var _statement2_loading_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./statement2-loading.component.scss?ngResource */ 34420);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 3184);




let Statement2LoadingComponent = class Statement2LoadingComponent {
    constructor() {
        this.headerCount = Array(4);
        this.transactionCount = Array(3);
    }
};
Statement2LoadingComponent.ctorParameters = () => [];
Statement2LoadingComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Component)({
        selector: 'j-statement2-loading',
        template: _statement2_loading_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__.ChangeDetectionStrategy.OnPush,
        styles: [_statement2_loading_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], Statement2LoadingComponent);



/***/ }),

/***/ 51202:
/*!**********************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-transaction/statement2-transaction.component.ts ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Statement2TransactionComponent": () => (/* binding */ Statement2TransactionComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _statement2_transaction_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./statement2-transaction.component.html?ngResource */ 43553);
/* harmony import */ var _statement2_transaction_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./statement2-transaction.component.scss?ngResource */ 45305);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../models */ 52714);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services */ 1335);






let Statement2TransactionComponent = class Statement2TransactionComponent {
    constructor(statement2Service) {
        this.statement2Service = statement2Service;
    }
    ngOnInit() {
        this.mapTransactionType();
        this.mapDate();
    }
    mapDate() {
        this.date$ = this.statement2Service.mapTransactionDate(this.transaction.documentDate);
    }
    mapTransactionType() {
        this.isCredit = this.transaction.type === _models__WEBPACK_IMPORTED_MODULE_2__.TRANSACTION_TYPE.CREDIT;
    }
};
Statement2TransactionComponent.ctorParameters = () => [
    { type: _services__WEBPACK_IMPORTED_MODULE_3__.Statement2Service }
];
Statement2TransactionComponent.propDecorators = {
    transaction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }]
};
Statement2TransactionComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Component)({
        selector: 'j-statement2-transaction',
        template: _statement2_transaction_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush,
        styles: [_statement2_transaction_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], Statement2TransactionComponent);



/***/ }),

/***/ 15523:
/*!****************************************************!*\
  !*** ./src/app/helpers/statement2/config/index.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultOptions": () => (/* reexport safe */ _options__WEBPACK_IMPORTED_MODULE_0__.defaultOptions)
/* harmony export */ });
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./options */ 92540);



/***/ }),

/***/ 92540:
/*!******************************************************!*\
  !*** ./src/app/helpers/statement2/config/options.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultOptions": () => (/* binding */ defaultOptions)
/* harmony export */ });
const defaultOptions = {
    hasDetails: false,
};


/***/ }),

/***/ 52714:
/*!****************************************************!*\
  !*** ./src/app/helpers/statement2/models/index.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TRANSACTION_CATEGORY": () => (/* reexport safe */ _statement2_model__WEBPACK_IMPORTED_MODULE_0__.TRANSACTION_CATEGORY),
/* harmony export */   "TRANSACTION_GROUP_TYPE": () => (/* reexport safe */ _statement2_model__WEBPACK_IMPORTED_MODULE_0__.TRANSACTION_GROUP_TYPE),
/* harmony export */   "TRANSACTION_TYPE": () => (/* reexport safe */ _statement2_model__WEBPACK_IMPORTED_MODULE_0__.TRANSACTION_TYPE)
/* harmony export */ });
/* harmony import */ var _statement2_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./statement2.model */ 31531);
/* harmony import */ var _statement2_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./statement2.options */ 14417);




/***/ }),

/***/ 31531:
/*!***************************************************************!*\
  !*** ./src/app/helpers/statement2/models/statement2.model.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TRANSACTION_TYPE": () => (/* binding */ TRANSACTION_TYPE),
/* harmony export */   "TRANSACTION_CATEGORY": () => (/* binding */ TRANSACTION_CATEGORY),
/* harmony export */   "TRANSACTION_GROUP_TYPE": () => (/* binding */ TRANSACTION_GROUP_TYPE)
/* harmony export */ });
var TRANSACTION_TYPE;
(function (TRANSACTION_TYPE) {
    TRANSACTION_TYPE["CREDIT"] = "CREDIT";
    TRANSACTION_TYPE["DEBIT"] = "DEBIT";
})(TRANSACTION_TYPE || (TRANSACTION_TYPE = {}));
var TRANSACTION_CATEGORY;
(function (TRANSACTION_CATEGORY) {
    TRANSACTION_CATEGORY["COMMISSION"] = "COMMISSION";
    TRANSACTION_CATEGORY["REFUND"] = "REFUND";
    TRANSACTION_CATEGORY["TRANSFER"] = "TRANSFER";
})(TRANSACTION_CATEGORY || (TRANSACTION_CATEGORY = {}));
var TRANSACTION_GROUP_TYPE;
(function (TRANSACTION_GROUP_TYPE) {
    TRANSACTION_GROUP_TYPE["DAY"] = "DAY";
    TRANSACTION_GROUP_TYPE["MONTH"] = "MONTH";
    TRANSACTION_GROUP_TYPE["NONE"] = "NONE";
})(TRANSACTION_GROUP_TYPE || (TRANSACTION_GROUP_TYPE = {}));


/***/ }),

/***/ 14417:
/*!*****************************************************************!*\
  !*** ./src/app/helpers/statement2/models/statement2.options.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ 1335:
/*!******************************************************!*\
  !*** ./src/app/helpers/statement2/services/index.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Statement2Service": () => (/* reexport safe */ _statement2_service__WEBPACK_IMPORTED_MODULE_0__.Statement2Service)
/* harmony export */ });
/* harmony import */ var _statement2_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./statement2.service */ 21484);



/***/ }),

/***/ 21484:
/*!*******************************************************************!*\
  !*** ./src/app/helpers/statement2/services/statement2.service.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Statement2Service": () => (/* binding */ Statement2Service)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 64139);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ngx-translate/core */ 33935);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ 16901);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ 15523);






let Statement2Service = class Statement2Service {
    constructor(translateService) {
        this.translateService = translateService;
    }
    mapTransactionDate(transactionDate) {
        const date = dayjs__WEBPACK_IMPORTED_MODULE_0___default()(transactionDate);
        if (date.isSame(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(), 'day')) {
            return this.translateService.get('DEPOSITS.INTERESTS.TRANSACTION.DATE.TODAY', {
                datetime: date.format('HH:mm'),
            });
        }
        else if (dayjs__WEBPACK_IMPORTED_MODULE_0___default()(transactionDate).isSame(dayjs__WEBPACK_IMPORTED_MODULE_0___default()().subtract(1, 'day'), 'day')) {
            return this.translateService.get('DEPOSITS.INTERESTS.TRANSACTION.DATE.YESTERDAY', {
                datetime: date.format('HH:mm'),
            });
        }
        else {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(date.format('DD MMMM HH:mm'));
        }
    }
    mapStatementOptions(options) {
        return Object.assign(Object.assign({}, _config__WEBPACK_IMPORTED_MODULE_1__.defaultOptions), options);
    }
};
Statement2Service.ctorParameters = () => [
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_3__.TranslateService }
];
Statement2Service = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable)({
        providedIn: 'root',
    })
], Statement2Service);



/***/ }),

/***/ 93984:
/*!************************************************************!*\
  !*** ./src/app/helpers/statement2/statement2.component.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Statement2Component": () => (/* binding */ Statement2Component)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _statement2_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./statement2.component.html?ngResource */ 19375);
/* harmony import */ var _statement2_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./statement2.component.scss?ngResource */ 67469);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ 36362);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _core_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @core/animations */ 45747);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services */ 1335);







let Statement2Component = class Statement2Component {
    constructor(document, statementService) {
        this.document = document;
        this.statementService = statementService;
        this.scrolled = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    }
    ngOnInit() {
        this._options = this.statementService.mapStatementOptions(this.options);
    }
    ngOnDestroy() {
        this.document.body.classList.remove('overflow-hidden');
    }
    onScroll() {
        this.scrolled.emit();
    }
    onClick(transaction) {
        if (!this._options.hasDetails) {
            return;
        }
        this.document.body.classList.add('overflow-hidden');
        this.activeTransaction = transaction;
    }
    onClose() {
        this.activeTransaction = null;
        this.document.body.classList.remove('overflow-hidden');
    }
};
Statement2Component.ctorParameters = () => [
    { type: Document, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject, args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.DOCUMENT,] }] },
    { type: _services__WEBPACK_IMPORTED_MODULE_3__.Statement2Service }
];
Statement2Component.propDecorators = {
    statement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }],
    options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }],
    scrolled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output }]
};
Statement2Component = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Component)({
        selector: 'j-statement2',
        template: _statement2_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        animations: _core_animations__WEBPACK_IMPORTED_MODULE_2__.asideAnimations,
        styles: [_statement2_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], Statement2Component);



/***/ }),

/***/ 19735:
/*!*********************************************************!*\
  !*** ./src/app/helpers/statement2/statement2.module.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Statement2Module": () => (/* binding */ Statement2Module)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 36362);
/* harmony import */ var ngx_infinite_scroll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ngx-infinite-scroll */ 64503);
/* harmony import */ var _shared_shared_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/shared.module */ 44466);
/* harmony import */ var _statement2_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./statement2.component */ 93984);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components */ 76349);







let Statement2Module = class Statement2Module {
};
Statement2Module = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.NgModule)({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule, _shared_shared_module__WEBPACK_IMPORTED_MODULE_1__.SharedModule, ngx_infinite_scroll__WEBPACK_IMPORTED_MODULE_0__.InfiniteScrollModule],
        declarations: [
            _statement2_component__WEBPACK_IMPORTED_MODULE_2__.Statement2Component,
            _components__WEBPACK_IMPORTED_MODULE_3__.Statement2DetailsComponent,
            _components__WEBPACK_IMPORTED_MODULE_3__.Statement2GroupComponent,
            _components__WEBPACK_IMPORTED_MODULE_3__.Statement2HeaderComponent,
            _components__WEBPACK_IMPORTED_MODULE_3__.Statement2LoadingComponent,
            _components__WEBPACK_IMPORTED_MODULE_3__.Statement2TransactionComponent,
        ],
        exports: [_statement2_component__WEBPACK_IMPORTED_MODULE_2__.Statement2Component, _components__WEBPACK_IMPORTED_MODULE_3__.Statement2LoadingComponent],
    })
], Statement2Module);



/***/ }),

/***/ 38832:
/*!********************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-interests/deposit-interests.component.ts ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositInterestsComponent": () => (/* binding */ DepositInterestsComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_interests_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-interests.component.html?ngResource */ 94);
/* harmony import */ var _deposit_interests_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-interests.component.scss?ngResource */ 73846);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/router */ 52816);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 32425);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ 92218);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ 83910);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ 53298);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ 86942);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs/operators */ 59095);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ 11133);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs/operators */ 45050);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @ngx-translate/core */ 33935);
/* harmony import */ var angular_notifier__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! angular-notifier */ 50449);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ 16901);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _accounts_services__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @accounts/services */ 53145);
/* harmony import */ var _shared_services__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @shared/services */ 17253);
/* harmony import */ var _utils_dates__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @utils/dates */ 12266);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../config */ 65023);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../services */ 66281);
/* harmony import */ var _analytics_services_manager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @analytics/services/manager */ 46155);
















let DepositInterestsComponent = class DepositInterestsComponent {
    constructor(route, translateService, accountsService, analytics, depositsService, notifierService, filesService) {
        this.route = route;
        this.translateService = translateService;
        this.accountsService = accountsService;
        this.analytics = analytics;
        this.depositsService = depositsService;
        this.notifierService = notifierService;
        this.filesService = filesService;
        this.colsClasslist = _config__WEBPACK_IMPORTED_MODULE_6__.PAGE_COLS_CLASSLIST;
        this.subscription = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subscription();
        this.loadingCount = Array(3);
        this.hasError = false;
        this.page = 1;
        this.pageSize = 5;
        this.page$ = new rxjs__WEBPACK_IMPORTED_MODULE_10__.Subject();
        this.dates$ = new rxjs__WEBPACK_IMPORTED_MODULE_10__.Subject();
        this.route.parent.params.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.take)(1)).subscribe((params) => {
            this.iban = params.iban;
            this.initSubscriptions();
        });
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    onKpnDownload() {
        this.notifierService.notify('info', this.translateService.instant('DEPOSITS.INTERESTS.DOWNLOADING'));
        const filename = this.translateService.instant('DEPOSITS.KPN.FILENAME', {
            name: this.depositName,
            period: this.retrievePeriod(),
        });
        this.depositsService
            .downloadCertificate({
            iban: this.iban,
            dateFrom: dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.filterDates.from).format(_utils_dates__WEBPACK_IMPORTED_MODULE_5__.API_DATE_FORMAT),
            dateTo: dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.filterDates.to).format(_utils_dates__WEBPACK_IMPORTED_MODULE_5__.API_DATE_FORMAT),
        })
            .subscribe({
            next: (blob) => {
                this.analytics.logEvent('DepositMain_KPNCert_Result', {
                    version: 1,
                    status: 200,
                });
                this.filesService.downloadFile(blob, `${filename}.pdf`);
            },
            error: (error) => {
                this.analytics.logEvent('DepositMain_KPNCert_Result', {
                    version: 1,
                    status: 502,
                    error,
                });
            },
        });
    }
    onDownload() {
        this.notifierService.notify('info', this.translateService.instant('DEPOSITS.INTERESTS.DOWNLOADING'));
        const filename = this.translateService.instant('DEPOSITS.INTERESTS.FILENAME', {
            iban: this.iban,
            period: this.retrievePeriod(),
        });
        const filter = {
            page: this.page,
            pageSize: this.pageSize,
            dateFrom: dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.filterDates.from).format(_utils_dates__WEBPACK_IMPORTED_MODULE_5__.API_DATE_FORMAT),
            dateTo: dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.filterDates.to).format(_utils_dates__WEBPACK_IMPORTED_MODULE_5__.API_DATE_FORMAT),
        };
        this.depositsService
            .downloadDepositInterests(this.iban, filter)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.take)(1))
            .subscribe({
            next: (blob) => {
                this.analytics.logEvent('MainReward_Download_Result', {
                    version: 1,
                    status: 200,
                });
                this.filesService.downloadFile(blob, `${filename}.pdf`);
            },
            error: (error) => {
                this.analytics.logEvent('MainReward_Download_Result', {
                    version: 1,
                    status: 502,
                    error
                });
            }
        });
    }
    onRetry() {
        this.onFilter();
    }
    onFilter(dates = this.filterDates) {
        this.page = 1;
        this.statement = null;
        this.hasError = false;
        this.dates$.next(dates);
    }
    onScroll() {
        this.page$.next(++this.page);
    }
    initSubscriptions() {
        this.subscription.add(this.depositsService.getDepositByIban(this.iban).subscribe((deposit) => {
            this.deposit = deposit;
            this.filterDates = {
                from: dayjs__WEBPACK_IMPORTED_MODULE_2___default()(deposit.openDate).toDate(),
                to: dayjs__WEBPACK_IMPORTED_MODULE_2___default()().toDate(),
            };
            this.mapDepositName();
            this.initStatementSubscriptions();
        }));
        this.subscription.add(this.translateService.onLangChange.subscribe(() => {
            this.mapDepositName();
        }));
    }
    initStatementSubscriptions() {
        this.subscription.add(this.dates$
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.distinctUntilChanged)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.map)((dates) => {
            return {
                page: this.page,
                pageSize: this.pageSize,
                dateFrom: dayjs__WEBPACK_IMPORTED_MODULE_2___default()(dates.from).format(_utils_dates__WEBPACK_IMPORTED_MODULE_5__.API_DATE_FORMAT),
                dateTo: dayjs__WEBPACK_IMPORTED_MODULE_2___default()(dates.to).format(_utils_dates__WEBPACK_IMPORTED_MODULE_5__.API_DATE_FORMAT),
            };
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.switchMap)((filter) => {
            return this.depositsService.getDepositInterests(this.iban, filter);
        }))
            .subscribe({
            next: (statement) => {
                this.statement = statement;
            },
            error: () => {
                this.handleStatementError();
            },
            complete: () => {
                if (!this.statement) {
                    this.handleStatementError();
                }
            },
        }));
        this.subscription.add(this.page$
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.distinctUntilChanged)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.map)((page) => {
            var _a, _b;
            return {
                page,
                pageSize: this.pageSize,
                dateFrom: dayjs__WEBPACK_IMPORTED_MODULE_2___default()((_a = this.filterDates) === null || _a === void 0 ? void 0 : _a.from).format(_utils_dates__WEBPACK_IMPORTED_MODULE_5__.API_DATE_FORMAT),
                dateTo: dayjs__WEBPACK_IMPORTED_MODULE_2___default()((_b = this.filterDates) === null || _b === void 0 ? void 0 : _b.to).format(_utils_dates__WEBPACK_IMPORTED_MODULE_5__.API_DATE_FORMAT),
            };
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.concatMap)((filter) => this.depositsService.getDepositInterests(this.iban, filter)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.takeWhile)((statement) => statement.transactionGroups.length > 0))
            .subscribe({
            next: (statement) => {
                this.handleStatementSuccess(statement);
            },
            error: () => {
                this.handleStatementError();
            },
            complete: () => {
                if (!this.statement) {
                    this.handleStatementError();
                }
            },
        }));
    }
    handleStatementError() {
        this.hasError = true;
    }
    handleStatementSuccess(statement) {
        if (!this.statement && !statement) {
            this.handleStatementError();
        }
        if (this.statement.transactionGroups[this.statement.transactionGroups.length - 1].groupDate === statement.transactionGroups[0].groupDate) {
            this.statement = Object.assign(Object.assign({}, this.statement), { transactionGroups: [
                    ...this.statement.transactionGroups.slice(0, -1),
                    ...this.statement.transactionGroups.slice(-1).map((group) => {
                        return Object.assign(Object.assign({}, group), { transactions: [
                                ...group.transactions,
                                ...statement.transactionGroups[0].transactions,
                            ] });
                    }),
                ] });
        }
        else {
            this.statement = Object.assign(Object.assign({}, this.statement), { transactionGroups: [
                    ...this.statement.transactionGroups,
                    ...statement.transactionGroups,
                ] });
        }
    }
    retrievePeriod() {
        return `${dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.filterDates.from).format(_utils_dates__WEBPACK_IMPORTED_MODULE_5__.UI_DATE_FORMAT)} - ${dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.filterDates.to).format(_utils_dates__WEBPACK_IMPORTED_MODULE_5__.UI_DATE_FORMAT)}`;
    }
    mapDepositName() {
        this.depositName = this.accountsService.getDepositName(this.deposit);
    }
};
DepositInterestsComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_17__.ActivatedRoute },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_18__.TranslateService },
    { type: _accounts_services__WEBPACK_IMPORTED_MODULE_3__.AccountsService },
    { type: _analytics_services_manager__WEBPACK_IMPORTED_MODULE_8__.AnalyticsManagerAbstract },
    { type: _services__WEBPACK_IMPORTED_MODULE_7__.DepositsService },
    { type: angular_notifier__WEBPACK_IMPORTED_MODULE_19__.NotifierService },
    { type: _shared_services__WEBPACK_IMPORTED_MODULE_4__.FilesService }
];
DepositInterestsComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_21__.Component)({
        selector: 'j-deposit-interests',
        template: _deposit_interests_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        styles: [_deposit_interests_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositInterestsComponent);



/***/ }),

/***/ 36291:
/*!**********************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-requisites/deposit-requisites.component.ts ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositRequisitesComponent": () => (/* binding */ DepositRequisitesComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_requisites_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-requisites.component.html?ngResource */ 97015);
/* harmony import */ var _deposit_requisites_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-requisites.component.scss?ngResource */ 97832);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/router */ 52816);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ 32425);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ 83910);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ 44661);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ngx-translate/core */ 33935);
/* harmony import */ var angular_notifier__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! angular-notifier */ 50449);
/* harmony import */ var ngx_mask__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ngx-mask */ 7038);
/* harmony import */ var _company_company_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @company/company.service */ 26164);
/* harmony import */ var _shared_masked_masked__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @shared/masked/masked */ 31475);
/* harmony import */ var _shared_services__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @shared/services */ 17253);
/* harmony import */ var _shared_pipes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @shared/pipes */ 39843);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../services */ 66281);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../config */ 65023);
















let DepositRequisitesComponent = class DepositRequisitesComponent {
    constructor(route, depositsService, companyService, maskPipe, formatIban, bankFromAccount, translateService, notifierService, filesService) {
        this.route = route;
        this.depositsService = depositsService;
        this.companyService = companyService;
        this.maskPipe = maskPipe;
        this.formatIban = formatIban;
        this.bankFromAccount = bankFromAccount;
        this.translateService = translateService;
        this.notifierService = notifierService;
        this.filesService = filesService;
        this.colsClasslist = _config__WEBPACK_IMPORTED_MODULE_7__.PAGE_COLS_CLASSLIST;
        this.loadingCount = Array(6);
        this.isReady = false;
        this.isDownloading = false;
        this.subscription = new rxjs__WEBPACK_IMPORTED_MODULE_8__.Subscription();
        this.route.parent.params.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.take)(1)).subscribe((params) => {
            this.iban = params.iban;
            this.initSubscriptions();
        });
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    onCopy() {
        this.notifierService.notify('default', this.translateService.instant(this.mapTranslate('COPIED')));
    }
    onDownload() {
        this.isDownloading = true;
        this.depositsService
            .getRequisitesPdf(this.iban)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.take)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.finalize)(() => (this.isDownloading = false)))
            .subscribe((blob) => {
            this.filesService.downloadFile(blob, `${this.iban}.pdf`);
        });
    }
    initSubscriptions() {
        this.depositsService
            .getDepositByIban(this.iban)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.take)(1))
            .subscribe((deposit) => {
            this.list = this.generateList(deposit);
            this.textToCopy = this.generateTextToCopy();
            this.isReady = true;
        });
        this.subscription.add(this.translateService.onLangChange.subscribe(() => {
            this.generateTextToCopy();
        }));
    }
    generateTextToCopy() {
        return this.list
            .map((item) => {
            if (!(item.value || item.valueToCopy)) {
                return;
            }
            return `${this.translateService.instant(item.label)}: ${item.valueToCopy || item.value}`;
        })
            .join('\n');
    }
    mapListTranslate(key) {
        if (!key) {
            return '';
        }
        return this.mapTranslate(`LIST.${key}`);
    }
    mapTranslate(key) {
        return `DEPOSITS.REQUISITES.${key}`;
    }
    generateList(deposit) {
        return [
            {
                label: this.mapListTranslate('COMPANY'),
                value: this.companyService.currentCompany.name,
            },
            {
                label: this.mapListTranslate('BIN'),
                value: this.maskPipe.transform(this.companyService.currentCompany.bin, _shared_masked_masked__WEBPACK_IMPORTED_MODULE_3__.Masks.iin.mask),
                valueToCopy: this.companyService.currentCompany.bin,
            },
            {
                label: this.mapListTranslate('KBE'),
                value: this.companyService.currentCompany.kod,
            },
            {
                label: this.mapListTranslate('IBAN'),
                value: this.formatIban.transform(deposit.iban),
                valueToCopy: deposit.iban,
            },
            {
                label: this.mapListTranslate('BANK'),
                value: this.bankFromAccount.transform(deposit.iban, 'name'),
            },
            {
                label: this.mapListTranslate('BIC'),
                value: this.bankFromAccount.transform(deposit.iban, 'bic'),
            },
        ];
    }
};
DepositRequisitesComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_11__.ActivatedRoute },
    { type: _services__WEBPACK_IMPORTED_MODULE_6__.DepositsService },
    { type: _company_company_service__WEBPACK_IMPORTED_MODULE_2__.CompanyService },
    { type: ngx_mask__WEBPACK_IMPORTED_MODULE_12__.MaskPipe },
    { type: _shared_pipes__WEBPACK_IMPORTED_MODULE_5__.FormatIbanPipe },
    { type: _shared_pipes__WEBPACK_IMPORTED_MODULE_5__.BankFromAccountPipe },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_13__.TranslateService },
    { type: angular_notifier__WEBPACK_IMPORTED_MODULE_14__.NotifierService },
    { type: _shared_services__WEBPACK_IMPORTED_MODULE_4__.FilesService }
];
DepositRequisitesComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_16__.Component)({
        selector: 'j-deposit-requisites',
        template: _deposit_requisites_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        styles: [_deposit_requisites_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositRequisitesComponent);



/***/ }),

/***/ 90426:
/*!********************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-statement/deposit-statement.component.ts ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositStatementComponent": () => (/* binding */ DepositStatementComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_statement_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-statement.component.html?ngResource */ 51290);
/* harmony import */ var _deposit_statement_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-statement.component.scss?ngResource */ 35486);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/router */ 52816);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ 32425);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ 92218);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ 83910);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ 86942);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs/operators */ 53298);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ 59095);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs/operators */ 11133);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs/operators */ 45050);
/* harmony import */ var _utils_dates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @utils/dates */ 12266);
/* harmony import */ var _filter_filter_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @filter/filter.model */ 41359);
/* harmony import */ var _filter_filter_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @filter/filter.service */ 67515);
/* harmony import */ var _shared_masked_masked_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @shared/masked/masked.service */ 26484);
/* harmony import */ var _shared_services__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @shared/services */ 17253);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../config */ 65023);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../services */ 66281);
/* harmony import */ var _analytics_services_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @analytics/services/manager */ 46155);















const MAX_PAGE_SIZE = 99999;
let DepositStatementComponent = class DepositStatementComponent {
    constructor(analytics, route, filterService, depositsService, maskedService, filesService) {
        this.analytics = analytics;
        this.route = route;
        this.filterService = filterService;
        this.depositsService = depositsService;
        this.maskedService = maskedService;
        this.filesService = filesService;
        this.filterMode = _filter_filter_model__WEBPACK_IMPORTED_MODULE_3__.FILTER_MODE.DEPOSITS;
        this.colsClasslist = _config__WEBPACK_IMPORTED_MODULE_7__.PAGE_COLS_CLASSLIST;
        this.filter = this.filterService.getDefaults(_filter_filter_model__WEBPACK_IMPORTED_MODULE_3__.FILTER_MODE.DEPOSITS);
        this.statementOptions = {
            hasDetails: true,
        };
        this.hasError = false;
        this.emptyLabel = 'ACCOUNTS.EMPTY_STATEMENT';
        this.subscription = new rxjs__WEBPACK_IMPORTED_MODULE_10__.Subscription();
        this.page$ = new rxjs__WEBPACK_IMPORTED_MODULE_11__.Subject();
        this.filter$ = new rxjs__WEBPACK_IMPORTED_MODULE_11__.Subject();
        this.page = 1;
        this.pageSize = 10;
        this.route.parent.params.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.take)(1)).subscribe((params) => {
            this.iban = params.iban;
            this.initSubscriptions();
            this.initStatementSubscriptions();
        });
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    onDownload(fileType) {
        var _a;
        this.analytics.logEvent('DepositStatement_Download_Click', {
            version: 1,
            type: fileType,
        });
        const filter = Object.assign(Object.assign({}, this.mapFilter(this.filter)), { pageSize: ((_a = this.statement) === null || _a === void 0 ? void 0 : _a.totalTransactionsCount) || MAX_PAGE_SIZE });
        this.depositsService
            .downloadStatement(this.iban, filter, fileType)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.take)(1))
            .subscribe({
            next: ({ file, filename }) => {
                this.analytics.logEvent('DepositStatement_Download_Result', {
                    version: 1,
                    status: 200,
                });
                this.filesService.downloadFile(file, filename);
            },
            error: (error) => {
                this.analytics.logEvent('DepositStatement_Download_Result', {
                    version: 1,
                    status: 502,
                    error,
                });
            },
        });
    }
    onRetry() {
        this.onFilter();
    }
    onFilter(filter = this.filter) {
        this.statement = null;
        this.hasError = false;
        this.page = 1;
        this.filter = Object.assign({}, filter);
        this.filter$.next(filter);
    }
    onScroll() {
        this.page$.next(++this.page);
    }
    initSubscriptions() {
        this.currency$ = this.depositsService.getDepositByIban(this.iban).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.map)((deposit) => {
            return deposit.balance.currency;
        }));
    }
    initStatementSubscriptions() {
        this.subscription.add(this.filter$
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.distinctUntilChanged)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.map)((filter) => {
            return this.mapFilter(filter);
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.switchMap)((filter) => {
            return this.depositsService.getStatement(this.iban, filter);
        }))
            .subscribe((statement) => {
            this.statement = statement;
        }, () => {
            this.hasError = true;
        }));
        this.subscription.add(this.page$
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.distinctUntilChanged)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.map)((page) => {
            return Object.assign(Object.assign({}, this.mapFilter(this.filter)), { page });
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.concatMap)((filter) => this.depositsService.getStatement(this.iban, filter)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.takeWhile)((statement) => { var _a; return ((_a = statement.transactionGroups) === null || _a === void 0 ? void 0 : _a.length) > 0; }))
            .subscribe((statement) => {
            if (this.statement.transactionGroups[this.statement.transactionGroups.length - 1].groupDate === statement.transactionGroups[0].groupDate) {
                this.statement = Object.assign(Object.assign({}, this.statement), { transactionGroups: [
                        ...this.statement.transactionGroups.slice(0, -1),
                        ...this.statement.transactionGroups.slice(-1).map((group) => {
                            return Object.assign(Object.assign({}, group), { transactions: [
                                    ...group.transactions,
                                    ...statement.transactionGroups[0].transactions,
                                ] });
                        }),
                    ] });
            }
            else {
                this.statement = Object.assign(Object.assign({}, this.statement), { transactionGroups: [
                        ...this.statement.transactionGroups,
                        ...statement.transactionGroups,
                    ] });
            }
        }));
    }
    mapFilter(filter) {
        return {
            dateFrom: filter.periodFrom
                ? (0,_utils_dates__WEBPACK_IMPORTED_MODULE_2__.convertDateToApiFormat)(filter.periodFrom)
                : null,
            dateTo: filter.periodTo ? (0,_utils_dates__WEBPACK_IMPORTED_MODULE_2__.convertDateToApiFormat)(filter.periodTo) : null,
            documentNumber: filter.documentNumber,
            correspondentAccount: filter.recipientIban,
            correspondentBin: filter.recipientBin,
            type: filter.operationType != _filter_filter_model__WEBPACK_IMPORTED_MODULE_3__.OPERATION_CODE.ALL
                ? filter.operationType
                : null,
            sort: filter.sortBy !== _filter_filter_model__WEBPACK_IMPORTED_MODULE_3__.FILTER_SORT.DEFAULT ? filter.sortBy : null,
            amountFrom: filter.amountFrom
                ? this.maskedService.getNumberedAmount(filter.amountFrom)
                : null,
            amountTo: filter.amountTo
                ? this.maskedService.getNumberedAmount(filter.amountTo)
                : null,
            withCommission: filter.comission
                ? filter.comission === _filter_filter_model__WEBPACK_IMPORTED_MODULE_3__.FILTER_COMISSION.WITH_COMISSION
                    ? true
                    : false
                : null,
            page: this.page,
            pageSize: this.pageSize,
        };
    }
};
DepositStatementComponent.ctorParameters = () => [
    { type: _analytics_services_manager__WEBPACK_IMPORTED_MODULE_9__.AnalyticsManagerAbstract },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_18__.ActivatedRoute },
    { type: _filter_filter_service__WEBPACK_IMPORTED_MODULE_4__.FilterService },
    { type: _services__WEBPACK_IMPORTED_MODULE_8__.DepositsService },
    { type: _shared_masked_masked_service__WEBPACK_IMPORTED_MODULE_5__.MaskedService },
    { type: _shared_services__WEBPACK_IMPORTED_MODULE_6__.FilesService }
];
DepositStatementComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_20__.Component)({
        selector: 'j-deposit-statement',
        template: _deposit_statement_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        styles: [_deposit_statement_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositStatementComponent);



/***/ }),

/***/ 96052:
/*!************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-terms/deposit-terms.component.ts ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositTermsComponent": () => (/* binding */ DepositTermsComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_terms_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-terms.component.html?ngResource */ 85502);
/* harmony import */ var _deposit_terms_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-terms.component.scss?ngResource */ 44813);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/router */ 52816);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ 32425);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 83910);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ 86942);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ 16901);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ngx-translate/core */ 33935);
/* harmony import */ var _shared_pipes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @shared/pipes */ 39843);
/* harmony import */ var _utils_dates__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @utils/dates */ 12266);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../config */ 65023);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../services */ 66281);













let DepositTermsComponent = class DepositTermsComponent {
    constructor(route, depositsService, translateService, moneyPipe, formatIban) {
        this.route = route;
        this.depositsService = depositsService;
        this.translateService = translateService;
        this.moneyPipe = moneyPipe;
        this.formatIban = formatIban;
        this.colsClasslist = _config__WEBPACK_IMPORTED_MODULE_5__.PAGE_COLS_CLASSLIST;
        this.subscription = new rxjs__WEBPACK_IMPORTED_MODULE_7__.Subscription();
        this.hasError = false;
        this.mainLoadingCount = Array(5);
        this.otherLoadingCount = Array(2);
        this.route.parent.params.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.take)(1)).subscribe((params) => {
            this.iban = params.iban;
            this.initSubscriptions();
        });
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    onRetry() {
        this.initTermsSubscription();
    }
    initSubscriptions() {
        this.initTermsSubscription();
        this.subscription.add(this.translateService.onLangChange
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((event) => event.lang))
            .subscribe(() => {
            this.generateInfo();
        }));
    }
    initTermsSubscription() {
        this.subscription.add(this.depositsService.getDepositTerms(this.iban).subscribe({
            next: (terms) => {
                this.terms = terms;
                this.generateInfo();
            },
            error: () => {
                this.handleTermsError();
            },
            complete: () => {
                if (!this.terms) {
                    this.handleTermsError();
                }
            },
        }));
    }
    handleTermsError() {
        this.hasError = true;
    }
    generateInfo() {
        this.name = this.extractTranslation(this.terms.depositType.descriptionTranslations);
        this.generateMainInfo();
        this.generateReplenishmentInfo();
        this.generateWithdrawalInfo();
    }
    generateMainInfo() {
        this.mainInfo = [
            {
                label: this.mapMainLabel('RATE'),
                value: this.terms.interestRate ? `${this.terms.interestRate}%` : '',
            },
            {
                label: this.mapMainLabel('DOCUMENT_NUMBER'),
                value: this.terms.contractCode,
            },
            {
                label: this.mapMainLabel('PERIOD'),
                value: this.mapPeriodLabel(),
            },
            {
                label: this.mapMainLabel('AMOUNT'),
                value: this.moneyPipe.transform({
                    amount: this.terms.contractSum,
                    currency: this.terms.balance.currency,
                }),
            },
            {
                label: this.mapMainLabel('INTEREST'),
                value: this.extractTranslation(this.terms.interestPaymentOption.descriptionTranslations),
            },
            {
                label: this.mapMainLabel('IBAN'),
                value: this.formatIban.transform(this.terms.clientAccount),
            },
        ];
    }
    generateReplenishmentInfo() {
        this.replenishmentInfo = [
            {
                label: this.mapReplenishmentLabel('TITLE'),
                value: this.translateService.instant(this.terms.addPay ? 'SHARED.YES' : 'SHARED.NO'),
            },
            {
                label: this.mapReplenishmentLabel('MAX_AMOUNT'),
                value: this.moneyPipe.transform({
                    amount: this.terms.maxSum,
                    currency: this.terms.balance.currency,
                }),
            },
        ];
    }
    generateWithdrawalInfo() {
        this.withdrawalInfo = [
            {
                label: this.mapWithdrawalLabel('PARTIAL_WITHDRAWAL'),
                value: this.translateService.instant(this.terms.payOut ? 'SHARED.YES' : 'SHARED.NO'),
            },
            {
                label: this.mapWithdrawalLabel('IRREDUCIBLE_AMOUNT'),
                value: this.moneyPipe.transform({
                    amount: this.terms.irreducibleBalance,
                    currency: this.terms.balance.currency,
                }),
            },
        ];
    }
    mapMainLabel(key) {
        return this.mapLabel('MAIN', key);
    }
    mapReplenishmentLabel(key) {
        return this.mapLabel('REPLENISHMENT', key);
    }
    mapWithdrawalLabel(key) {
        return this.mapLabel('WITHDRAWAL', key);
    }
    mapLabel(label, key) {
        if (!key) {
            return '';
        }
        return this.mapTranslate(`${label}.${key}`);
    }
    mapPeriodLabel() {
        const from = (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.convertApiDateToUiFormat)(this.terms.fromDate);
        if (!this.terms.toDate) {
            return from;
        }
        const to = (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.convertApiDateToUiFormat)(this.terms.toDate);
        const count = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.terms.toDate).diff(this.terms.fromDate, 'month');
        let translateKey;
        switch (count % 20) {
            case 1:
                translateKey = 'ONE';
                break;
            case 2:
            case 3:
            case 4:
                translateKey = 'FEW';
                break;
            default:
                translateKey = 'MANY';
                break;
        }
        const monthsLabel = this.translateService.instant(this.mapMainLabel(`MONTHS.${translateKey}`), { count });
        return `${from} - ${to} <br> (${monthsLabel})`;
    }
    extractTranslation(translations) {
        return translations.translations[this.translateService.currentLang];
    }
    mapTranslate(key) {
        if (!key) {
            return '';
        }
        return `DEPOSITS.TERMS.${key}`;
    }
};
DepositTermsComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_10__.ActivatedRoute },
    { type: _services__WEBPACK_IMPORTED_MODULE_6__.DepositsService },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_11__.TranslateService },
    { type: _shared_pipes__WEBPACK_IMPORTED_MODULE_3__.MoneyPipe },
    { type: _shared_pipes__WEBPACK_IMPORTED_MODULE_3__.FormatIbanPipe }
];
DepositTermsComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_13__.Component)({
        selector: 'j-deposit-terms',
        template: _deposit_terms_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        styles: [_deposit_terms_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositTermsComponent);



/***/ }),

/***/ 97276:
/*!************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit/deposit.component.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositComponent": () => (/* binding */ DepositComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit.component.html?ngResource */ 9790);
/* harmony import */ var _deposit_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit.component.scss?ngResource */ 88145);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ 52816);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 32425);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 83910);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config */ 65023);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services */ 66281);









let DepositComponent = class DepositComponent {
    constructor(route, router, depositsService) {
        this.route = route;
        this.router = router;
        this.depositsService = depositsService;
        this.isLoading = true;
        this.subscription = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subscription();
        this.colsClasslist = _config__WEBPACK_IMPORTED_MODULE_2__.PAGE_COLS_CLASSLIST;
        this.route.params.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.take)(1)).subscribe((params) => {
            this.iban = params.iban;
            this.deposit$ = this.depositsService.getDepositByIban(this.iban);
        });
    }
    onClose() {
        this.router.navigate(['/accounts']);
    }
};
DepositComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_6__.ActivatedRoute },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_6__.Router },
    { type: _services__WEBPACK_IMPORTED_MODULE_3__.DepositsService }
];
DepositComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.Component)({
        selector: 'j-deposit',
        template: _deposit_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        styles: [_deposit_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositComponent);



/***/ }),

/***/ 36251:
/*!****************************************************!*\
  !*** ./src/app/pages/deposits/components/index.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositComponent": () => (/* reexport safe */ _deposit_deposit_component__WEBPACK_IMPORTED_MODULE_0__.DepositComponent),
/* harmony export */   "DepositStatementComponent": () => (/* reexport safe */ _deposit_statement_deposit_statement_component__WEBPACK_IMPORTED_MODULE_1__.DepositStatementComponent),
/* harmony export */   "DepositInterestsComponent": () => (/* reexport safe */ _deposit_interests_deposit_interests_component__WEBPACK_IMPORTED_MODULE_2__.DepositInterestsComponent),
/* harmony export */   "DepositTermsComponent": () => (/* reexport safe */ _deposit_terms_deposit_terms_component__WEBPACK_IMPORTED_MODULE_3__.DepositTermsComponent),
/* harmony export */   "DepositRequisitesComponent": () => (/* reexport safe */ _deposit_requisites_deposit_requisites_component__WEBPACK_IMPORTED_MODULE_4__.DepositRequisitesComponent)
/* harmony export */ });
/* harmony import */ var _deposit_deposit_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit/deposit.component */ 97276);
/* harmony import */ var _deposit_statement_deposit_statement_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-statement/deposit-statement.component */ 90426);
/* harmony import */ var _deposit_interests_deposit_interests_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./deposit-interests/deposit-interests.component */ 38832);
/* harmony import */ var _deposit_terms_deposit_terms_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./deposit-terms/deposit-terms.component */ 96052);
/* harmony import */ var _deposit_requisites_deposit_requisites_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deposit-requisites/deposit-requisites.component */ 36291);
// wrapper

// pages






/***/ }),

/***/ 47601:
/*!***************************************************!*\
  !*** ./src/app/pages/deposits/config/deposits.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PAGE_COLS_CLASSLIST": () => (/* binding */ PAGE_COLS_CLASSLIST)
/* harmony export */ });
const PAGE_COLS_CLASSLIST = 'offset-lg-1 col-lg-10 offset-xl-2 col-xl-8';


/***/ }),

/***/ 65023:
/*!************************************************!*\
  !*** ./src/app/pages/deposits/config/index.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PAGE_COLS_CLASSLIST": () => (/* reexport safe */ _deposits__WEBPACK_IMPORTED_MODULE_0__.PAGE_COLS_CLASSLIST)
/* harmony export */ });
/* harmony import */ var _deposits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposits */ 47601);



/***/ }),

/***/ 30408:
/*!***********************************************************!*\
  !*** ./src/app/pages/deposits/deposits-routing.module.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositsRoutingModule": () => (/* binding */ DepositsRoutingModule)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ 52816);
/* harmony import */ var _shared_guards_is_feature_enabled_guard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/guards/is-feature-enabled.guard */ 73355);
/* harmony import */ var _feature_flags_feature_flags_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @feature-flags/feature-flags.model */ 41064);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components */ 36251);






const routes = [
    {
        path: ':iban',
        component: _components__WEBPACK_IMPORTED_MODULE_2__.DepositComponent,
        children: [
            {
                path: '',
                redirectTo: 'statement',
            },
            {
                path: 'statement',
                component: _components__WEBPACK_IMPORTED_MODULE_2__.DepositStatementComponent,
            },
            {
                path: 'interests',
                canActivate: [_shared_guards_is_feature_enabled_guard__WEBPACK_IMPORTED_MODULE_0__.IsFeatureEnabledGuard],
                data: { featureFlag: _feature_flags_feature_flags_model__WEBPACK_IMPORTED_MODULE_1__.FEATURE_FLAG.DEPOSIT_REWARDS },
                component: _components__WEBPACK_IMPORTED_MODULE_2__.DepositInterestsComponent,
            },
            {
                path: 'terms',
                component: _components__WEBPACK_IMPORTED_MODULE_2__.DepositTermsComponent,
            },
            {
                path: 'requisites',
                component: _components__WEBPACK_IMPORTED_MODULE_2__.DepositRequisitesComponent,
            },
        ],
    },
];
let DepositsRoutingModule = class DepositsRoutingModule {
};
DepositsRoutingModule = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.NgModule)({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_5__.RouterModule.forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_5__.RouterModule],
    })
], DepositsRoutingModule);



/***/ }),

/***/ 53803:
/*!***************************************************!*\
  !*** ./src/app/pages/deposits/deposits.module.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositsModule": () => (/* binding */ DepositsModule)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ 36362);
/* harmony import */ var ngx_infinite_scroll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ngx-infinite-scroll */ 64503);
/* harmony import */ var _shared_shared_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/shared.module */ 44466);
/* harmony import */ var _filter_filter_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @filter/filter.module */ 67655);
/* harmony import */ var _statement2_statement2_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @statement2/statement2.module */ 19735);
/* harmony import */ var _deposits_routing_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deposits-routing.module */ 30408);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components */ 36251);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers */ 44992);










const COMPONENTS = [
    _components__WEBPACK_IMPORTED_MODULE_5__.DepositComponent,
    _components__WEBPACK_IMPORTED_MODULE_5__.DepositRequisitesComponent,
    _components__WEBPACK_IMPORTED_MODULE_5__.DepositInterestsComponent,
    _components__WEBPACK_IMPORTED_MODULE_5__.DepositStatementComponent,
    _components__WEBPACK_IMPORTED_MODULE_5__.DepositTermsComponent,
];
const HELPERS = [
    _helpers__WEBPACK_IMPORTED_MODULE_6__.DepositHeaderComponent,
    _helpers__WEBPACK_IMPORTED_MODULE_6__.DepositInterestsFilterComponent,
    _helpers__WEBPACK_IMPORTED_MODULE_6__.DepositTabsComponent,
    _helpers__WEBPACK_IMPORTED_MODULE_6__.DepositInterestsStatementComponent,
    _helpers__WEBPACK_IMPORTED_MODULE_6__.DepositInterestsTransactionComponent,
    _helpers__WEBPACK_IMPORTED_MODULE_6__.DepositInterestsGroupComponent,
    _helpers__WEBPACK_IMPORTED_MODULE_6__.DepositInterestsDetailsComponent,
];
let DepositsModule = class DepositsModule {
};
DepositsModule = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModule)({
        imports: [
            // Angular
            _angular_common__WEBPACK_IMPORTED_MODULE_9__.CommonModule,
            // Vendor
            ngx_infinite_scroll__WEBPACK_IMPORTED_MODULE_0__.InfiniteScrollModule,
            // Jusan
            _filter_filter_module__WEBPACK_IMPORTED_MODULE_2__.FilterModule,
            _statement2_statement2_module__WEBPACK_IMPORTED_MODULE_3__.Statement2Module,
            _shared_shared_module__WEBPACK_IMPORTED_MODULE_1__.SharedModule,
            // routing
            _deposits_routing_module__WEBPACK_IMPORTED_MODULE_4__.DepositsRoutingModule,
        ],
        declarations: [COMPONENTS, HELPERS],
    })
], DepositsModule);



/***/ }),

/***/ 77900:
/*!***********************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-header/deposit-header.component.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositHeaderComponent": () => (/* binding */ DepositHeaderComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_header_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-header.component.html?ngResource */ 18165);
/* harmony import */ var _deposit_header_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-header.component.scss?ngResource */ 39771);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _feature_flags_feature_flags_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @feature-flags/feature-flags.service */ 20794);
/* harmony import */ var _feature_flags_feature_flags_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @feature-flags/feature-flags.model */ 41064);






let DepositHeaderComponent = class DepositHeaderComponent {
    constructor(featureFlagsService) {
        this.featureFlagsService = featureFlagsService;
        this.isDepositOperationsDisabled$ = this.featureFlagsService.isDisabledStream(_feature_flags_feature_flags_model__WEBPACK_IMPORTED_MODULE_3__.FEATURE_FLAG.DEPOSIT_OPERATIONS);
    }
};
DepositHeaderComponent.ctorParameters = () => [
    { type: _feature_flags_feature_flags_service__WEBPACK_IMPORTED_MODULE_2__.FeatureFlagsService }
];
DepositHeaderComponent.propDecorators = {
    iban: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }],
    deposit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }]
};
DepositHeaderComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Component)({
        selector: 'j-deposit-header',
        template: _deposit_header_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush,
        styles: [_deposit_header_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositHeaderComponent);



/***/ }),

/***/ 8587:
/*!*********************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-details/deposit-interests-details.component.ts ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositInterestsDetailsComponent": () => (/* binding */ DepositInterestsDetailsComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_interests_details_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-interests-details.component.html?ngResource */ 67843);
/* harmony import */ var _deposit_interests_details_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-interests-details.component.scss?ngResource */ 12850);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ 64139);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ngx-translate/core */ 33935);
/* harmony import */ var ngx_mask__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ngx-mask */ 7038);
/* harmony import */ var _shared_masked_masked__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/masked/masked */ 31475);
/* harmony import */ var _shared_pipes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @shared/pipes */ 39843);
/* harmony import */ var _statement2_services__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @statement2/services */ 1335);
/* harmony import */ var _pages_deposits_services__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @pages/deposits/services */ 66281);
/* harmony import */ var angular_notifier__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! angular-notifier */ 50449);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! dayjs */ 16901);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _utils_dates__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @utils/dates */ 12266);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ 83910);
/* harmony import */ var _shared_services__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @shared/services */ 17253);
/* harmony import */ var _analytics_services_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @analytics/services/manager */ 46155);

















let DepositInterestsDetailsComponent = class DepositInterestsDetailsComponent {
    constructor(analytics, depositsService, filesService, maskPipe, moneyPipe, notifierService, statement2Service, translateService) {
        this.analytics = analytics;
        this.depositsService = depositsService;
        this.filesService = filesService;
        this.maskPipe = maskPipe;
        this.moneyPipe = moneyPipe;
        this.notifierService = notifierService;
        this.statement2Service = statement2Service;
        this.translateService = translateService;
        this.iban = '';
        this.depositName = '';
    }
    ngOnInit() {
        this.mapDate();
        this.mapGroups();
    }
    onDownload() {
        this.analytics.logEvent('RewardDetails_Download_Click', {
            version: 1,
            type: 'PDF'
        });
        this.notifierService.notify('info', this.translateService.instant(this.mapDetailsLabel('DOWNLOADING')));
        const name = this.translateService.instant(this.mapDetailsLabel('FILENAME'), {
            name: this.depositName,
            period: dayjs__WEBPACK_IMPORTED_MODULE_6___default()(this.transaction.documentDate).format(_utils_dates__WEBPACK_IMPORTED_MODULE_7__.UI_DATE_FORMAT),
        });
        this.depositsService
            .downloadDepositInterestById(this.iban, this.transaction.id)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.take)(1))
            .subscribe({
            next: (blob) => {
                this.analytics.logEvent('RewardDetails_Download_Result', {
                    version: 1,
                    status: 200,
                });
                this.filesService.downloadFile(blob, `${name}.pdf`);
            },
            error: (error) => {
                this.analytics.logEvent('RewardDetails_Download_Result', {
                    version: 1,
                    status: 502,
                    error,
                });
            },
        });
    }
    onKpnDownload() {
        this.analytics.logEvent('RewardDetails_KPNCert_Click', {
            version: 1,
        });
        this.notifierService.notify('info', this.translateService.instant('DEPOSITS.KPN.DOWNLOADING'));
        const name = this.translateService.instant('DEPOSITS.KPN.FILENAME_BY_ID', {
            date: dayjs__WEBPACK_IMPORTED_MODULE_6___default()(this.transaction.documentDate).format(_utils_dates__WEBPACK_IMPORTED_MODULE_7__.UI_DATE_FORMAT),
        });
        this.depositsService
            .downloadCertificate({
            iban: this.iban,
            interestId: this.transaction.id,
        })
            .subscribe({
            next: (blob) => {
                this.analytics.logEvent('RewardDetails_KPNCert_Result', {
                    version: 1,
                    status: 200,
                });
                this.filesService.downloadFile(blob, `${name}.pdf`);
            },
            error: (error) => {
                this.analytics.logEvent('RewardDetails_KPNCert_Result', {
                    version: 1,
                    status: 502,
                    error,
                });
            },
        });
    }
    mapDate() {
        this.date$ = this.statement2Service.mapTransactionDate(this.transaction.documentDate);
    }
    mapGroups() {
        this.groups = [
            {
                title: this.mapMainLabel('TITLE'),
                data: this.generateMainData(),
            },
            {
                title: this.mapDetalizationLabel('TITLE'),
                data: this.generateDetalizationData(),
            },
        ];
    }
    generateMainData() {
        const data = [];
        data.push({
            label: this.mapMainLabel('IBAN'),
            value: (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.of)(this.maskPipe.transform(this.transaction.interestAccount, _shared_masked_masked__WEBPACK_IMPORTED_MODULE_2__.Masks.account.mask)),
        });
        return data;
    }
    generateDetalizationData() {
        const kpn$ = this.transaction.taxed
            ? (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.of)(`${this.transaction.interestTax}% â€¢ ${this.moneyPipe.transform(this.transaction.totalTaxes)}`)
            : this.translateService.get(this.mapDetalizationLabel('NO_KPN'));
        const data = [
            {
                label: this.mapDetalizationLabel('TOTAL'),
                value: (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.of)(this.moneyPipe.transform(this.transaction.totalInterest)),
            },
            {
                isCertificate: true,
                label: this.mapDetalizationLabel('KPN'),
                value: kpn$,
            },
            {
                label: this.mapDetalizationLabel('TRANSFERRED'),
                value: (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.of)(this.moneyPipe.transform(this.transaction.interest)),
            },
        ];
        return data;
    }
    mapMainLabel(key) {
        return this.mapDetailsLabel(`MAIN.${key}`);
    }
    mapDetalizationLabel(key) {
        return this.mapDetailsLabel(`DETALIZATION.${key}`);
    }
    mapDetailsLabel(key) {
        return `DEPOSITS.INTERESTS.DETAILS.${key}`;
    }
};
DepositInterestsDetailsComponent.ctorParameters = () => [
    { type: _analytics_services_manager__WEBPACK_IMPORTED_MODULE_9__.AnalyticsManagerAbstract },
    { type: _pages_deposits_services__WEBPACK_IMPORTED_MODULE_5__.DepositsService },
    { type: _shared_services__WEBPACK_IMPORTED_MODULE_8__.FilesService },
    { type: ngx_mask__WEBPACK_IMPORTED_MODULE_12__.MaskPipe },
    { type: _shared_pipes__WEBPACK_IMPORTED_MODULE_3__.MoneyPipe },
    { type: angular_notifier__WEBPACK_IMPORTED_MODULE_13__.NotifierService },
    { type: _statement2_services__WEBPACK_IMPORTED_MODULE_4__.Statement2Service },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_14__.TranslateService }
];
DepositInterestsDetailsComponent.propDecorators = {
    transaction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_15__.Input }],
    iban: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_15__.Input }],
    depositName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_15__.Input }]
};
DepositInterestsDetailsComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_16__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_15__.Component)({
        selector: 'j-deposit-interests-details',
        template: _deposit_interests_details_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_15__.ChangeDetectionStrategy.OnPush,
        styles: [_deposit_interests_details_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositInterestsDetailsComponent);



/***/ }),

/***/ 77034:
/*!*******************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-filter/deposit-interests-filter.component.ts ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositInterestsFilterComponent": () => (/* binding */ DepositInterestsFilterComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_interests_filter_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-interests-filter.component.html?ngResource */ 92069);
/* harmony import */ var _deposit_interests_filter_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-interests-filter.component.scss?ngResource */ 15853);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _analytics_services_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @analytics/services/manager */ 46155);





let DepositInterestsFilterComponent = class DepositInterestsFilterComponent {
    constructor(analytics) {
        this.analytics = analytics;
        this.filtered = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
        this.downloaded = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
        this.kpnDownloaded = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    }
    onFilter(dates) {
        this.filtered.emit(dates);
    }
    onKpnDownload() {
        this.analytics.logEvent('DepositMain_KPNCert_Click', { version: 1 });
        this.kpnDownloaded.emit();
    }
    onDownload() {
        this.analytics.logEvent('MainReward_Download_Click', {
            version: 1,
            type: 'PDF',
        });
        this.downloaded.emit();
    }
};
DepositInterestsFilterComponent.ctorParameters = () => [
    { type: _analytics_services_manager__WEBPACK_IMPORTED_MODULE_2__.AnalyticsManagerAbstract }
];
DepositInterestsFilterComponent.propDecorators = {
    filterDates: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input }],
    filtered: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output }],
    downloaded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output }],
    kpnDownloaded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output }]
};
DepositInterestsFilterComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Component)({
        selector: 'j-deposit-interests-filter',
        template: _deposit_interests_filter_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        styles: [_deposit_interests_filter_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositInterestsFilterComponent);



/***/ }),

/***/ 65986:
/*!*****************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-group/deposit-interests-group.component.ts ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositInterestsGroupComponent": () => (/* binding */ DepositInterestsGroupComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_interests_group_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-interests-group.component.html?ngResource */ 58308);
/* harmony import */ var _deposit_interests_group_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-interests-group.component.scss?ngResource */ 13304);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ 16901);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);





let DepositInterestsGroupComponent = class DepositInterestsGroupComponent {
    constructor() {
        this.clicked = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    }
    ngOnInit() {
        this.mapGroupTitle();
    }
    onClick(transaction) {
        this.clicked.emit(transaction);
    }
    mapGroupTitle() {
        this.title = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.group.groupDate).format('YYYY');
    }
};
DepositInterestsGroupComponent.ctorParameters = () => [];
DepositInterestsGroupComponent.propDecorators = {
    group: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input }],
    depositName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input }],
    clicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output }]
};
DepositInterestsGroupComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Component)({
        selector: 'j-deposit-interests-group',
        template: _deposit_interests_group_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__.ChangeDetectionStrategy.OnPush,
        styles: [_deposit_interests_group_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositInterestsGroupComponent);



/***/ }),

/***/ 8672:
/*!*************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-statement/deposit-interests-statement.component.ts ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositInterestsStatementComponent": () => (/* binding */ DepositInterestsStatementComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_interests_statement_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-interests-statement.component.html?ngResource */ 36381);
/* harmony import */ var _deposit_interests_statement_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-interests-statement.component.scss?ngResource */ 71034);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 36362);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _core_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @core/animations */ 45747);






let DepositInterestsStatementComponent = class DepositInterestsStatementComponent {
    constructor(document) {
        this.document = document;
    }
    ngOnDestroy() {
        this.document.body.classList.remove('overflow-hidden');
    }
    onClick(transaction) {
        this.document.body.classList.add('overflow-hidden');
        this.activeTransaction = transaction;
    }
    onClose() {
        this.activeTransaction = null;
        this.document.body.classList.remove('overflow-hidden');
    }
};
DepositInterestsStatementComponent.ctorParameters = () => [
    { type: Document, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject, args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT,] }] }
];
DepositInterestsStatementComponent.propDecorators = {
    statement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input }],
    iban: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input }],
    depositName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input }]
};
DepositInterestsStatementComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Component)({
        selector: 'j-deposit-interests-statement',
        template: _deposit_interests_statement_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        animations: _core_animations__WEBPACK_IMPORTED_MODULE_2__.asideAnimations,
        styles: [_deposit_interests_statement_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositInterestsStatementComponent);



/***/ }),

/***/ 32703:
/*!*****************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-transaction/deposit-interests-transaction.component.ts ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositInterestsTransactionComponent": () => (/* binding */ DepositInterestsTransactionComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_interests_transaction_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-interests-transaction.component.html?ngResource */ 17765);
/* harmony import */ var _deposit_interests_transaction_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-interests-transaction.component.scss?ngResource */ 88027);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ngx-translate/core */ 33935);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 64139);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ 16901);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);







let DepositInterestsTransactionComponent = class DepositInterestsTransactionComponent {
    constructor(translateService) {
        this.translateService = translateService;
    }
    ngOnInit() {
        this.mapDate();
    }
    mapDate() {
        const date = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.transaction.documentDate);
        if (date.isSame(dayjs__WEBPACK_IMPORTED_MODULE_2___default()(), 'day')) {
            this.date$ = this.translateService.get('DEPOSITS.INTERESTS.DATE.TODAY', {
                datetime: date.format('HH:mm'),
            });
        }
        else if (dayjs__WEBPACK_IMPORTED_MODULE_2___default()(this.transaction.documentDate).isSame(dayjs__WEBPACK_IMPORTED_MODULE_2___default()().subtract(1, 'day'), 'day')) {
            this.date$ = this.translateService.get('DEPOSITS.INTERESTS.DATE.YESTERDAY', {
                datetime: date.format('HH:mm'),
            });
        }
        else {
            this.date$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(date.format('DD MMMM HH:mm'));
        }
    }
};
DepositInterestsTransactionComponent.ctorParameters = () => [
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__.TranslateService }
];
DepositInterestsTransactionComponent.propDecorators = {
    transaction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.Input }],
    depositName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.Input }]
};
DepositInterestsTransactionComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Component)({
        selector: 'j-deposit-interests-transaction',
        template: _deposit_interests_transaction_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_5__.ChangeDetectionStrategy.OnPush,
        styles: [_deposit_interests_transaction_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositInterestsTransactionComponent);



/***/ }),

/***/ 99668:
/*!*******************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-tabs/deposit-tabs.component.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositTabsComponent": () => (/* binding */ DepositTabsComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _deposit_tabs_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-tabs.component.html?ngResource */ 89503);
/* harmony import */ var _deposit_tabs_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-tabs.component.scss?ngResource */ 43022);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 32425);
/* harmony import */ var _feature_flags_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @feature-flags/index */ 15057);






const TABS = [
    {
        label: 'DEPOSITS.STATEMENT.TITLE',
        link: 'statement',
    },
    {
        label: 'DEPOSITS.INTERESTS.TITLE',
        link: 'interests',
        isRewards: true,
    },
    {
        label: 'DEPOSITS.TERMS.TITLE',
        link: 'terms',
    },
    {
        label: 'DEPOSITS.REQUISITES.TITLE',
        link: 'requisites',
    },
];
let DepositTabsComponent = class DepositTabsComponent {
    constructor(featureFlagsService) {
        this.featureFlagsService = featureFlagsService;
        this.subscription = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subscription();
        this.initFeatureFlags();
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    initFeatureFlags() {
        this.subscription.add(this.featureFlagsService.getFeatureFlags().subscribe((flags) => {
            if (this.featureFlagsService.isDisabled(_feature_flags_index__WEBPACK_IMPORTED_MODULE_2__.FEATURE_FLAG.DEPOSIT_REWARDS)) {
                this.tabs = TABS.filter((tab) => !tab.isRewards);
            }
            else {
                this.tabs = [...TABS];
            }
        }));
    }
};
DepositTabsComponent.ctorParameters = () => [
    { type: _feature_flags_index__WEBPACK_IMPORTED_MODULE_2__.FeatureFlagsService }
];
DepositTabsComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Component)({
        selector: 'j-deposit-tabs',
        template: _deposit_tabs_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
        styles: [_deposit_tabs_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__]
    })
], DepositTabsComponent);



/***/ }),

/***/ 44992:
/*!*************************************************!*\
  !*** ./src/app/pages/deposits/helpers/index.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositHeaderComponent": () => (/* reexport safe */ _deposit_header_deposit_header_component__WEBPACK_IMPORTED_MODULE_0__.DepositHeaderComponent),
/* harmony export */   "DepositTabsComponent": () => (/* reexport safe */ _deposit_tabs_deposit_tabs_component__WEBPACK_IMPORTED_MODULE_1__.DepositTabsComponent),
/* harmony export */   "DepositInterestsFilterComponent": () => (/* reexport safe */ _deposit_interests_filter_deposit_interests_filter_component__WEBPACK_IMPORTED_MODULE_2__.DepositInterestsFilterComponent),
/* harmony export */   "DepositInterestsStatementComponent": () => (/* reexport safe */ _deposit_interests_statement_deposit_interests_statement_component__WEBPACK_IMPORTED_MODULE_3__.DepositInterestsStatementComponent),
/* harmony export */   "DepositInterestsTransactionComponent": () => (/* reexport safe */ _deposit_interests_transaction_deposit_interests_transaction_component__WEBPACK_IMPORTED_MODULE_4__.DepositInterestsTransactionComponent),
/* harmony export */   "DepositInterestsGroupComponent": () => (/* reexport safe */ _deposit_interests_group_deposit_interests_group_component__WEBPACK_IMPORTED_MODULE_5__.DepositInterestsGroupComponent),
/* harmony export */   "DepositInterestsDetailsComponent": () => (/* reexport safe */ _deposit_interests_details_deposit_interests_details_component__WEBPACK_IMPORTED_MODULE_6__.DepositInterestsDetailsComponent)
/* harmony export */ });
/* harmony import */ var _deposit_header_deposit_header_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposit-header/deposit-header.component */ 77900);
/* harmony import */ var _deposit_tabs_deposit_tabs_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deposit-tabs/deposit-tabs.component */ 99668);
/* harmony import */ var _deposit_interests_filter_deposit_interests_filter_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./deposit-interests-filter/deposit-interests-filter.component */ 77034);
/* harmony import */ var _deposit_interests_statement_deposit_interests_statement_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./deposit-interests-statement/deposit-interests-statement.component */ 8672);
/* harmony import */ var _deposit_interests_transaction_deposit_interests_transaction_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deposit-interests-transaction/deposit-interests-transaction.component */ 32703);
/* harmony import */ var _deposit_interests_group_deposit_interests_group_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./deposit-interests-group/deposit-interests-group.component */ 65986);
/* harmony import */ var _deposit_interests_details_deposit_interests_details_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./deposit-interests-details/deposit-interests-details.component */ 8587);
// common helpers


// interests helpers







/***/ }),

/***/ 93081:
/*!*************************************************************!*\
  !*** ./src/app/pages/deposits/services/deposits.service.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositsService": () => (/* binding */ DepositsService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! tslib */ 34929);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common/http */ 28784);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ 86942);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 59151);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 53298);
/* harmony import */ var _api_api_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @api/api.service */ 82524);
/* harmony import */ var _utils_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @utils/api */ 52890);
/* harmony import */ var _accounts_services__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @accounts/services */ 53145);
/* harmony import */ var _core_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @core/models */ 73902);
/* harmony import */ var _company_company_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @company/company.service */ 26164);









let DepositsService = class DepositsService {
    constructor(accountsService, companyService, apiService) {
        this.accountsService = accountsService;
        this.companyService = companyService;
        this.apiService = apiService;
    }
    getStatement(iban, filter) {
        const url = `companies/${this.companyService.currentId}/accounts/${iban}/statements`;
        const params = (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.mapParams)(filter);
        return this.apiService.getObservable(url, null, params);
    }
    downloadStatement(iban, filter, fileType) {
        const url = `companies/${this.companyService.currentId}/accounts/${iban}/statements`;
        let headers = new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpHeaders();
        headers = headers.set('Accept-File', fileType);
        headers = headers.set('Content-Type', 'application/octet-stream');
        const params = (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.mapParams)(filter);
        let extension = fileType.substring(fileType.lastIndexOf('/') + 1, fileType.length);
        if (extension === '1c') {
            extension += '.txt';
        }
        return this.apiService
            .getObservable(url, headers, params, {
            responseType: 'blob',
        })
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.map)((file) => {
            const filename = `${iban}.${extension}`;
            return {
                file,
                filename,
            };
        }));
    }
    getRequisitesPdf(iban) {
        const url = `companies/${this.companyService.currentId}/accounts/${iban}/requisites`;
        let headers = new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpHeaders();
        headers = headers.set('Accept-File', 'application/pdf');
        headers = headers.set('Content-Type', 'application/octet-stream');
        const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpParams();
        const extras = {
            responseType: 'blob',
        };
        return this.apiService.getObservable(url, headers, params, extras);
    }
    getDepositInterests(iban, filter) {
        const url = `deposit-service/companies/${this.companyService.currentId}/deposits/${iban}/interests`;
        const params = (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.mapParams)(filter);
        return this.apiService.getV2Observable(url, null, params);
    }
    downloadDepositInterests(iban, filter) {
        const url = `deposit-service/companies/${this.companyService.currentId}/deposits/${iban}/interests:export`;
        const params = (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.mapParams)(filter);
        const extras = {
            responseType: 'blob',
        };
        return this.apiService.getV2Observable(url, null, params, extras);
    }
    downloadDepositInterestById(iban, id) {
        const url = `deposit-service/companies/${this.companyService.currentId}/deposits/${iban}/interests/${id}/export`;
        const extras = {
            responseType: 'blob',
        };
        return this.apiService.getV2Observable(url, null, null, extras);
    }
    downloadCertificate(params) {
        const url = `deposit-service/companies/${this.companyService.currentId}/certificates`;
        const body = {
            params,
            certificateTypeCode: _core_models__WEBPACK_IMPORTED_MODULE_3__.DEPOSIT_CERTIFICATE_TYPE.TAX_ON_DEPOSIT_INTEREST,
        };
        const extras = {
            responseType: 'blob',
        };
        return this.apiService.postV2Observable(url, body, null, null, extras);
    }
    getDepositTerms(iban) {
        const url = `deposit-service/companies/${this.companyService.currentId}/deposits/${iban}`;
        return this.apiService.getV2Observable(url);
    }
    getDepositByIban(iban) {
        return this.accountsService.getAccountsList().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.filter)((list) => list.length > 0), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.distinctUntilChanged)(this.areArraysEqual), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.map)((list) => list.find((deposit) => deposit.iban === iban)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.filter)((deposit) => !!deposit));
    }
    areArraysEqual(a, b) {
        return (a.length === b.length &&
            a.every((value, index) => value.id === b[index].id));
    }
};
DepositsService.ctorParameters = () => [
    { type: _accounts_services__WEBPACK_IMPORTED_MODULE_2__.AccountsService },
    { type: _company_company_service__WEBPACK_IMPORTED_MODULE_4__.CompanyService },
    { type: _api_api_service__WEBPACK_IMPORTED_MODULE_0__.ApiService }
];
DepositsService = (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable)({
        providedIn: 'root',
    })
], DepositsService);



/***/ }),

/***/ 66281:
/*!**************************************************!*\
  !*** ./src/app/pages/deposits/services/index.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepositsService": () => (/* reexport safe */ _deposits_service__WEBPACK_IMPORTED_MODULE_0__.DepositsService)
/* harmony export */ });
/* harmony import */ var _deposits_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deposits.service */ 93081);



/***/ }),

/***/ 93068:
/*!***************************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-details/statement2-details.component.scss?ngResource ***!
  \***************************************************************************************************************/
/***/ ((module) => {

module.exports = ":host {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: #f6f7f8;\n}\n\n.transaction-icon {\n  color: #fff;\n}\n\n.header {\n  display: flex;\n  gap: 0.75rem;\n  align-items: center;\n  padding: 1rem;\n}\n\n.main {\n  background: #fff;\n  border-radius: 0.5rem;\n  margin: 0 1rem;\n  padding: 1.5rem 1rem;\n}\n\n.description {\n  color: #666c72;\n  background: #f6f7f8;\n  padding: 0.75rem 1rem;\n  margin: 1.5rem 0;\n  border-radius: 0.5rem;\n  word-break: break-all;\n}\n\n.scrollable {\n  flex-grow: 1;\n  overflow-y: auto;\n  margin-top: 1rem;\n  padding: 0 1rem 1rem 1rem;\n}\n\n.scrollable::-webkit-scrollbar {\n  width: 8px;\n}\n\n.scrollable::-webkit-scrollbar-track {\n  background: #fff;\n}\n\n.scrollable::-webkit-scrollbar-thumb {\n  background: #d6dadf;\n  border-radius: 10px;\n}\n\n.group {\n  background: #fff;\n  border-radius: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.group__header {\n  display: flex;\n  cursor: pointer;\n  align-items: center;\n  padding: 1rem;\n  -webkit-user-select: none;\n          user-select: none;\n}\n\n.group__list {\n  margin: 0;\n  padding: 0 1rem 1rem 1rem;\n}\n\n.group__arrow {\n  margin-left: auto;\n  color: #ef5630;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YXRlbWVudDItZGV0YWlscy5jb21wb25lbnQuc2NzcyIsIi4uLy4uLy4uLy4uLy4uL3Njc3MvX3ZhcmlhYmxlcy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLG1CQ0dTO0FESlg7O0FBSUE7RUFDRSxXQ0hNO0FERVI7O0FBSUE7RUFDRSxhQUFBO0VBQ0EsWUFBQTtFQUNBLG1CQUFBO0VBQ0EsYUFBQTtBQURGOztBQUlBO0VBQ0UsZ0JDZE07RURlTixxQkMyTGM7RUQxTGQsY0FBQTtFQUNBLG9CQUFBO0FBREY7O0FBSUE7RUFDRSxjQ2ZTO0VEZ0JULG1CQ3BCUztFRHFCVCxxQkFBQTtFQUNBLGdCQUFBO0VBQ0EscUJDaUxjO0VEaExkLHFCQUFBO0FBREY7O0FBSUE7RUFDRSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxnQkFBQTtFQUNBLHlCQUFBO0FBREY7O0FBR0U7RUFDRSxVQUFBO0FBREo7O0FBSUU7RUFDRSxnQkN4Q0k7QURzQ1I7O0FBS0U7RUFDRSxtQkN4Q087RUR5Q1AsbUJBQUE7QUFISjs7QUFPQTtFQUNFLGdCQ2xETTtFRG1ETixxQkN1SmM7RUR0SmQsbUJBQUE7QUFKRjs7QUFPQTtFQUNFLGFBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7RUFDQSxhQUFBO0VBQ0EseUJBQUE7VUFBQSxpQkFBQTtBQUpGOztBQU9BO0VBQ0UsU0FBQTtFQUNBLHlCQUFBO0FBSkY7O0FBT0E7RUFDRSxpQkFBQTtFQUNBLGNDdkNPO0FEbUNUIiwiZmlsZSI6InN0YXRlbWVudDItZGV0YWlscy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgJ3NoYXJlZCc7XHJcblxyXG46aG9zdCB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGhlaWdodDogMTAwJTtcclxuICBiYWNrZ3JvdW5kOiAkZ3JheS0yMDA7XHJcbn1cclxuXHJcbi50cmFuc2FjdGlvbi1pY29uIHtcclxuICBjb2xvcjogJHdoaXRlO1xyXG59XHJcblxyXG4uaGVhZGVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGdhcDogcmVteSgxMik7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBwYWRkaW5nOiBzcGFjZSgzKTtcclxufVxyXG5cclxuLm1haW4ge1xyXG4gIGJhY2tncm91bmQ6ICR3aGl0ZTtcclxuICBib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cztcclxuICBtYXJnaW46IDAgc3BhY2UoMyk7XHJcbiAgcGFkZGluZzogc3BhY2UoNCkgc3BhY2UoMyk7XHJcbn1cclxuXHJcbi5kZXNjcmlwdGlvbiB7XHJcbiAgY29sb3I6ICRncmF5LTYwMDtcclxuICBiYWNrZ3JvdW5kOiAkZ3JheS0yMDA7XHJcbiAgcGFkZGluZzogcmVteSgxMikgc3BhY2UoMyk7XHJcbiAgbWFyZ2luOiBzcGFjZSg0KSAwO1xyXG4gIGJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzO1xyXG4gIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcclxufVxyXG5cclxuLnNjcm9sbGFibGUge1xyXG4gIGZsZXgtZ3JvdzogMTtcclxuICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gIG1hcmdpbi10b3A6IHNwYWNlKDMpO1xyXG4gIHBhZGRpbmc6IHNwYWNlKDApIHNwYWNlKDMpIHNwYWNlKDMpIHNwYWNlKDMpO1xyXG5cclxuICAmOjotd2Via2l0LXNjcm9sbGJhciB7XHJcbiAgICB3aWR0aDogOHB4O1xyXG4gIH1cclxuXHJcbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xyXG4gICAgYmFja2dyb3VuZDogJHdoaXRlO1xyXG4gIH1cclxuXHJcbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xyXG4gICAgYmFja2dyb3VuZDogJGdyYXktNDAwO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICB9XHJcbn1cclxuXHJcbi5ncm91cCB7XHJcbiAgYmFja2dyb3VuZDogJHdoaXRlO1xyXG4gIGJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzO1xyXG4gIG1hcmdpbi1ib3R0b206IHNwYWNlKDMpO1xyXG59XHJcblxyXG4uZ3JvdXBfX2hlYWRlciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBwYWRkaW5nOiBzcGFjZSgzKTtcclxuICB1c2VyLXNlbGVjdDogbm9uZTtcclxufVxyXG5cclxuLmdyb3VwX19saXN0IHtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMCBzcGFjZSgzKSBzcGFjZSgzKSBzcGFjZSgzKTtcclxufVxyXG5cclxuLmdyb3VwX19hcnJvdyB7XHJcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgY29sb3I6ICRwcmltYXJ5O1xyXG59XHJcbiIsIi8vIFZhcmlhYmxlc1xyXG4vL1xyXG4vLyBWYXJpYWJsZXMgc2hvdWxkIGZvbGxvdyB0aGUgYCRjb21wb25lbnQtc3RhdGUtcHJvcGVydHktc2l6ZWAgZm9ybXVsYSBmb3JcclxuLy8gY29uc2lzdGVudCBuYW1pbmcuIEV4OiAkbmF2LWxpbmstZGlzYWJsZWQtY29sb3IgYW5kICRtb2RhbC1jb250ZW50LWJveC1zaGFkb3cteHMuXHJcblxyXG4vLyBDb2xvciBzeXN0ZW1cclxuXHJcbiR3aGl0ZTogI2ZmZjtcclxuJGdyYXktMTAwOiAjZmFmN2Y3O1xyXG4kZ3JheS0yMDA6ICNmNmY3Zjg7XHJcbiRncmF5LTMwMDogI2VjZWVmMTtcclxuJGdyYXktNDAwOiAjZDZkYWRmO1xyXG4kZ3JheS01MDA6ICNiN2JlYzU7XHJcbiRncmF5LTYwMDogIzY2NmM3MjtcclxuJGdyYXktNzAwOiAjNDc0YjUyO1xyXG4kZ3JheS04MDA6ICNlOWVjZjE7XHJcbiRncmF5LTkwMDogI2RiZGZlMjtcclxuJGdyYXktMTAwMDogIzgyODI4MjtcclxuJGJsYWNrOiAjMWExYzFmO1xyXG5cclxuJGdyYXlzOiAoKTtcclxuJGdyYXlzOiBtYXAtbWVyZ2UoXHJcbiAgKFxyXG4gICAgJzEwMCc6ICRncmF5LTEwMCxcclxuICAgICcyMDAnOiAkZ3JheS0yMDAsXHJcbiAgICAnMzAwJzogJGdyYXktMzAwLFxyXG4gICAgJzQwMCc6ICRncmF5LTQwMCxcclxuICAgICc1MDAnOiAkZ3JheS01MDAsXHJcbiAgICAnNjAwJzogJGdyYXktNjAwLFxyXG4gICAgJzcwMCc6ICRncmF5LTcwMCxcclxuICAgICc4MDAnOiAkZ3JheS04MDAsXHJcbiAgKSxcclxuICAkZ3JheXNcclxuKTtcclxuXHJcbiRibHVlOiAjMjA0MTc3O1xyXG4kYmx1ZS1saWdodDogIzE1ODZiYjtcclxuJGJsdWUtd2hpdGU6ICNmNWY5ZmQ7XHJcbiRvcmFuZ2U6ICNlZjU2MzA7XHJcbiRvcmFuZ2UtZGFyazogI2Q0M2UxOTtcclxuJG9yYW5nZS1saWdodDogI2Y3YWI5ODtcclxuJHllbGxvdzogI2VmOGYwMDtcclxuJGdyZWVuOiAjMjM5YTU0O1xyXG4kZ3JlZW4tbGlnaHQ6ICM3NGJhNzI7XHJcbiRyZWQ6ICNmZjAwMDA7XHJcbiRyZWQtbGlnaHQ6ICNmZmVmZWY7XHJcblxyXG4kZ3JheTogJGdyYXktNTAwO1xyXG4kZ3JheS1kYXJrOiAkZ3JheS02MDA7XHJcbiRncmF5LWxpZ2h0OiAkZ3JheS00MDA7XHJcblxyXG4kY29sb3JzOiAoKTtcclxuJGNvbG9yczogbWFwLW1lcmdlKFxyXG4gIChcclxuICAgICdibHVlJzogJGJsdWUsXHJcbiAgICAnYmx1ZS1saWdodCc6ICRibHVlLWxpZ2h0LFxyXG4gICAgJ2JsdWUtd2hpdGUnOiAkYmx1ZS13aGl0ZSxcclxuICAgICdvcmFuZ2UnOiAkb3JhbmdlLFxyXG4gICAgJ29yYW5nZS1kYXJrJzogJG9yYW5nZS1kYXJrLFxyXG4gICAgJ29yYW5nZS1saWdodCc6ICRvcmFuZ2UtbGlnaHQsXHJcbiAgICAneWVsbG93JzogJHllbGxvdyxcclxuICAgICdncmVlbic6ICRncmVlbixcclxuICAgICdncmVlbi1saWdodCc6ICRncmVlbi1saWdodCxcclxuICAgICdyZWQnOiAkcmVkLFxyXG4gICAgJ3JlZC1saWdodCc6ICRyZWQtbGlnaHQsXHJcbiAgICAnYmxhY2snOiAkYmxhY2ssXHJcbiAgICAnYmxhY2stbGlnaHQnOiAkZ3JheS03MDAsXHJcbiAgICAnZ3JheSc6ICRncmF5LTUwMCxcclxuICAgICdncmF5LWRhcmsnOiAkZ3JheS02MDAsXHJcbiAgICAnZ3JheS1saWdodCc6ICRncmF5LTQwMCxcclxuICApLFxyXG4gICRjb2xvcnNcclxuKTtcclxuXHJcbiRwcmltYXJ5OiAkb3JhbmdlO1xyXG4kc2Vjb25kYXJ5OiAkYmx1ZTtcclxuJHN1Y2Nlc3M6ICRncmVlbjtcclxuJGluZm86ICRibHVlLWxpZ2h0O1xyXG4kd2FybmluZzogJHllbGxvdztcclxuJGRhbmdlcjogJHJlZDtcclxuJGxpZ2h0OiAkZ3JheS01MDA7XHJcbiRkYXJrOiAkYmxhY2s7XHJcblxyXG4kdGhlbWUtY29sb3JzOiAoKTtcclxuJHRoZW1lLWNvbG9yczogbWFwLW1lcmdlKFxyXG4gIChcclxuICAgICdwcmltYXJ5JzogJHByaW1hcnksXHJcbiAgICAnc2Vjb25kYXJ5JzogJHNlY29uZGFyeSxcclxuICAgICdzdWNjZXNzJzogJHN1Y2Nlc3MsXHJcbiAgICAnaW5mbyc6ICRpbmZvLFxyXG4gICAgJ3dhcm5pbmcnOiAkd2FybmluZyxcclxuICAgICdkYW5nZXInOiAkZGFuZ2VyLFxyXG4gICAgJ2xpZ2h0JzogJGxpZ2h0LFxyXG4gICAgJ2RhcmsnOiAkZGFyayxcclxuICAgICd3aGl0ZSc6ICR3aGl0ZSxcclxuICApLFxyXG4gICR0aGVtZS1jb2xvcnNcclxuKTtcclxuXHJcbi8vICR0ZXh0LWNvbG9yczogKCk7XHJcbi8vICR0ZXh0LWNvbG9yczogbWFwLW1lcmdlKFxyXG4vLyAgIChcclxuLy8gICAgICdkZWZhdWx0JzogJGJsYWNrLFxyXG4vLyAgICAgJ2xvdy1jb250cmFzdCc6ICRncmF5LTYwMCxcclxuLy8gICAgICdpbmZvJzogJGdyYXktNTAwLFxyXG4vLyAgICAgJ2Vycm9yJzogJHJlZCxcclxuLy8gICAgICdsaW5rJzogJGJsdWUsXHJcbi8vICAgICAnYmFsYW5jZSc6ICRncmVlbixcclxuLy8gICAgICdiYWxhbmNlLWNvaW5zJzogJGdyZWVuLWxpZ2h0LFxyXG4vLyAgICksXHJcbi8vICAgJHRleHQtY29sb3JzXHJcbi8vICk7XHJcblxyXG4vLyBTcGFjaW5nXHJcbi8vXHJcbi8vIENvbnRyb2wgdGhlIGRlZmF1bHQgc3R5bGluZyBvZiBtb3N0IEJvb3RzdHJhcCBlbGVtZW50cyBieSBtb2RpZnlpbmcgdGhlc2VcclxuLy8gdmFyaWFibGVzLiBNb3N0bHkgZm9jdXNlZCBvbiBzcGFjaW5nLlxyXG4vLyBZb3UgY2FuIGFkZCBtb3JlIGVudHJpZXMgdG8gdGhlICRzcGFjZXJzIG1hcCwgc2hvdWxkIHlvdSBuZWVkIG1vcmUgdmFyaWF0aW9uLlxyXG5cclxuJHNwYWNlcjogMXJlbTtcclxuJHNwYWNlcnM6ICgpO1xyXG4kc3BhY2VyczogbWFwLW1lcmdlKFxyXG4gIChcclxuICAgIDA6IDAsXHJcbiAgICAvLyAwcHhcclxuICAgIDE6ICRzcGFjZXIgKiAwLjI1LFxyXG4gICAgLy8gNHB4IHh4cyxcclxuICAgIDI6ICRzcGFjZXIgKiAwLjUsXHJcbiAgICAvLyA4cHggeHMsXHJcbiAgICAzOiAkc3BhY2VyLFxyXG4gICAgLy8gMTZweCBzbVxyXG4gICAgNDogJHNwYWNlciAqIDEuNSxcclxuICAgIC8vIDI0cHggbWQsXHJcbiAgICA1OiAkc3BhY2VyICogMixcclxuICAgIC8vIDMycHggbGcsXHJcbiAgICA2OiAkc3BhY2VyICogMi41LFxyXG4gICAgLy8gNDBweCB4bCxcclxuICAgIDc6ICRzcGFjZXIgKiAzLjUsXHJcbiAgICAvLyA1NnB4IHh4bFxyXG4gICAgODogJHNwYWNlciAqIDQsXHJcbiAgICAvLyA2NHB4IHh4bFxyXG4gICksXHJcbiAgJHNwYWNlcnNcclxuKTtcclxuXHJcbi8vIEJvZHlcclxuLy9cclxuLy8gU2V0dGluZ3MgZm9yIHRoZSBgPGJvZHk+YCBlbGVtZW50LlxyXG5cclxuJGJvZHktYmc6ICR3aGl0ZTtcclxuJGJvZHktY29sb3I6ICRkYXJrO1xyXG5cclxuLy8gTGlua3NcclxuLy9cclxuLy8gU3R5bGUgYW5jaG9yIGVsZW1lbnRzLlxyXG5cclxuJGxpbmstY29sb3I6IHRoZW1lLWNvbG9yKCdwcmltYXJ5Jyk7XHJcbiRsaW5rLWRlY29yYXRpb246IG5vbmU7XHJcbiRsaW5rLWhvdmVyLWNvbG9yOiAkb3JhbmdlLWRhcms7XHJcbiRsaW5rLWhvdmVyLWRlY29yYXRpb246IG5vbmU7XHJcblxyXG4vLyBQYXJhZ3JhcGhzXHJcbi8vXHJcbi8vIFN0eWxlIHAgZWxlbWVudC5cclxuXHJcbiRwYXJhZ3JhcGgtbWFyZ2luLWJvdHRvbTogMXJlbTtcclxuXHJcbi8vIEdyaWQgYnJlYWtwb2ludHNcclxuLy9cclxuLy8gRGVmaW5lIHRoZSBtaW5pbXVtIGRpbWVuc2lvbnMgYXQgd2hpY2ggeW91ciBsYXlvdXQgd2lsbCBjaGFuZ2UsXHJcbi8vIGFkYXB0aW5nIHRvIGRpZmZlcmVudCBzY3JlZW4gc2l6ZXMsIGZvciB1c2UgaW4gbWVkaWEgcXVlcmllcy5cclxuXHJcbiRncmlkLWJyZWFrcG9pbnRzOiAoXHJcbiAgeHM6IDAsXHJcbiAgc206IDY3MHB4LFxyXG4gIG1kOiA5NjBweCxcclxuICBsZzogMTI4MHB4LFxyXG4gIHhsOiAxOTIwcHgsXHJcbik7XHJcblxyXG4vLyBHcmlkIGNvbnRhaW5lcnNcclxuLy9cclxuLy8gRGVmaW5lIHRoZSBtYXhpbXVtIHdpZHRoIG9mIGAuY29udGFpbmVyYCBmb3IgZGlmZmVyZW50IHNjcmVlbiBzaXplcy5cclxuXHJcbiRjb250YWluZXItbWF4LXdpZHRoczogKFxyXG4gIHNtOiA1NDBweCxcclxuICBtZDogNzIwcHgsXHJcbiAgbGc6IDk2MHB4LFxyXG4gIHhsOiAxMjgwcHgsXHJcbik7XHJcblxyXG4vLyBHcmlkIGNvbHVtbnNcclxuLy9cclxuLy8gU2V0IHRoZSBudW1iZXIgb2YgY29sdW1ucyBhbmQgc3BlY2lmeSB0aGUgd2lkdGggb2YgdGhlIGd1dHRlcnMuXHJcblxyXG4kZ3JpZC1jb2x1bW5zOiAxMjtcclxuJGdyaWQtZ3V0dGVyLXdpZHRoOiAzMHB4O1xyXG4kZ3JpZC1yb3ctY29sdW1uczogNjtcclxuXHJcbi8vIENvbXBvbmVudHNcclxuLy9cclxuLy8gRGVmaW5lIGNvbW1vbiBwYWRkaW5nIGFuZCBib3JkZXIgcmFkaXVzIHNpemVzIGFuZCBtb3JlLlxyXG5cclxuJGxpbmUtaGVpZ2h0LWxnOiAxLjU7XHJcbiRsaW5lLWhlaWdodC1zbTogMS41O1xyXG5cclxuJGJvcmRlci13aWR0aDogMXB4O1xyXG4kYm9yZGVyLWNvbG9yOiAkZ3JheS0zMDA7XHJcblxyXG4kYm9yZGVyLXJhZGl1czogMC41cmVtO1xyXG4kYm9yZGVyLXJhZGl1cy1tZDogcmVteSgxMik7XHJcbiRib3JkZXItcmFkaXVzLWxnOiAyLjVyZW07XHJcbiRib3JkZXItcmFkaXVzLXNtOiAwLjJyZW07XHJcblxyXG4vLyBMMFxyXG4kYm94LXNoYWRvdy14czogMHB4IDBweCAwcHggcmdiYSgwLCAwLCAwLCAwLjA1KTtcclxuLy8gTDFcclxuJGJveC1zaGFkb3ctc206IDBweCAwcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4wNCksIDBweCAwcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4wNiksXHJcbiAgMHB4IDRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjA0KTtcclxuLy8gTDJcclxuJGJveC1zaGFkb3c6IDBweCAwcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4wNCksIDBweCAycHggNnB4IHJnYmEoMCwgMCwgMCwgMC4wNCksXHJcbiAgMHB4IDEwcHggMjBweCByZ2JhKDAsIDAsIDAsIDAuMDQpO1xyXG4vLyBMM1xyXG4kYm94LXNoYWRvdy1sZzogMHB4IDE0cHggMTZweCByZ2JhKDAsIDAsIDAsIDAuMDUpO1xyXG4vLyBMNFxyXG4kYm94LXNoYWRvdy14bDogMHB4IDBweCAxcHggcmdiYSgwLCAwLCAwLCAwLjA0KSwgMHB4IDRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjA0KSxcclxuICAwcHggMTZweCAyNHB4IHJnYmEoMCwgMCwgMCwgMC4wNCksIDBweCAyNHB4IDMycHggcmdiYSgwLCAwLCAwLCAwLjA0KTtcclxuXHJcbiRjb21wb25lbnQtYWN0aXZlLWNvbG9yOiAkd2hpdGU7XHJcbiRjb21wb25lbnQtYWN0aXZlLWJnOiB0aGVtZS1jb2xvcigncHJpbWFyeScpO1xyXG5cclxuJHRyYW5zaXRpb24tYmFzZTogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XHJcbiR0cmFuc2l0aW9uLWZhZGU6IG9wYWNpdHkgMC4xNXMgbGluZWFyO1xyXG4kdHJhbnNpdGlvbi1jb2xsYXBzZTogaGVpZ2h0IDAuMzVzIGVhc2U7XHJcbiR0cmFuc2l0aW9uLW1heC1oZWlnaHQ6IGFsbCAwLjZzIGVhc2U7XHJcblxyXG4vLyBUeXBvZ3JhcGh5XHJcbi8vXHJcbi8vIEZvbnQsIGxpbmUtaGVpZ2h0LCBhbmQgY29sb3IgZm9yIGJvZHkgdGV4dCwgaGVhZGluZ3MsIGFuZCBtb3JlLlxyXG5cclxuJGZvbnQtZmFtaWx5LXNhbnMtc2VyaWY6ICdSb2JvdG8nLCBzYW5zLXNlcmlmO1xyXG4kZm9udC1mYW1pbHktbW9ub3NwYWNlOiBTRk1vbm8tUmVndWxhciwgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsXHJcbiAgJ0xpYmVyYXRpb24gTW9ubycsICdDb3VyaWVyIE5ldycsIG1vbm9zcGFjZSAhZGVmYXVsdDtcclxuJGZvbnQtZmFtaWx5LWJhc2U6ICRmb250LWZhbWlseS1zYW5zLXNlcmlmO1xyXG5cclxuJGZvbnQtc2l6ZS1iYXNlOiAxcmVtOyAvLyAxNnB4XHJcbiRmb250LXNpemUtbGc6ICRmb250LXNpemUtYmFzZSAqIDEuMjUgIWRlZmF1bHQ7IC8vIDIwcHhcclxuJGZvbnQtc2l6ZS1zbTogJGZvbnQtc2l6ZS1iYXNlICogMC44NzUgIWRlZmF1bHQ7IC8vIDE0cHhcclxuJGZvbnQtc2l6ZS14czogcmVteSgxMik7XHJcblxyXG4kZm9udC13ZWlnaHQtbGlnaHRlcjogbGlnaHRlcjtcclxuJGZvbnQtd2VpZ2h0LWxpZ2h0OiAzMDA7XHJcbiRmb250LXdlaWdodC1ub3JtYWw6IDQwMDtcclxuJGZvbnQtd2VpZ2h0LWJvbGQ6IDUwMDtcclxuJGZvbnQtd2VpZ2h0LWJvbGRlcjogYm9sZGVyO1xyXG5cclxuJGZvbnQtd2VpZ2h0LWJhc2U6ICRmb250LXdlaWdodC1ub3JtYWw7XHJcbiRsaW5lLWhlaWdodC1iYXNlOiAxLjU7XHJcblxyXG4kaDEtZm9udC1zaXplOiByZW15KDMwKTtcclxuJGgyLWZvbnQtc2l6ZTogcmVteSgyNik7XHJcbiRoMy1mb250LXNpemU6IHJlbXkoMjQpO1xyXG4kaDQtZm9udC1zaXplOiByZW15KDIyKTtcclxuJGg1LWZvbnQtc2l6ZTogcmVteSgyMCk7XHJcbiRoNi1mb250LXNpemU6IHJlbXkoMTgpO1xyXG5cclxuJGgxLWZvbnQtc2l6ZXM6IChcclxuICB4czogMzBweCxcclxuICBzbTogMzZweCxcclxuICBtZDogNDhweCxcclxuICBsZzogNDhweCxcclxuICB4bDogNjBweCxcclxuKTtcclxuXHJcbi8vIGgyIHNpemVzXHJcbiRoMi1mb250LXNpemVzOiAoXHJcbiAgeHM6IDI2cHgsXHJcbiAgc206IDMwcHgsXHJcbiAgbWQ6IDQwcHgsXHJcbiAgbGc6IDQ0cHgsXHJcbiAgeGw6IDU0cHgsXHJcbik7XHJcblxyXG4vLyBoMyBzaXplc1xyXG4kaDMtZm9udC1zaXplczogKFxyXG4gIHhzOiAyNHB4LFxyXG4gIHNtOiAyNnB4LFxyXG4gIG1kOiAzMnB4LFxyXG4gIGxnOiAzNnB4LFxyXG4gIHhsOiA0NHB4LFxyXG4pO1xyXG5cclxuLy8gaDQgc2l6ZXNcclxuJGg0LWZvbnQtc2l6ZXM6IChcclxuICB4czogMjJweCxcclxuICBzbTogMjRweCxcclxuICBtZDogMjRweCxcclxuICBsZzogMjhweCxcclxuICB4bDogMjhweCxcclxuKTtcclxuXHJcbi8vIGg1IHNpemVzXHJcbiRoNS1mb250LXNpemVzOiAoXHJcbiAgeHM6IDIwcHgsXHJcbiAgc206IDIycHgsXHJcbiAgbWQ6IDIycHgsXHJcbiAgbGc6IDI0cHgsXHJcbiAgeGw6IDI0cHgsXHJcbik7XHJcblxyXG4vLyBoNiBzaXplc1xyXG4kaDYtZm9udC1zaXplczogKFxyXG4gIHhzOiAxOHB4LFxyXG4gIHNtOiAxOHB4LFxyXG4gIG1kOiAxOHB4LFxyXG4gIGxnOiAyMHB4LFxyXG4gIHhsOiAyMHB4LFxyXG4pO1xyXG5cclxuJGhlYWRpbmdzLW1hcmdpbi1ib3R0b206ICRzcGFjZXIgLyAyICFkZWZhdWx0O1xyXG4kaGVhZGluZ3MtZm9udC1mYW1pbHk6IG51bGw7XHJcbiRoZWFkaW5ncy1mb250LXdlaWdodDogNTAwO1xyXG4kaGVhZGluZ3MtZm9udC13ZWlnaHQtbGlnaHQ6IDQwMDtcclxuJGhlYWRpbmdzLWxpbmUtaGVpZ2h0OiAxLjU7XHJcbiRoZWFkaW5ncy1jb2xvcjogbnVsbDtcclxuXHJcbiRwMC1mb250LXNpemVzOiAoXHJcbiAgeHM6IDE2cHgsXHJcbiAgc206IDE2cHgsXHJcbiAgbWQ6IDE2cHgsXHJcbiAgbGc6IDE2cHgsXHJcbiAgeGw6IDE2cHgsXHJcbik7XHJcblxyXG4kcDEtZm9udC1zaXplczogKFxyXG4gIHhzOiAxNnB4LFxyXG4gIHNtOiAxNnB4LFxyXG4gIG1kOiAxOHB4LFxyXG4gIGxnOiAxOHB4LFxyXG4gIHhsOiAxOHB4LFxyXG4pO1xyXG5cclxuJHAyLWZvbnQtc2l6ZXM6IChcclxuICB4czogMTRweCxcclxuICBzbTogMTRweCxcclxuICBtZDogMTZweCxcclxuICBsZzogMTZweCxcclxuICB4bDogMTZweCxcclxuKTtcclxuXHJcbiRwMy1mb250LXNpemVzOiAoXHJcbiAgeHM6IDEycHgsXHJcbiAgc206IDEycHgsXHJcbiAgbWQ6IDE0cHgsXHJcbiAgbGc6IDE0cHgsXHJcbiAgeGw6IDE0cHgsXHJcbik7XHJcblxyXG4kcDQtZm9udC1zaXplczogKFxyXG4gIHhzOiAxMHB4LFxyXG4gIHNtOiAxMHB4LFxyXG4gIG1kOiAxMnB4LFxyXG4gIGxnOiAxMnB4LFxyXG4gIHhsOiAxMnB4LFxyXG4pO1xyXG5cclxuJHNtYWxsLWZvbnQtc2l6ZTogJGZvbnQtc2l6ZS14cztcclxuXHJcbiR0ZXh0LW11dGVkOiAkZ3JheS02MDA7XHJcblxyXG4vLyAkYmxvY2txdW90ZS1zbWFsbC1jb2xvcjogICAgICAkZ3JheS02MDAgIWRlZmF1bHQ7XHJcbi8vICRibG9ja3F1b3RlLXNtYWxsLWZvbnQtc2l6ZTogICRzbWFsbC1mb250LXNpemUgIWRlZmF1bHQ7XHJcbi8vICRibG9ja3F1b3RlLWZvbnQtc2l6ZTogICAgICAgICRmb250LXNpemUtYmFzZSAqIDEuMjUgIWRlZmF1bHQ7XHJcblxyXG4vLyAkaHItYm9yZGVyLWNvbG9yOiAgICAgICAgICAgICByZ2JhKCRibGFjaywgLjEpICFkZWZhdWx0O1xyXG4vLyAkaHItYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICAkYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xyXG5cclxuLy8gJG1hcmstcGFkZGluZzogICAgICAgICAgICAgICAgLjJlbSAhZGVmYXVsdDtcclxuXHJcbi8vICRkdC1mb250LXdlaWdodDogICAgICAgICAgICAgICRmb250LXdlaWdodC1ib2xkICFkZWZhdWx0O1xyXG5cclxuLy8gJGtiZC1ib3gtc2hhZG93OiAgICAgICAgICAgICAgaW5zZXQgMCAtLjFyZW0gMCByZ2JhKCRibGFjaywgLjI1KSAhZGVmYXVsdDtcclxuLy8gJG5lc3RlZC1rYmQtZm9udC13ZWlnaHQ6ICAgICAgJGZvbnQtd2VpZ2h0LWJvbGQgIWRlZmF1bHQ7XHJcblxyXG4vLyAkbGlzdC1pbmxpbmUtcGFkZGluZzogICAgICAgICAuNXJlbSAhZGVmYXVsdDtcclxuXHJcbi8vICRtYXJrLWJnOiAgICAgICAgICAgICAgICAgICAgICNmY2Y4ZTMgIWRlZmF1bHQ7XHJcblxyXG4vLyAkaHItbWFyZ2luLXk6ICAgICAgICAgICAgICAgICAkc3BhY2VyICFkZWZhdWx0O1xyXG5cclxuLy8gLy8gVGFibGVzXHJcbi8vIC8vXHJcbi8vIC8vIEN1c3RvbWl6ZXMgdGhlIGAudGFibGVgIGNvbXBvbmVudCB3aXRoIGJhc2ljIHZhbHVlcywgZWFjaCB1c2VkIGFjcm9zcyBhbGwgdGFibGUgdmFyaWF0aW9ucy5cclxuXHJcbi8vICR0YWJsZS1jZWxsLXBhZGRpbmc6ICAgICAgICAgIC43NXJlbSAhZGVmYXVsdDtcclxuLy8gJHRhYmxlLWNlbGwtcGFkZGluZy1zbTogICAgICAgLjNyZW0gIWRlZmF1bHQ7XHJcblxyXG4vLyAkdGFibGUtY29sb3I6ICAgICAgICAgICAgICAgICAkYm9keS1jb2xvciAhZGVmYXVsdDtcclxuLy8gJHRhYmxlLWJnOiAgICAgICAgICAgICAgICAgICAgbnVsbCAhZGVmYXVsdDtcclxuLy8gJHRhYmxlLWFjY2VudC1iZzogICAgICAgICAgICAgcmdiYSgkYmxhY2ssIC4wNSkgIWRlZmF1bHQ7XHJcbi8vICR0YWJsZS1ob3Zlci1jb2xvcjogICAgICAgICAgICR0YWJsZS1jb2xvciAhZGVmYXVsdDtcclxuLy8gJHRhYmxlLWhvdmVyLWJnOiAgICAgICAgICAgICAgcmdiYSgkYmxhY2ssIC4wNzUpICFkZWZhdWx0O1xyXG4vLyAkdGFibGUtYWN0aXZlLWJnOiAgICAgICAgICAgICAkdGFibGUtaG92ZXItYmcgIWRlZmF1bHQ7XHJcblxyXG4vLyAkdGFibGUtYm9yZGVyLXdpZHRoOiAgICAgICAgICAkYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xyXG4vLyAkdGFibGUtYm9yZGVyLWNvbG9yOiAgICAgICAgICAkYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xyXG5cclxuLy8gJHRhYmxlLWhlYWQtYmc6ICAgICAgICAgICAgICAgJGdyYXktMjAwICFkZWZhdWx0O1xyXG4vLyAkdGFibGUtaGVhZC1jb2xvcjogICAgICAgICAgICAkZ3JheS03MDAgIWRlZmF1bHQ7XHJcblxyXG4vLyAkdGFibGUtZGFyay1jb2xvcjogICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XHJcbi8vICR0YWJsZS1kYXJrLWJnOiAgICAgICAgICAgICAgICRncmF5LTgwMCAhZGVmYXVsdDtcclxuLy8gJHRhYmxlLWRhcmstYWNjZW50LWJnOiAgICAgICAgcmdiYSgkd2hpdGUsIC4wNSkgIWRlZmF1bHQ7XHJcbi8vICR0YWJsZS1kYXJrLWhvdmVyLWNvbG9yOiAgICAgICR0YWJsZS1kYXJrLWNvbG9yICFkZWZhdWx0O1xyXG4vLyAkdGFibGUtZGFyay1ob3Zlci1iZzogICAgICAgICByZ2JhKCR3aGl0ZSwgLjA3NSkgIWRlZmF1bHQ7XHJcbi8vICR0YWJsZS1kYXJrLWJvcmRlci1jb2xvcjogICAgIGxpZ2h0ZW4oJHRhYmxlLWRhcmstYmcsIDcuNSUpICFkZWZhdWx0O1xyXG5cclxuLy8gJHRhYmxlLXN0cmlwZWQtb3JkZXI6ICAgICAgICAgb2RkICFkZWZhdWx0O1xyXG5cclxuLy8gJHRhYmxlLWNhcHRpb24tY29sb3I6ICAgICAgICAgJHRleHQtbXV0ZWQgIWRlZmF1bHQ7XHJcblxyXG4vLyAkdGFibGUtYmctbGV2ZWw6ICAgICAgICAgICAgICAtOSAhZGVmYXVsdDtcclxuLy8gJHRhYmxlLWJvcmRlci1sZXZlbDogICAgICAgICAgLTYgIWRlZmF1bHQ7XHJcblxyXG4vLyAvLyBCdXR0b25zICsgRm9ybXNcclxuLy8gLy9cclxuLy8gLy8gU2hhcmVkIHZhcmlhYmxlcyB0aGF0IGFyZSByZWFzc2lnbmVkIHRvIGAkaW5wdXQtYCBhbmQgYCRidG4tYCBzcGVjaWZpYyB2YXJpYWJsZXMuXHJcblxyXG4kaW5wdXQtYnRuLXBhZGRpbmcteTogMXJlbTtcclxuJGlucHV0LWJ0bi1wYWRkaW5nLXg6IDEuNzVyZW07XHJcbiRpbnB1dC1idG4tZm9udC1mYW1pbHk6IG51bGw7XHJcbiRpbnB1dC1idG4tZm9udC1zaXplOiAkZm9udC1zaXplLWJhc2U7XHJcbiRpbnB1dC1idG4tbGluZS1oZWlnaHQ6IDEuNTtcclxuXHJcbiRpbnB1dC1idG4tZm9jdXMtd2lkdGg6IHJlbXkoMSk7XHJcbiRpbnB1dC1idG4tZm9jdXMtY29sb3I6ICRwcmltYXJ5O1xyXG4kaW5wdXQtYnRuLWZvY3VzLWJveC1zaGFkb3c6IG5vbmU7XHJcblxyXG4kaW5wdXQtYnRuLXBhZGRpbmcteS1zbTogMC4yNXJlbTtcclxuJGlucHV0LWJ0bi1wYWRkaW5nLXgtc206IDEuMnJlbTtcclxuJGlucHV0LWJ0bi1mb250LXNpemUtc206ICRmb250LXNpemUtYmFzZTtcclxuJGlucHV0LWJ0bi1saW5lLWhlaWdodC1zbTogJGxpbmUtaGVpZ2h0LXNtO1xyXG5cclxuJGlucHV0LWJ0bi1wYWRkaW5nLXktbGc6ICRpbnB1dC1idG4tcGFkZGluZy15O1xyXG4kaW5wdXQtYnRuLXBhZGRpbmcteC1sZzogMi41cmVtO1xyXG4kaW5wdXQtYnRuLWZvbnQtc2l6ZS1sZzogJGZvbnQtc2l6ZS1iYXNlO1xyXG4kaW5wdXQtYnRuLWxpbmUtaGVpZ2h0LWxnOiAkaW5wdXQtYnRuLWxpbmUtaGVpZ2h0O1xyXG5cclxuJGlucHV0LWJ0bi1ib3JkZXItd2lkdGg6ICRib3JkZXItd2lkdGg7XHJcblxyXG4vLyBCdXR0b25zXHJcbi8vXHJcbi8vIEZvciBlYWNoIG9mIEJvb3RzdHJhcCdzIGJ1dHRvbnMsIGRlZmluZSB0ZXh0LCBiYWNrZ3JvdW5kLCBhbmQgYm9yZGVyIGNvbG9yLlxyXG5cclxuJGJ0bi1wYWRkaW5nLXk6ICRpbnB1dC1idG4tcGFkZGluZy15O1xyXG4kYnRuLXBhZGRpbmcteDogJGlucHV0LWJ0bi1wYWRkaW5nLXg7XHJcbiRidG4tZm9udC1mYW1pbHk6ICRpbnB1dC1idG4tZm9udC1mYW1pbHk7XHJcbiRidG4tZm9udC1zaXplOiAkaW5wdXQtYnRuLWZvbnQtc2l6ZTtcclxuJGJ0bi1saW5lLWhlaWdodDogJGlucHV0LWJ0bi1saW5lLWhlaWdodDtcclxuJGJ0bi13aGl0ZS1zcGFjZTogbnVsbDsgLy8gU2V0IHRvIGBub3dyYXBgIHRvIHByZXZlbnQgdGV4dCB3cmFwcGluZ1xyXG5cclxuJGJ0bi1wYWRkaW5nLXktc206ICRpbnB1dC1idG4tcGFkZGluZy15LXNtO1xyXG4kYnRuLXBhZGRpbmcteC1zbTogJGlucHV0LWJ0bi1wYWRkaW5nLXgtc207XHJcbiRidG4tZm9udC1zaXplLXNtOiAkaW5wdXQtYnRuLWZvbnQtc2l6ZS1zbTtcclxuJGJ0bi1saW5lLWhlaWdodC1zbTogJGlucHV0LWJ0bi1saW5lLWhlaWdodC1zbTtcclxuXHJcbiRidG4tcGFkZGluZy15LWxnOiAkaW5wdXQtYnRuLXBhZGRpbmcteS1sZztcclxuJGJ0bi1wYWRkaW5nLXgtbGc6ICRpbnB1dC1idG4tcGFkZGluZy14LWxnO1xyXG4kYnRuLWZvbnQtc2l6ZS1sZzogJGlucHV0LWJ0bi1mb250LXNpemUtbGc7XHJcbiRidG4tbGluZS1oZWlnaHQtbGc6ICRpbnB1dC1idG4tbGluZS1oZWlnaHQtbGc7XHJcblxyXG4kYnRuLWJvcmRlci13aWR0aDogJGlucHV0LWJ0bi1ib3JkZXItd2lkdGg7XHJcblxyXG4kYnRuLWZvbnQtd2VpZ2h0OiAkZm9udC13ZWlnaHQtbm9ybWFsO1xyXG4kYnRuLWJveC1zaGFkb3c6IG5vbmU7XHJcbiRidG4tZm9jdXMtd2lkdGg6ICRpbnB1dC1idG4tZm9jdXMtd2lkdGg7XHJcbiRidG4tZm9jdXMtYm94LXNoYWRvdzogJGlucHV0LWJ0bi1mb2N1cy1ib3gtc2hhZG93O1xyXG4kYnRuLWRpc2FibGVkLW9wYWNpdHk6IDAuNTtcclxuJGJ0bi1hY3RpdmUtYm94LXNoYWRvdzogbm9uZTtcclxuXHJcbi8vICRidG4tbGluay1kaXNhYmxlZC1jb2xvcjogICAgICRncmF5LTYwMCAhZGVmYXVsdDtcclxuXHJcbi8vICRidG4tYmxvY2stc3BhY2luZy15OiAgICAgICAgIC41cmVtICFkZWZhdWx0O1xyXG5cclxuLy8gLy8gQWxsb3dzIGZvciBjdXN0b21pemluZyBidXR0b24gcmFkaXVzIGluZGVwZW5kZW50bHkgZnJvbSBnbG9iYWwgYm9yZGVyIHJhZGl1c1xyXG4kYnRuLWJvcmRlci1yYWRpdXM6IDEycHg7XHJcbiRidG4tYm9yZGVyLXJhZGl1cy1sZzogMTJweDtcclxuJGJ0bi1ib3JkZXItcmFkaXVzLXNtOiA4cHg7XHJcblxyXG4kYnRuLXRyYW5zaXRpb246ICR0cmFuc2l0aW9uLWJhc2U7XHJcblxyXG4vLyAvLyBGb3Jtc1xyXG5cclxuLy8gJGxhYmVsLW1hcmdpbi1ib3R0b206ICAgICAgICAgICAgICAgICAgIC41cmVtICFkZWZhdWx0O1xyXG5cclxuJGlucHV0LXBhZGRpbmcteTogJGlucHV0LWJ0bi1wYWRkaW5nLXk7XHJcbiRpbnB1dC1wYWRkaW5nLXg6IHJlbXkoMjApO1xyXG4kaW5wdXQtZm9udC1mYW1pbHk6ICRpbnB1dC1idG4tZm9udC1mYW1pbHk7XHJcbiRpbnB1dC1mb250LXNpemU6ICRpbnB1dC1idG4tZm9udC1zaXplO1xyXG4kaW5wdXQtZm9udC13ZWlnaHQ6ICRmb250LXdlaWdodC1iYXNlO1xyXG4kaW5wdXQtbGluZS1oZWlnaHQ6ICRpbnB1dC1idG4tbGluZS1oZWlnaHQ7XHJcblxyXG4vLyAkaW5wdXQtcGFkZGluZy15LXNtOiAgICAgICAgICAgICAgICAgICAgJGlucHV0LWJ0bi1wYWRkaW5nLXktc20gIWRlZmF1bHQ7XHJcbi8vICRpbnB1dC1wYWRkaW5nLXgtc206ICAgICAgICAgICAgICAgICAgICAkaW5wdXQtYnRuLXBhZGRpbmcteC1zbSAhZGVmYXVsdDtcclxuLy8gJGlucHV0LWZvbnQtc2l6ZS1zbTogICAgICAgICAgICAgICAgICAgICRpbnB1dC1idG4tZm9udC1zaXplLXNtICFkZWZhdWx0O1xyXG4vLyAkaW5wdXQtbGluZS1oZWlnaHQtc206ICAgICAgICAgICAgICAgICAgJGlucHV0LWJ0bi1saW5lLWhlaWdodC1zbSAhZGVmYXVsdDtcclxuXHJcbi8vICRpbnB1dC1wYWRkaW5nLXktbGc6ICAgICAgICAgICAgICAgICAgICAkaW5wdXQtYnRuLXBhZGRpbmcteS1sZyAhZGVmYXVsdDtcclxuLy8gJGlucHV0LXBhZGRpbmcteC1sZzogICAgICAgICAgICAgICAgICAgICRpbnB1dC1idG4tcGFkZGluZy14LWxnICFkZWZhdWx0O1xyXG4kaW5wdXQtZm9udC1zaXplLWxnOiAkaW5wdXQtYnRuLWZvbnQtc2l6ZS1sZyAhZGVmYXVsdDtcclxuLy8gJGlucHV0LWxpbmUtaGVpZ2h0LWxnOiAgICAgICAgICAgICAgICAgICRpbnB1dC1idG4tbGluZS1oZWlnaHQtbGcgIWRlZmF1bHQ7XHJcblxyXG4kaW5wdXQtYmc6ICR3aGl0ZTtcclxuJGlucHV0LWRpc2FibGVkLWJnOiAkZ3JheS0yMDA7XHJcblxyXG4kaW5wdXQtY29sb3I6ICRkYXJrO1xyXG4kaW5wdXQtYm9yZGVyLWNvbG9yOiAkZ3JheS00MDA7XHJcbiRpbnB1dC1ib3JkZXItd2lkdGg6ICRpbnB1dC1idG4tYm9yZGVyLXdpZHRoO1xyXG4kaW5wdXQtYm94LXNoYWRvdzogbm9uZTtcclxuXHJcbiRpbnB1dC1ib3JkZXItcmFkaXVzOiA4cHg7XHJcbiRpbnB1dC1ib3JkZXItcmFkaXVzLWxnOiAkaW5wdXQtYm9yZGVyLXJhZGl1cztcclxuJGlucHV0LWJvcmRlci1yYWRpdXMtc206ICRpbnB1dC1ib3JkZXItcmFkaXVzO1xyXG5cclxuJGlucHV0LWZvY3VzLWJnOiAkd2hpdGU7XHJcbiRpbnB1dC1mb2N1cy1ib3JkZXItY29sb3I6ICRwcmltYXJ5O1xyXG4kaW5wdXQtZm9jdXMtY29sb3I6ICRpbnB1dC1jb2xvcjtcclxuJGlucHV0LWZvY3VzLXdpZHRoOiAkaW5wdXQtYnRuLWZvY3VzLXdpZHRoO1xyXG4kaW5wdXQtZm9jdXMtYm94LXNoYWRvdzogJGlucHV0LWJ0bi1mb2N1cy1ib3gtc2hhZG93O1xyXG5cclxuJGlucHV0LXBsYWNlaG9sZGVyLWNvbG9yOiAkZ3JheS02MDA7XHJcbiRpbnB1dC1wbGFpbnRleHQtY29sb3I6ICRib2R5LWNvbG9yO1xyXG5cclxuLy8gJGlucHV0LWhlaWdodC1ib3JkZXI6ICAgICAgICAgICAgICAgICAgICRpbnB1dC1ib3JkZXItd2lkdGggKiAyICFkZWZhdWx0O1xyXG5cclxuLy8gJGlucHV0LWhlaWdodC1pbm5lcjogICAgICAgICAgICAgICAgICAgIGFkZCgkaW5wdXQtbGluZS1oZWlnaHQgKiAxZW0sICRpbnB1dC1wYWRkaW5nLXkgKiAyKSAhZGVmYXVsdDtcclxuLy8gJGlucHV0LWhlaWdodC1pbm5lci1oYWxmOiAgICAgICAgICAgICAgIGFkZCgkaW5wdXQtbGluZS1oZWlnaHQgKiAuNWVtLCAkaW5wdXQtcGFkZGluZy15KSAhZGVmYXVsdDtcclxuLy8gJGlucHV0LWhlaWdodC1pbm5lci1xdWFydGVyOiAgICAgICAgICAgIGFkZCgkaW5wdXQtbGluZS1oZWlnaHQgKiAuMjVlbSwgJGlucHV0LXBhZGRpbmcteSAvIDIpICFkZWZhdWx0O1xyXG5cclxuJGlucHV0LWhlaWdodDogNTZweDtcclxuLy8gJGlucHV0LWhlaWdodC1zbTogICAgICAgICAgICAgICAgICAgICAgIGFkZCgkaW5wdXQtbGluZS1oZWlnaHQtc20gKiAxZW0sIGFkZCgkaW5wdXQtcGFkZGluZy15LXNtICogMiwgJGlucHV0LWhlaWdodC1ib3JkZXIsIGZhbHNlKSkgIWRlZmF1bHQ7XHJcbi8vICRpbnB1dC1oZWlnaHQtbGc6ICAgICAgICAgICAgICAgICAgICAgICBhZGQoJGlucHV0LWxpbmUtaGVpZ2h0LWxnICogMWVtLCBhZGQoJGlucHV0LXBhZGRpbmcteS1sZyAqIDIsICRpbnB1dC1oZWlnaHQtYm9yZGVyLCBmYWxzZSkpICFkZWZhdWx0O1xyXG5cclxuJGlucHV0LXRyYW5zaXRpb246ICR0cmFuc2l0aW9uLWJhc2U7XHJcblxyXG4vLyAkZm9ybS10ZXh0LW1hcmdpbi10b3A6ICAgICAgICAgICAgICAgICAgLjI1cmVtICFkZWZhdWx0O1xyXG5cclxuLy8gJGZvcm0tY2hlY2staW5wdXQtZ3V0dGVyOiAgICAgICAgICAgICAgIDEuMjVyZW0gIWRlZmF1bHQ7XHJcbi8vICRmb3JtLWNoZWNrLWlucHV0LW1hcmdpbi15OiAgICAgICAgICAgICAuM3JlbSAhZGVmYXVsdDtcclxuLy8gJGZvcm0tY2hlY2staW5wdXQtbWFyZ2luLXg6ICAgICAgICAgICAgIC4yNXJlbSAhZGVmYXVsdDtcclxuXHJcbi8vICRmb3JtLWNoZWNrLWlubGluZS1tYXJnaW4teDogICAgICAgICAgICAuNzVyZW0gIWRlZmF1bHQ7XHJcbi8vICRmb3JtLWNoZWNrLWlubGluZS1pbnB1dC1tYXJnaW4teDogICAgICAuMzEyNXJlbSAhZGVmYXVsdDtcclxuXHJcbi8vICRmb3JtLWdyaWQtZ3V0dGVyLXdpZHRoOiAgICAgICAgICAgICAgICAxMHB4ICFkZWZhdWx0O1xyXG4vLyAkZm9ybS1ncm91cC1tYXJnaW4tYm90dG9tOiAgICAgICAgICAgICAgMXJlbSAhZGVmYXVsdDtcclxuXHJcbi8vICRpbnB1dC1ncm91cC1hZGRvbi1jb2xvcjogICAgICAgICAgICAgICAkaW5wdXQtY29sb3IgIWRlZmF1bHQ7XHJcbi8vICRpbnB1dC1ncm91cC1hZGRvbi1iZzogICAgICAgICAgICAgICAgICAkZ3JheS0yMDAgIWRlZmF1bHQ7XHJcbi8vICRpbnB1dC1ncm91cC1hZGRvbi1ib3JkZXItY29sb3I6ICAgICAgICAkaW5wdXQtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xyXG5cclxuLy8gJGN1c3RvbS1mb3Jtcy10cmFuc2l0aW9uOiAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3IgLjE1cyBlYXNlLWluLW91dCwgYm9yZGVyLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgLjE1cyBlYXNlLWluLW91dCAhZGVmYXVsdDtcclxuXHJcbi8vICRjdXN0b20tY29udHJvbC1ndXR0ZXI6ICAgICAgICAgICAgICAgICAuNXJlbSAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1jb250cm9sLXNwYWNlci14OiAgICAgICAgICAgICAgIDFyZW0gIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tY29udHJvbC1jdXJzb3I6ICAgICAgICAgICAgICAgICBudWxsICFkZWZhdWx0O1xyXG5cclxuLy8gJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1zaXplOiAgICAgICAgIDFyZW0gIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItYmc6ICAgICAgICAgICAkaW5wdXQtYmcgIWRlZmF1bHQ7XHJcblxyXG4vLyAkY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWJnLXNpemU6ICAgICAgNTAlIDUwJSAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1ib3gtc2hhZG93OiAgICRpbnB1dC1ib3gtc2hhZG93ICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWJvcmRlci1jb2xvcjogJGdyYXktNTAwICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWJvcmRlci13aWR0aDogJGlucHV0LWJvcmRlci13aWR0aCAhZGVmYXVsdDtcclxuXHJcbi8vICRjdXN0b20tY29udHJvbC1sYWJlbC1jb2xvcjogICAgICAgICAgICBudWxsICFkZWZhdWx0O1xyXG5cclxuLy8gJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1kaXNhYmxlZC1iZzogICAgICAgICAgJGlucHV0LWRpc2FibGVkLWJnICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLWNvbnRyb2wtbGFiZWwtZGlzYWJsZWQtY29sb3I6ICAgICAgICAgICAkZ3JheS02MDAgIWRlZmF1bHQ7XHJcblxyXG4vLyAkY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWNoZWNrZWQtY29sb3I6ICAgICAgICAkY29tcG9uZW50LWFjdGl2ZS1jb2xvciAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1jaGVja2VkLWJnOiAgICAgICAgICAgJGNvbXBvbmVudC1hY3RpdmUtYmcgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItY2hlY2tlZC1kaXNhYmxlZC1iZzogIHJnYmEodGhlbWUtY29sb3IoXCJwcmltYXJ5XCIpLCAuNSkgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItY2hlY2tlZC1ib3gtc2hhZG93OiAgIG5vbmUgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItY2hlY2tlZC1ib3JkZXItY29sb3I6ICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItY2hlY2tlZC1iZyAhZGVmYXVsdDtcclxuXHJcbi8vICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItZm9jdXMtYm94LXNoYWRvdzogICAgICRpbnB1dC1mb2N1cy1ib3gtc2hhZG93ICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWZvY3VzLWJvcmRlci1jb2xvcjogICAkaW5wdXQtZm9jdXMtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xyXG5cclxuLy8gJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1hY3RpdmUtY29sb3I6ICAgICAgICAgJGNvbXBvbmVudC1hY3RpdmUtY29sb3IgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItYWN0aXZlLWJnOiAgICAgICAgICAgIGxpZ2h0ZW4oJGNvbXBvbmVudC1hY3RpdmUtYmcsIDM1JSkgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItYWN0aXZlLWJveC1zaGFkb3c6ICAgIG5vbmUgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItYWN0aXZlLWJvcmRlci1jb2xvcjogICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItYWN0aXZlLWJnICFkZWZhdWx0O1xyXG5cclxuLy8gJGN1c3RvbS1jaGVja2JveC1pbmRpY2F0b3ItYm9yZGVyLXJhZGl1czogICAgICAgJGJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tY2hlY2tib3gtaW5kaWNhdG9yLWljb24tY2hlY2tlZDogICAgICAgIHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCw8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzgnIGhlaWdodD0nOCcgdmlld0JveD0nMCAwIDggOCc+PHBhdGggZmlsbD0nI3skY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWNoZWNrZWQtY29sb3J9JyBkPSdNNi41NjQuNzVsLTMuNTkgMy42MTItMS41MzgtMS41NUwwIDQuMjZsMi45NzQgMi45OUw4IDIuMTkzeicvPjwvc3ZnPlwiKSAhZGVmYXVsdDtcclxuXHJcbi8vICRjdXN0b20tY2hlY2tib3gtaW5kaWNhdG9yLWluZGV0ZXJtaW5hdGUtYmc6ICAgICAgICAgICAkY29tcG9uZW50LWFjdGl2ZS1iZyAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1jaGVja2JveC1pbmRpY2F0b3ItaW5kZXRlcm1pbmF0ZS1jb2xvcjogICAgICAgICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItY2hlY2tlZC1jb2xvciAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1jaGVja2JveC1pbmRpY2F0b3ItaWNvbi1pbmRldGVybWluYXRlOiAgICAgICAgIHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCw8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzQnIGhlaWdodD0nNCcgdmlld0JveD0nMCAwIDQgNCc+PHBhdGggc3Ryb2tlPScjeyRjdXN0b20tY2hlY2tib3gtaW5kaWNhdG9yLWluZGV0ZXJtaW5hdGUtY29sb3J9JyBkPSdNMCAyaDQnLz48L3N2Zz5cIikgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tY2hlY2tib3gtaW5kaWNhdG9yLWluZGV0ZXJtaW5hdGUtYm94LXNoYWRvdzogICBub25lICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLWNoZWNrYm94LWluZGljYXRvci1pbmRldGVybWluYXRlLWJvcmRlci1jb2xvcjogJGN1c3RvbS1jaGVja2JveC1pbmRpY2F0b3ItaW5kZXRlcm1pbmF0ZS1iZyAhZGVmYXVsdDtcclxuXHJcbi8vICRjdXN0b20tcmFkaW8taW5kaWNhdG9yLWJvcmRlci1yYWRpdXM6ICAgICAgICAgIDUwJSAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1yYWRpby1pbmRpY2F0b3ItaWNvbi1jaGVja2VkOiAgICAgICAgICAgdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLDxzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB3aWR0aD0nMTInIGhlaWdodD0nMTInIHZpZXdCb3g9Jy00IC00IDggOCc+PGNpcmNsZSByPSczJyBmaWxsPScjeyRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItY2hlY2tlZC1jb2xvcn0nLz48L3N2Zz5cIikgIWRlZmF1bHQ7XHJcblxyXG4vLyAkY3VzdG9tLXN3aXRjaC13aWR0aDogICAgICAgICAgICAgICAgICAgICAgICAgICAkY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLXNpemUgKiAxLjc1ICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLXN3aXRjaC1pbmRpY2F0b3ItYm9yZGVyLXJhZGl1czogICAgICAgICAkY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLXNpemUgLyAyICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLXN3aXRjaC1pbmRpY2F0b3Itc2l6ZTogICAgICAgICAgICAgICAgICBzdWJ0cmFjdCgkY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLXNpemUsICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItYm9yZGVyLXdpZHRoICogNCkgIWRlZmF1bHQ7XHJcblxyXG4kY3VzdG9tLXNlbGVjdC1wYWRkaW5nLXk6ICRpbnB1dC1wYWRkaW5nLXk7XHJcbiRjdXN0b20tc2VsZWN0LXBhZGRpbmcteDogMS4yNXJlbTtcclxuJGN1c3RvbS1zZWxlY3QtZm9udC1mYW1pbHk6ICRpbnB1dC1mb250LWZhbWlseSAhZGVmYXVsdDtcclxuJGN1c3RvbS1zZWxlY3QtZm9udC1zaXplOiAkaW5wdXQtZm9udC1zaXplICFkZWZhdWx0O1xyXG4kY3VzdG9tLXNlbGVjdC1oZWlnaHQ6ICRpbnB1dC1oZWlnaHQ7XHJcbiRjdXN0b20tc2VsZWN0LWluZGljYXRvci1wYWRkaW5nOiAxLjI1cmVtOyAvLyBFeHRyYSBwYWRkaW5nIHRvIGFjY291bnQgZm9yIHRoZSBwcmVzZW5jZSBvZiB0aGUgYmFja2dyb3VuZC1pbWFnZSBiYXNlZCBpbmRpY2F0b3JcclxuJGN1c3RvbS1zZWxlY3QtZm9udC13ZWlnaHQ6ICRpbnB1dC1mb250LXdlaWdodCAhZGVmYXVsdDtcclxuJGN1c3RvbS1zZWxlY3QtbGluZS1oZWlnaHQ6ICRpbnB1dC1saW5lLWhlaWdodCAhZGVmYXVsdDtcclxuJGN1c3RvbS1zZWxlY3QtY29sb3I6ICRpbnB1dC1jb2xvciAhZGVmYXVsdDtcclxuJGN1c3RvbS1zZWxlY3QtZGlzYWJsZWQtY29sb3I6ICRncmF5LTYwMCAhZGVmYXVsdDtcclxuJGN1c3RvbS1zZWxlY3QtYmc6ICRpbnB1dC1iZyAhZGVmYXVsdDtcclxuJGN1c3RvbS1zZWxlY3QtZGlzYWJsZWQtYmc6ICRncmF5LTIwMCAhZGVmYXVsdDtcclxuJGN1c3RvbS1zZWxlY3QtYmctc2l6ZTogOHB4IDEwcHggIWRlZmF1bHQ7IC8vIEluIHBpeGVscyBiZWNhdXNlIGltYWdlIGRpbWVuc2lvbnNcclxuJGN1c3RvbS1zZWxlY3QtaW5kaWNhdG9yLWNvbG9yOiAkZ3JheS04MDAgIWRlZmF1bHQ7XHJcbiRjdXN0b20tc2VsZWN0LWluZGljYXRvcjogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLDxzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB3aWR0aD0nNCcgaGVpZ2h0PSc1JyB2aWV3Qm94PScwIDAgNCA1Jz48cGF0aCBmaWxsPScjeyRjdXN0b20tc2VsZWN0LWluZGljYXRvci1jb2xvcn0nIGQ9J00yIDBMMCAyaDR6bTAgNUwwIDNoNHonLz48L3N2Zz5cIikgIWRlZmF1bHQ7XHJcbiRjdXN0b20tc2VsZWN0LWJhY2tncm91bmQ6IGVzY2FwZS1zdmcoJGN1c3RvbS1zZWxlY3QtaW5kaWNhdG9yKSBuby1yZXBlYXQgcmlnaHRcclxuICAkY3VzdG9tLXNlbGVjdC1wYWRkaW5nLXggY2VudGVyIC8gJGN1c3RvbS1zZWxlY3QtYmctc2l6ZSAhZGVmYXVsdDsgLy8gVXNlZCBzbyB3ZSBjYW4gaGF2ZSBtdWx0aXBsZSBiYWNrZ3JvdW5kIGVsZW1lbnRzIChlLmcuLCBhcnJvdyBhbmQgZmVlZGJhY2sgaWNvbilcclxuXHJcbiRjdXN0b20tc2VsZWN0LWZlZWRiYWNrLWljb24tcGFkZGluZy1yaWdodDogYWRkKFxyXG4gIDFlbSAqIDAuNzUsXHJcbiAgKDIgKiAkY3VzdG9tLXNlbGVjdC1wYWRkaW5nLXkgKiAwLjc1KSArICRjdXN0b20tc2VsZWN0LXBhZGRpbmcteCArXHJcbiAgICAkY3VzdG9tLXNlbGVjdC1pbmRpY2F0b3ItcGFkZGluZ1xyXG4pICFkZWZhdWx0O1xyXG4kY3VzdG9tLXNlbGVjdC1mZWVkYmFjay1pY29uLXBvc2l0aW9uOiBjZW50ZXIgcmlnaHRcclxuICAoJGN1c3RvbS1zZWxlY3QtcGFkZGluZy14ICsgJGN1c3RvbS1zZWxlY3QtaW5kaWNhdG9yLXBhZGRpbmcpICFkZWZhdWx0O1xyXG4kY3VzdG9tLXNlbGVjdC1mZWVkYmFjay1pY29uLXNpemU6ICRpbnB1dC1oZWlnaHQtaW5uZXItaGFsZlxyXG4gICRpbnB1dC1oZWlnaHQtaW5uZXItaGFsZiAhZGVmYXVsdDtcclxuXHJcbiRjdXN0b20tc2VsZWN0LWJvcmRlci13aWR0aDogJGlucHV0LWJvcmRlci13aWR0aCAhZGVmYXVsdDtcclxuJGN1c3RvbS1zZWxlY3QtYm9yZGVyLWNvbG9yOiAkaW5wdXQtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xyXG4kY3VzdG9tLXNlbGVjdC1ib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cztcclxuJGN1c3RvbS1zZWxlY3QtYm94LXNoYWRvdzogaW5zZXQgMCAxcHggMnB4IHJnYmEoJGJsYWNrLCAwLjA3NSkgIWRlZmF1bHQ7XHJcblxyXG4kY3VzdG9tLXNlbGVjdC1mb2N1cy1ib3JkZXItY29sb3I6ICRpbnB1dC1mb2N1cy1ib3JkZXItY29sb3I7XHJcbiRjdXN0b20tc2VsZWN0LWZvY3VzLXdpZHRoOiAkaW5wdXQtZm9jdXMtd2lkdGggIWRlZmF1bHQ7XHJcbiRjdXN0b20tc2VsZWN0LWZvY3VzLWJveC1zaGFkb3c6IG5vbmU7XHJcblxyXG4kY3VzdG9tLXNlbGVjdC1wYWRkaW5nLXktc206ICRpbnB1dC1wYWRkaW5nLXktc20gIWRlZmF1bHQ7XHJcbiRjdXN0b20tc2VsZWN0LXBhZGRpbmcteC1zbTogJGlucHV0LXBhZGRpbmcteC1zbSAhZGVmYXVsdDtcclxuJGN1c3RvbS1zZWxlY3QtZm9udC1zaXplLXNtOiAkaW5wdXQtZm9udC1zaXplLXNtICFkZWZhdWx0O1xyXG4kY3VzdG9tLXNlbGVjdC1oZWlnaHQtc206ICRpbnB1dC1oZWlnaHQtc20gIWRlZmF1bHQ7XHJcblxyXG4kY3VzdG9tLXNlbGVjdC1wYWRkaW5nLXktbGc6ICRpbnB1dC1wYWRkaW5nLXktbGcgIWRlZmF1bHQ7XHJcbiRjdXN0b20tc2VsZWN0LXBhZGRpbmcteC1sZzogJGlucHV0LXBhZGRpbmcteC1sZyAhZGVmYXVsdDtcclxuJGN1c3RvbS1zZWxlY3QtZm9udC1zaXplLWxnOiAkaW5wdXQtZm9udC1zaXplLWxnICFkZWZhdWx0O1xyXG4kY3VzdG9tLXNlbGVjdC1oZWlnaHQtbGc6ICRpbnB1dC1oZWlnaHQtbGcgIWRlZmF1bHQ7XHJcblxyXG4vLyAkY3VzdG9tLXJhbmdlLXRyYWNrLXdpZHRoOiAgICAgICAgICAxMDAlICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLXJhbmdlLXRyYWNrLWhlaWdodDogICAgICAgICAuNXJlbSAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1yYW5nZS10cmFjay1jdXJzb3I6ICAgICAgICAgcG9pbnRlciAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1yYW5nZS10cmFjay1iZzogICAgICAgICAgICAgJGdyYXktMzAwICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLXJhbmdlLXRyYWNrLWJvcmRlci1yYWRpdXM6ICAxcmVtICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLXJhbmdlLXRyYWNrLWJveC1zaGFkb3c6ICAgICBpbnNldCAwIC4yNXJlbSAuMjVyZW0gcmdiYSgkYmxhY2ssIC4xKSAhZGVmYXVsdDtcclxuXHJcbi8vICRjdXN0b20tcmFuZ2UtdGh1bWItd2lkdGg6ICAgICAgICAgICAgICAgICAgIDFyZW0gIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tcmFuZ2UtdGh1bWItaGVpZ2h0OiAgICAgICAgICAgICAgICAgICRjdXN0b20tcmFuZ2UtdGh1bWItd2lkdGggIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tcmFuZ2UtdGh1bWItYmc6ICAgICAgICAgICAgICAgICAgICAgICRjb21wb25lbnQtYWN0aXZlLWJnICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLXJhbmdlLXRodW1iLWJvcmRlcjogICAgICAgICAgICAgICAgICAwICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLXJhbmdlLXRodW1iLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAxcmVtICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLXJhbmdlLXRodW1iLWJveC1zaGFkb3c6ICAgICAgICAgICAgICAwIC4xcmVtIC4yNXJlbSByZ2JhKCRibGFjaywgLjEpICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLXJhbmdlLXRodW1iLWZvY3VzLWJveC1zaGFkb3c6ICAgICAgICAwIDAgMCAxcHggJGJvZHktYmcsICRpbnB1dC1mb2N1cy1ib3gtc2hhZG93ICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLXJhbmdlLXRodW1iLWZvY3VzLWJveC1zaGFkb3ctd2lkdGg6ICAkaW5wdXQtZm9jdXMtd2lkdGggIWRlZmF1bHQ7IC8vIEZvciBmb2N1cyBib3ggc2hhZG93IGlzc3VlIGluIElFL0VkZ2VcclxuLy8gJGN1c3RvbS1yYW5nZS10aHVtYi1hY3RpdmUtYmc6ICAgICAgICAgICAgICAgbGlnaHRlbigkY29tcG9uZW50LWFjdGl2ZS1iZywgMzUlKSAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1yYW5nZS10aHVtYi1kaXNhYmxlZC1iZzogICAgICAgICAgICAgJGdyYXktNTAwICFkZWZhdWx0O1xyXG5cclxuLy8gJGN1c3RvbS1maWxlLWhlaWdodDogICAgICAgICAgICAgICAgJGlucHV0LWhlaWdodCAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1maWxlLWhlaWdodC1pbm5lcjogICAgICAgICAgJGlucHV0LWhlaWdodC1pbm5lciAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1maWxlLWZvY3VzLWJvcmRlci1jb2xvcjogICAgJGlucHV0LWZvY3VzLWJvcmRlci1jb2xvciAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1maWxlLWZvY3VzLWJveC1zaGFkb3c6ICAgICAgJGlucHV0LWZvY3VzLWJveC1zaGFkb3cgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tZmlsZS1kaXNhYmxlZC1iZzogICAgICAgICAgICRpbnB1dC1kaXNhYmxlZC1iZyAhZGVmYXVsdDtcclxuXHJcbi8vICRjdXN0b20tZmlsZS1wYWRkaW5nLXk6ICAgICAgICAgICAgICRpbnB1dC1wYWRkaW5nLXkgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tZmlsZS1wYWRkaW5nLXg6ICAgICAgICAgICAgICRpbnB1dC1wYWRkaW5nLXggIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tZmlsZS1saW5lLWhlaWdodDogICAgICAgICAgICRpbnB1dC1saW5lLWhlaWdodCAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1maWxlLWZvbnQtZmFtaWx5OiAgICAgICAgICAgJGlucHV0LWZvbnQtZmFtaWx5ICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLWZpbGUtZm9udC13ZWlnaHQ6ICAgICAgICAgICAkaW5wdXQtZm9udC13ZWlnaHQgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tZmlsZS1jb2xvcjogICAgICAgICAgICAgICAgICRpbnB1dC1jb2xvciAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1maWxlLWJnOiAgICAgICAgICAgICAgICAgICAgJGlucHV0LWJnICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLWZpbGUtYm9yZGVyLXdpZHRoOiAgICAgICAgICAkaW5wdXQtYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLWZpbGUtYm9yZGVyLWNvbG9yOiAgICAgICAgICAkaW5wdXQtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLWZpbGUtYm9yZGVyLXJhZGl1czogICAgICAgICAkaW5wdXQtYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1maWxlLWJveC1zaGFkb3c6ICAgICAgICAgICAgJGlucHV0LWJveC1zaGFkb3cgIWRlZmF1bHQ7XHJcbi8vICRjdXN0b20tZmlsZS1idXR0b24tY29sb3I6ICAgICAgICAgICRjdXN0b20tZmlsZS1jb2xvciAhZGVmYXVsdDtcclxuLy8gJGN1c3RvbS1maWxlLWJ1dHRvbi1iZzogICAgICAgICAgICAgJGlucHV0LWdyb3VwLWFkZG9uLWJnICFkZWZhdWx0O1xyXG4vLyAkY3VzdG9tLWZpbGUtdGV4dDogKFxyXG4vLyAgIGVuOiBcIkJyb3dzZVwiXHJcbi8vICkgIWRlZmF1bHQ7XHJcblxyXG4vLyAvLyBGb3JtIHZhbGlkYXRpb25cclxuXHJcbi8vICRmb3JtLWZlZWRiYWNrLW1hcmdpbi10b3A6ICAgICAgICAgICRmb3JtLXRleHQtbWFyZ2luLXRvcCAhZGVmYXVsdDtcclxuLy8gJGZvcm0tZmVlZGJhY2stZm9udC1zaXplOiAgICAgICAgICAgJHNtYWxsLWZvbnQtc2l6ZSAhZGVmYXVsdDtcclxuLy8gJGZvcm0tZmVlZGJhY2stdmFsaWQtY29sb3I6ICAgICAgICAgdGhlbWUtY29sb3IoXCJzdWNjZXNzXCIpICFkZWZhdWx0O1xyXG4vLyAkZm9ybS1mZWVkYmFjay1pbnZhbGlkLWNvbG9yOiAgICAgICB0aGVtZS1jb2xvcihcImRhbmdlclwiKSAhZGVmYXVsdDtcclxuXHJcbi8vICRmb3JtLWZlZWRiYWNrLWljb24tdmFsaWQtY29sb3I6ICAgICRmb3JtLWZlZWRiYWNrLXZhbGlkLWNvbG9yICFkZWZhdWx0O1xyXG4vLyAkZm9ybS1mZWVkYmFjay1pY29uLXZhbGlkOiAgICAgICAgICB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsPHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHdpZHRoPSc4JyBoZWlnaHQ9JzgnIHZpZXdCb3g9JzAgMCA4IDgnPjxwYXRoIGZpbGw9JyN7JGZvcm0tZmVlZGJhY2staWNvbi12YWxpZC1jb2xvcn0nIGQ9J00yLjMgNi43M0wuNiA0LjUzYy0uNC0xLjA0LjQ2LTEuNCAxLjEtLjhsMS4xIDEuNCAzLjQtMy44Yy42LS42MyAxLjYtLjI3IDEuMi43bC00IDQuNmMtLjQzLjUtLjguNC0xLjEuMXonLz48L3N2Zz5cIikgIWRlZmF1bHQ7XHJcbi8vICRmb3JtLWZlZWRiYWNrLWljb24taW52YWxpZC1jb2xvcjogICRmb3JtLWZlZWRiYWNrLWludmFsaWQtY29sb3IgIWRlZmF1bHQ7XHJcbi8vICRmb3JtLWZlZWRiYWNrLWljb24taW52YWxpZDogICAgICAgIHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCw8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzEyJyBoZWlnaHQ9JzEyJyBmaWxsPSdub25lJyBzdHJva2U9JyN7JGZvcm0tZmVlZGJhY2staWNvbi1pbnZhbGlkLWNvbG9yfScgdmlld0JveD0nMCAwIDEyIDEyJz48Y2lyY2xlIGN4PSc2JyBjeT0nNicgcj0nNC41Jy8+PHBhdGggc3Ryb2tlLWxpbmVqb2luPSdyb3VuZCcgZD0nTTUuOCAzLjZoLjRMNiA2LjV6Jy8+PGNpcmNsZSBjeD0nNicgY3k9JzguMicgcj0nLjYnIGZpbGw9JyN7JGZvcm0tZmVlZGJhY2staWNvbi1pbnZhbGlkLWNvbG9yfScgc3Ryb2tlPSdub25lJy8+PC9zdmc+XCIpICFkZWZhdWx0O1xyXG5cclxuLy8gJGZvcm0tdmFsaWRhdGlvbi1zdGF0ZXM6ICgpICFkZWZhdWx0O1xyXG4vLyAvLyBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc2Nzcy9kb2xsYXItdmFyaWFibGUtZGVmYXVsdFxyXG4vLyAkZm9ybS12YWxpZGF0aW9uLXN0YXRlczogbWFwLW1lcmdlKFxyXG4vLyAgIChcclxuLy8gICAgIFwidmFsaWRcIjogKFxyXG4vLyAgICAgICBcImNvbG9yXCI6ICRmb3JtLWZlZWRiYWNrLXZhbGlkLWNvbG9yLFxyXG4vLyAgICAgICBcImljb25cIjogJGZvcm0tZmVlZGJhY2staWNvbi12YWxpZFxyXG4vLyAgICAgKSxcclxuLy8gICAgIFwiaW52YWxpZFwiOiAoXHJcbi8vICAgICAgIFwiY29sb3JcIjogJGZvcm0tZmVlZGJhY2staW52YWxpZC1jb2xvcixcclxuLy8gICAgICAgXCJpY29uXCI6ICRmb3JtLWZlZWRiYWNrLWljb24taW52YWxpZFxyXG4vLyAgICAgKSxcclxuLy8gICApLFxyXG4vLyAgICRmb3JtLXZhbGlkYXRpb24tc3RhdGVzXHJcbi8vICk7XHJcblxyXG4vLyAvLyBaLWluZGV4IG1hc3RlciBsaXN0XHJcbi8vIC8vXHJcbi8vIC8vIFdhcm5pbmc6IEF2b2lkIGN1c3RvbWl6aW5nIHRoZXNlIHZhbHVlcy4gVGhleSdyZSB1c2VkIGZvciBhIGJpcmQncyBleWUgdmlld1xyXG4vLyAvLyBvZiBjb21wb25lbnRzIGRlcGVuZGVudCBvbiB0aGUgei1heGlzIGFuZCBhcmUgZGVzaWduZWQgdG8gYWxsIHdvcmsgdG9nZXRoZXIuXHJcblxyXG4vLyAkemluZGV4LWRyb3Bkb3duOiAgICAgICAgICAgICAgICAgICAxMDAwICFkZWZhdWx0O1xyXG4vLyAkemluZGV4LXN0aWNreTogICAgICAgICAgICAgICAgICAgICAxMDIwICFkZWZhdWx0O1xyXG4vLyAkemluZGV4LWZpeGVkOiAgICAgICAgICAgICAgICAgICAgICAxMDMwICFkZWZhdWx0O1xyXG4vLyAkemluZGV4LW1vZGFsLWJhY2tkcm9wOiAgICAgICAgICAgICAxMDQwICFkZWZhdWx0O1xyXG4vLyAkemluZGV4LW1vZGFsOiAgICAgICAgICAgICAgICAgICAgICAxMDUwICFkZWZhdWx0O1xyXG4vLyAkemluZGV4LXBvcG92ZXI6ICAgICAgICAgICAgICAgICAgICAxMDYwICFkZWZhdWx0O1xyXG4vLyAkemluZGV4LXRvb2x0aXA6ICAgICAgICAgICAgICAgICAgICAxMDcwICFkZWZhdWx0O1xyXG5cclxuLy8gLy8gTmF2c1xyXG5cclxuLy8gJG5hdi1saW5rLXBhZGRpbmcteTogICAgICAgICAgICAgICAgLjVyZW0gIWRlZmF1bHQ7XHJcbi8vICRuYXYtbGluay1wYWRkaW5nLXg6ICAgICAgICAgICAgICAgIDFyZW0gIWRlZmF1bHQ7XHJcbi8vICRuYXYtbGluay1kaXNhYmxlZC1jb2xvcjogICAgICAgICAgICRncmF5LTYwMCAhZGVmYXVsdDtcclxuXHJcbi8vICRuYXYtdGFicy1ib3JkZXItY29sb3I6ICAgICAgICAgICAgICRncmF5LTMwMCAhZGVmYXVsdDtcclxuLy8gJG5hdi10YWJzLWJvcmRlci13aWR0aDogICAgICAgICAgICAgJGJvcmRlci13aWR0aCAhZGVmYXVsdDtcclxuLy8gJG5hdi10YWJzLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAgJGJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XHJcbi8vICRuYXYtdGFicy1saW5rLWhvdmVyLWJvcmRlci1jb2xvcjogICRncmF5LTIwMCAkZ3JheS0yMDAgJG5hdi10YWJzLWJvcmRlci1jb2xvciAhZGVmYXVsdDtcclxuLy8gJG5hdi10YWJzLWxpbmstYWN0aXZlLWNvbG9yOiAgICAgICAgJGdyYXktNzAwICFkZWZhdWx0O1xyXG4vLyAkbmF2LXRhYnMtbGluay1hY3RpdmUtYmc6ICAgICAgICAgICAkYm9keS1iZyAhZGVmYXVsdDtcclxuLy8gJG5hdi10YWJzLWxpbmstYWN0aXZlLWJvcmRlci1jb2xvcjogJGdyYXktMzAwICRncmF5LTMwMCAkbmF2LXRhYnMtbGluay1hY3RpdmUtYmcgIWRlZmF1bHQ7XHJcblxyXG4vLyAkbmF2LXBpbGxzLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcclxuLy8gJG5hdi1waWxscy1saW5rLWFjdGl2ZS1jb2xvcjogICAgICAgJGNvbXBvbmVudC1hY3RpdmUtY29sb3IgIWRlZmF1bHQ7XHJcbi8vICRuYXYtcGlsbHMtbGluay1hY3RpdmUtYmc6ICAgICAgICAgICRjb21wb25lbnQtYWN0aXZlLWJnICFkZWZhdWx0O1xyXG5cclxuLy8gJG5hdi1kaXZpZGVyLWNvbG9yOiAgICAgICAgICAgICAgICAgJGdyYXktMjAwICFkZWZhdWx0O1xyXG4vLyAkbmF2LWRpdmlkZXItbWFyZ2luLXk6ICAgICAgICAgICAgICAkc3BhY2VyIC8gMiAhZGVmYXVsdDtcclxuXHJcbi8vIC8vIE5hdmJhclxyXG5cclxuLy8gJG5hdmJhci1wYWRkaW5nLXk6ICAgICAgICAgICAgICAgICAgJHNwYWNlciAvIDIgIWRlZmF1bHQ7XHJcbi8vICRuYXZiYXItcGFkZGluZy14OiAgICAgICAgICAgICAgICAgICRzcGFjZXIgIWRlZmF1bHQ7XHJcblxyXG4vLyAkbmF2YmFyLW5hdi1saW5rLXBhZGRpbmcteDogICAgICAgICAuNXJlbSAhZGVmYXVsdDtcclxuXHJcbi8vICRuYXZiYXItYnJhbmQtZm9udC1zaXplOiAgICAgICAgICAgICRmb250LXNpemUtbGcgIWRlZmF1bHQ7XHJcbi8vIC8vIENvbXB1dGUgdGhlIG5hdmJhci1icmFuZCBwYWRkaW5nLXkgc28gdGhlIG5hdmJhci1icmFuZCB3aWxsIGhhdmUgdGhlIHNhbWUgaGVpZ2h0IGFzIG5hdmJhci10ZXh0IGFuZCBuYXYtbGlua1xyXG4vLyAkbmF2LWxpbmstaGVpZ2h0OiAgICAgICAgICAgICAgICAgICAkZm9udC1zaXplLWJhc2UgKiAkbGluZS1oZWlnaHQtYmFzZSArICRuYXYtbGluay1wYWRkaW5nLXkgKiAyICFkZWZhdWx0O1xyXG4vLyAkbmF2YmFyLWJyYW5kLWhlaWdodDogICAgICAgICAgICAgICAkbmF2YmFyLWJyYW5kLWZvbnQtc2l6ZSAqICRsaW5lLWhlaWdodC1iYXNlICFkZWZhdWx0O1xyXG4vLyAkbmF2YmFyLWJyYW5kLXBhZGRpbmcteTogICAgICAgICAgICAoJG5hdi1saW5rLWhlaWdodCAtICRuYXZiYXItYnJhbmQtaGVpZ2h0KSAvIDIgIWRlZmF1bHQ7XHJcblxyXG4vLyAkbmF2YmFyLXRvZ2dsZXItcGFkZGluZy15OiAgICAgICAgICAuMjVyZW0gIWRlZmF1bHQ7XHJcbi8vICRuYXZiYXItdG9nZ2xlci1wYWRkaW5nLXg6ICAgICAgICAgIC43NXJlbSAhZGVmYXVsdDtcclxuLy8gJG5hdmJhci10b2dnbGVyLWZvbnQtc2l6ZTogICAgICAgICAgJGZvbnQtc2l6ZS1sZyAhZGVmYXVsdDtcclxuLy8gJG5hdmJhci10b2dnbGVyLWJvcmRlci1yYWRpdXM6ICAgICAgJGJ0bi1ib3JkZXItcmFkaXVzICFkZWZhdWx0O1xyXG5cclxuLy8gJG5hdmJhci1kYXJrLWNvbG9yOiAgICAgICAgICAgICAgICAgcmdiYSgkd2hpdGUsIC41KSAhZGVmYXVsdDtcclxuLy8gJG5hdmJhci1kYXJrLWhvdmVyLWNvbG9yOiAgICAgICAgICAgcmdiYSgkd2hpdGUsIC43NSkgIWRlZmF1bHQ7XHJcbi8vICRuYXZiYXItZGFyay1hY3RpdmUtY29sb3I6ICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcclxuLy8gJG5hdmJhci1kYXJrLWRpc2FibGVkLWNvbG9yOiAgICAgICAgcmdiYSgkd2hpdGUsIC4yNSkgIWRlZmF1bHQ7XHJcbi8vICRuYXZiYXItZGFyay10b2dnbGVyLWljb24tYmc6ICAgICAgIHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCw8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzMwJyBoZWlnaHQ9JzMwJyB2aWV3Qm94PScwIDAgMzAgMzAnPjxwYXRoIHN0cm9rZT0nI3skbmF2YmFyLWRhcmstY29sb3J9JyBzdHJva2UtbGluZWNhcD0ncm91bmQnIHN0cm9rZS1taXRlcmxpbWl0PScxMCcgc3Ryb2tlLXdpZHRoPScyJyBkPSdNNCA3aDIyTTQgMTVoMjJNNCAyM2gyMicvPjwvc3ZnPlwiKSAhZGVmYXVsdDtcclxuLy8gJG5hdmJhci1kYXJrLXRvZ2dsZXItYm9yZGVyLWNvbG9yOiAgcmdiYSgkd2hpdGUsIC4xKSAhZGVmYXVsdDtcclxuXHJcbi8vICRuYXZiYXItbGlnaHQtY29sb3I6ICAgICAgICAgICAgICAgIHJnYmEoJGJsYWNrLCAuNSkgIWRlZmF1bHQ7XHJcbi8vICRuYXZiYXItbGlnaHQtaG92ZXItY29sb3I6ICAgICAgICAgIHJnYmEoJGJsYWNrLCAuNykgIWRlZmF1bHQ7XHJcbi8vICRuYXZiYXItbGlnaHQtYWN0aXZlLWNvbG9yOiAgICAgICAgIHJnYmEoJGJsYWNrLCAuOSkgIWRlZmF1bHQ7XHJcbi8vICRuYXZiYXItbGlnaHQtZGlzYWJsZWQtY29sb3I6ICAgICAgIHJnYmEoJGJsYWNrLCAuMykgIWRlZmF1bHQ7XHJcbi8vICRuYXZiYXItbGlnaHQtdG9nZ2xlci1pY29uLWJnOiAgICAgIHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCw8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzMwJyBoZWlnaHQ9JzMwJyB2aWV3Qm94PScwIDAgMzAgMzAnPjxwYXRoIHN0cm9rZT0nI3skbmF2YmFyLWxpZ2h0LWNvbG9yfScgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbWl0ZXJsaW1pdD0nMTAnIHN0cm9rZS13aWR0aD0nMicgZD0nTTQgN2gyMk00IDE1aDIyTTQgMjNoMjInLz48L3N2Zz5cIikgIWRlZmF1bHQ7XHJcbi8vICRuYXZiYXItbGlnaHQtdG9nZ2xlci1ib3JkZXItY29sb3I6IHJnYmEoJGJsYWNrLCAuMSkgIWRlZmF1bHQ7XHJcblxyXG4vLyAkbmF2YmFyLWxpZ2h0LXRoZW1lLWNvbG9yOiAgICAgICAgICAgICAgICAkbmF2YmFyLWxpZ2h0LWFjdGl2ZS1jb2xvciAhZGVmYXVsdDtcclxuLy8gJG5hdmJhci1saWdodC1icmFuZC1ob3Zlci1jb2xvcjogICAgICAgICAgJG5hdmJhci1saWdodC1hY3RpdmUtY29sb3IgIWRlZmF1bHQ7XHJcbi8vICRuYXZiYXItZGFyay10aGVtZS1jb2xvcjogICAgICAgICAgICAgICAgICRuYXZiYXItZGFyay1hY3RpdmUtY29sb3IgIWRlZmF1bHQ7XHJcbi8vICRuYXZiYXItZGFyay1icmFuZC1ob3Zlci1jb2xvcjogICAgICAgICAgICRuYXZiYXItZGFyay1hY3RpdmUtY29sb3IgIWRlZmF1bHQ7XHJcblxyXG4vLyBEcm9wZG93bnNcclxuLy9cclxuLy8gRHJvcGRvd24gbWVudSBjb250YWluZXIgYW5kIGNvbnRlbnRzLlxyXG5cclxuJGRyb3Bkb3duLW1pbi13aWR0aDogMTByZW07XHJcbiRkcm9wZG93bi1wYWRkaW5nLXk6IDAuNXJlbTtcclxuJGRyb3Bkb3duLXNwYWNlcjogMC4xMjVyZW07XHJcbiRkcm9wZG93bi1mb250LXNpemU6ICRmb250LXNpemUtYmFzZTtcclxuJGRyb3Bkb3duLWNvbG9yOiAkYm9keS1jb2xvcjtcclxuJGRyb3Bkb3duLWJnOiAkd2hpdGU7XHJcbiRkcm9wZG93bi1ib3JkZXItY29sb3I6IHJnYmEoJGJsYWNrLCAwLjE1KTtcclxuJGRyb3Bkb3duLWJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzO1xyXG4kZHJvcGRvd24tYm9yZGVyLXdpZHRoOiAkYm9yZGVyLXdpZHRoO1xyXG4kZHJvcGRvd24taW5uZXItYm9yZGVyLXJhZGl1czogc3VidHJhY3QoXHJcbiAgJGRyb3Bkb3duLWJvcmRlci1yYWRpdXMsXHJcbiAgJGRyb3Bkb3duLWJvcmRlci13aWR0aFxyXG4pO1xyXG4kZHJvcGRvd24tZGl2aWRlci1iZzogJGdyYXktMjAwO1xyXG4kZHJvcGRvd24tZGl2aWRlci1tYXJnaW4teTogJG5hdi1kaXZpZGVyLW1hcmdpbi15O1xyXG4kZHJvcGRvd24tYm94LXNoYWRvdzogMCAwLjVyZW0gMXJlbSByZ2JhKCRibGFjaywgMC4xNzUpO1xyXG5cclxuJGRyb3Bkb3duLWxpbmstY29sb3I6ICRncmF5LTIwMDtcclxuJGRyb3Bkb3duLWxpbmstaG92ZXItY29sb3I6IGRhcmtlbigkZ3JheS0yMDAsIDUlKTtcclxuJGRyb3Bkb3duLWxpbmstaG92ZXItYmc6ICRncmF5LTEwMDtcclxuXHJcbiRkcm9wZG93bi1saW5rLWFjdGl2ZS1jb2xvcjogJGNvbXBvbmVudC1hY3RpdmUtY29sb3I7XHJcbiRkcm9wZG93bi1saW5rLWFjdGl2ZS1iZzogJGNvbXBvbmVudC1hY3RpdmUtYmc7XHJcblxyXG4kZHJvcGRvd24tbGluay1kaXNhYmxlZC1jb2xvcjogJGdyYXktNjAwO1xyXG5cclxuJGRyb3Bkb3duLWl0ZW0tcGFkZGluZy15OiAwLjI1cmVtO1xyXG4kZHJvcGRvd24taXRlbS1wYWRkaW5nLXg6IDEuNXJlbTtcclxuXHJcbiRkcm9wZG93bi1oZWFkZXItY29sb3I6ICRncmF5LTYwMDtcclxuXHJcbi8vIC8vIFBhZ2luYXRpb25cclxuXHJcbiRwYWdpbmF0aW9uLXBhZGRpbmcteTogMC42cmVtO1xyXG4kcGFnaW5hdGlvbi1wYWRkaW5nLXg6IDAuNzVyZW07XHJcbiRwYWdpbmF0aW9uLXBhZGRpbmcteS1zbTogMC4yNXJlbTtcclxuJHBhZ2luYXRpb24tcGFkZGluZy14LXNtOiAwLjVyZW07XHJcbiRwYWdpbmF0aW9uLXBhZGRpbmcteS1sZzogMC43NXJlbTtcclxuJHBhZ2luYXRpb24tcGFkZGluZy14LWxnOiAxLjVyZW07XHJcbiRwYWdpbmF0aW9uLWxpbmUtaGVpZ2h0OiAxLjI1O1xyXG5cclxuJHBhZ2luYXRpb24tY29sb3I6ICRncmF5LTYwMDtcclxuJHBhZ2luYXRpb24tYmc6ICR3aGl0ZTtcclxuJHBhZ2luYXRpb24tYm9yZGVyLXdpZHRoOiAkYm9yZGVyLXdpZHRoO1xyXG4kcGFnaW5hdGlvbi1ib3JkZXItY29sb3I6ICRncmF5LTgwMDtcclxuXHJcbiRwYWdpbmF0aW9uLWZvY3VzLWJveC1zaGFkb3c6IG5vbmU7XHJcbiRwYWdpbmF0aW9uLWZvY3VzLW91dGxpbmU6IDA7XHJcblxyXG4kcGFnaW5hdGlvbi1ob3Zlci1jb2xvcjogJGxpbmstaG92ZXItY29sb3I7XHJcbiRwYWdpbmF0aW9uLWhvdmVyLWJnOiAkZ3JheS0yMDA7XHJcbiRwYWdpbmF0aW9uLWhvdmVyLWJvcmRlci1jb2xvcjogJGdyYXktODAwO1xyXG5cclxuJHBhZ2luYXRpb24tYWN0aXZlLWNvbG9yOiAkZ3JheS02MDA7XHJcbiRwYWdpbmF0aW9uLWFjdGl2ZS1iZzogJGdyYXktODAwO1xyXG4kcGFnaW5hdGlvbi1hY3RpdmUtYm9yZGVyLWNvbG9yOiAkZ3JheS04MDA7XHJcblxyXG4kcGFnaW5hdGlvbi1kaXNhYmxlZC1jb2xvcjogJGdyYXktNjAwO1xyXG4kcGFnaW5hdGlvbi1kaXNhYmxlZC1iZzogJHdoaXRlO1xyXG4kcGFnaW5hdGlvbi1kaXNhYmxlZC1ib3JkZXItY29sb3I6ICRncmF5LTMwMDtcclxuXHJcbi8vIC8vIEp1bWJvdHJvblxyXG5cclxuLy8gJGp1bWJvdHJvbi1wYWRkaW5nOiAgICAgICAgICAgICAgICAgMnJlbSAhZGVmYXVsdDtcclxuLy8gJGp1bWJvdHJvbi1jb2xvcjogICAgICAgICAgICAgICAgICAgbnVsbCAhZGVmYXVsdDtcclxuLy8gJGp1bWJvdHJvbi1iZzogICAgICAgICAgICAgICAgICAgICAgJGdyYXktMjAwICFkZWZhdWx0O1xyXG5cclxuLy8gLy8gQ2FyZHNcclxuXHJcbi8vICRjYXJkLXNwYWNlci15OiAgICAgICAgICAgICAgICAgICAgIC43NXJlbSAhZGVmYXVsdDtcclxuLy8gJGNhcmQtc3BhY2VyLXg6ICAgICAgICAgICAgICAgICAgICAgMS4yNXJlbSAhZGVmYXVsdDtcclxuLy8gJGNhcmQtYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICAgICAgJGJvcmRlci13aWR0aCAhZGVmYXVsdDtcclxuLy8gJGNhcmQtYm9yZGVyLXJhZGl1czogICAgICAgICAgICAgICAgJGJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XHJcbi8vICRjYXJkLWJvcmRlci1jb2xvcjogICAgICAgICAgICAgICAgIHJnYmEoJGJsYWNrLCAuMTI1KSAhZGVmYXVsdDtcclxuLy8gJGNhcmQtaW5uZXItYm9yZGVyLXJhZGl1czogICAgICAgICAgc3VidHJhY3QoJGNhcmQtYm9yZGVyLXJhZGl1cywgJGNhcmQtYm9yZGVyLXdpZHRoKSAhZGVmYXVsdDtcclxuLy8gJGNhcmQtY2FwLWJnOiAgICAgICAgICAgICAgICAgICAgICAgcmdiYSgkYmxhY2ssIC4wMykgIWRlZmF1bHQ7XHJcbi8vICRjYXJkLWNhcC1jb2xvcjogICAgICAgICAgICAgICAgICAgIG51bGwgIWRlZmF1bHQ7XHJcbi8vICRjYXJkLWhlaWdodDogICAgICAgICAgICAgICAgICAgICAgIG51bGwgIWRlZmF1bHQ7XHJcbi8vICRjYXJkLWNvbG9yOiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgIWRlZmF1bHQ7XHJcbi8vICRjYXJkLWJnOiAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcclxuXHJcbi8vICRjYXJkLWltZy1vdmVybGF5LXBhZGRpbmc6ICAgICAgICAgIDEuMjVyZW0gIWRlZmF1bHQ7XHJcblxyXG4vLyAkY2FyZC1ncm91cC1tYXJnaW46ICAgICAgICAgICAgICAgICAkZ3JpZC1ndXR0ZXItd2lkdGggLyAyICFkZWZhdWx0O1xyXG4vLyAkY2FyZC1kZWNrLW1hcmdpbjogICAgICAgICAgICAgICAgICAkY2FyZC1ncm91cC1tYXJnaW4gIWRlZmF1bHQ7XHJcblxyXG4vLyAkY2FyZC1jb2x1bW5zLWNvdW50OiAgICAgICAgICAgICAgICAzICFkZWZhdWx0O1xyXG4vLyAkY2FyZC1jb2x1bW5zLWdhcDogICAgICAgICAgICAgICAgICAxLjI1cmVtICFkZWZhdWx0O1xyXG4vLyAkY2FyZC1jb2x1bW5zLW1hcmdpbjogICAgICAgICAgICAgICAkY2FyZC1zcGFjZXIteSAhZGVmYXVsdDtcclxuXHJcbi8vIC8vIFRvb2x0aXBzXHJcblxyXG4vLyAkdG9vbHRpcC1mb250LXNpemU6ICAgICAgICAgICAgICAgICAkZm9udC1zaXplLXNtICFkZWZhdWx0O1xyXG4vLyAkdG9vbHRpcC1tYXgtd2lkdGg6ICAgICAgICAgICAgICAgICAyMDBweCAhZGVmYXVsdDtcclxuLy8gJHRvb2x0aXAtY29sb3I6ICAgICAgICAgICAgICAgICAgICAgJHdoaXRlICFkZWZhdWx0O1xyXG4vLyAkdG9vbHRpcC1iZzogICAgICAgICAgICAgICAgICAgICAgICAkYmxhY2sgIWRlZmF1bHQ7XHJcbi8vICR0b29sdGlwLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAgICRib3JkZXItcmFkaXVzICFkZWZhdWx0O1xyXG4vLyAkdG9vbHRpcC1vcGFjaXR5OiAgICAgICAgICAgICAgICAgICAuOSAhZGVmYXVsdDtcclxuLy8gJHRvb2x0aXAtcGFkZGluZy15OiAgICAgICAgICAgICAgICAgLjI1cmVtICFkZWZhdWx0O1xyXG4vLyAkdG9vbHRpcC1wYWRkaW5nLXg6ICAgICAgICAgICAgICAgICAuNXJlbSAhZGVmYXVsdDtcclxuLy8gJHRvb2x0aXAtbWFyZ2luOiAgICAgICAgICAgICAgICAgICAgMCAhZGVmYXVsdDtcclxuXHJcbi8vICR0b29sdGlwLWFycm93LXdpZHRoOiAgICAgICAgICAgICAgIC44cmVtICFkZWZhdWx0O1xyXG4vLyAkdG9vbHRpcC1hcnJvdy1oZWlnaHQ6ICAgICAgICAgICAgICAuNHJlbSAhZGVmYXVsdDtcclxuLy8gJHRvb2x0aXAtYXJyb3ctY29sb3I6ICAgICAgICAgICAgICAgJHRvb2x0aXAtYmcgIWRlZmF1bHQ7XHJcblxyXG4vLyAvLyBGb3JtIHRvb2x0aXBzIG11c3QgY29tZSBhZnRlciByZWd1bGFyIHRvb2x0aXBzXHJcbi8vICRmb3JtLWZlZWRiYWNrLXRvb2x0aXAtcGFkZGluZy15OiAgICAgJHRvb2x0aXAtcGFkZGluZy15ICFkZWZhdWx0O1xyXG4vLyAkZm9ybS1mZWVkYmFjay10b29sdGlwLXBhZGRpbmcteDogICAgICR0b29sdGlwLXBhZGRpbmcteCAhZGVmYXVsdDtcclxuLy8gJGZvcm0tZmVlZGJhY2stdG9vbHRpcC1mb250LXNpemU6ICAgICAkdG9vbHRpcC1mb250LXNpemUgIWRlZmF1bHQ7XHJcbi8vICRmb3JtLWZlZWRiYWNrLXRvb2x0aXAtbGluZS1oZWlnaHQ6ICAgJGxpbmUtaGVpZ2h0LWJhc2UgIWRlZmF1bHQ7XHJcbi8vICRmb3JtLWZlZWRiYWNrLXRvb2x0aXAtb3BhY2l0eTogICAgICAgJHRvb2x0aXAtb3BhY2l0eSAhZGVmYXVsdDtcclxuLy8gJGZvcm0tZmVlZGJhY2stdG9vbHRpcC1ib3JkZXItcmFkaXVzOiAkdG9vbHRpcC1ib3JkZXItcmFkaXVzICFkZWZhdWx0O1xyXG5cclxuLy8gLy8gUG9wb3ZlcnNcclxuXHJcbiRwb3BvdmVyLWZvbnQtc2l6ZTogJGZvbnQtc2l6ZS1zbSAhZGVmYXVsdDtcclxuJHBvcG92ZXItYmc6ICR3aGl0ZSAhZGVmYXVsdDtcclxuJHBvcG92ZXItbWF4LXdpZHRoOiAyNDZweCAhZGVmYXVsdDtcclxuJHBvcG92ZXItYm9yZGVyLXdpZHRoOiAwO1xyXG4kcG9wb3Zlci1ib3JkZXItY29sb3I6IHJnYmEoJGJsYWNrLCAwLjIpICFkZWZhdWx0O1xyXG4kcG9wb3Zlci1ib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cy1sZyAhZGVmYXVsdDtcclxuJHBvcG92ZXItaW5uZXItYm9yZGVyLXJhZGl1czogc3VidHJhY3QoXHJcbiAgJHBvcG92ZXItYm9yZGVyLXJhZGl1cyxcclxuICAkcG9wb3Zlci1ib3JkZXItd2lkdGhcclxuKSAhZGVmYXVsdDtcclxuJHBvcG92ZXItYm94LXNoYWRvdzogJGJveC1zaGFkb3cteGwgIWRlZmF1bHQ7XHJcblxyXG4vLyAkcG9wb3Zlci1oZWFkZXItYmc6ICAgICAgICAgICAgICAgICBkYXJrZW4oJHBvcG92ZXItYmcsIDMlKSAhZGVmYXVsdDtcclxuLy8gJHBvcG92ZXItaGVhZGVyLWNvbG9yOiAgICAgICAgICAgICAgJGhlYWRpbmdzLWNvbG9yICFkZWZhdWx0O1xyXG4kcG9wb3Zlci1oZWFkZXItcGFkZGluZy15OiAwLjc1cmVtO1xyXG4kcG9wb3Zlci1oZWFkZXItcGFkZGluZy14OiAxcmVtO1xyXG5cclxuLy8gJHBvcG92ZXItYm9keS1jb2xvcjogICAgICAgICAgICAgICAgJGJvZHktY29sb3IgIWRlZmF1bHQ7XHJcbiRwb3BvdmVyLWJvZHktcGFkZGluZy15OiAkcG9wb3Zlci1oZWFkZXItcGFkZGluZy15O1xyXG4kcG9wb3Zlci1ib2R5LXBhZGRpbmcteDogJHBvcG92ZXItaGVhZGVyLXBhZGRpbmcteDtcclxuXHJcbi8vICRwb3BvdmVyLWFycm93LXdpZHRoOiAgICAgICAgICAgICAgIDFyZW0gIWRlZmF1bHQ7XHJcbi8vICRwb3BvdmVyLWFycm93LWhlaWdodDogICAgICAgICAgICAgIC41cmVtICFkZWZhdWx0O1xyXG4vLyAkcG9wb3Zlci1hcnJvdy1jb2xvcjogICAgICAgICAgICAgICAkcG9wb3Zlci1iZyAhZGVmYXVsdDtcclxuXHJcbi8vICRwb3BvdmVyLWFycm93LW91dGVyLWNvbG9yOiAgICAgICAgIGZhZGUtaW4oJHBvcG92ZXItYm9yZGVyLWNvbG9yLCAuMDUpICFkZWZhdWx0O1xyXG5cclxuLy8gLy8gVG9hc3RzXHJcblxyXG4vLyAkdG9hc3QtbWF4LXdpZHRoOiAgICAgICAgICAgICAgICAgICAzNTBweCAhZGVmYXVsdDtcclxuLy8gJHRvYXN0LXBhZGRpbmcteDogICAgICAgICAgICAgICAgICAgLjc1cmVtICFkZWZhdWx0O1xyXG4vLyAkdG9hc3QtcGFkZGluZy15OiAgICAgICAgICAgICAgICAgICAuMjVyZW0gIWRlZmF1bHQ7XHJcbi8vICR0b2FzdC1mb250LXNpemU6ICAgICAgICAgICAgICAgICAgIC44NzVyZW0gIWRlZmF1bHQ7XHJcbi8vICR0b2FzdC1jb2xvcjogICAgICAgICAgICAgICAgICAgICAgIG51bGwgIWRlZmF1bHQ7XHJcbi8vICR0b2FzdC1iYWNrZ3JvdW5kLWNvbG9yOiAgICAgICAgICAgIHJnYmEoJHdoaXRlLCAuODUpICFkZWZhdWx0O1xyXG4vLyAkdG9hc3QtYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICAgICAxcHggIWRlZmF1bHQ7XHJcbi8vICR0b2FzdC1ib3JkZXItY29sb3I6ICAgICAgICAgICAgICAgIHJnYmEoMCwgMCwgMCwgLjEpICFkZWZhdWx0O1xyXG4vLyAkdG9hc3QtYm9yZGVyLXJhZGl1czogICAgICAgICAgICAgICAuMjVyZW0gIWRlZmF1bHQ7XHJcbi8vICR0b2FzdC1ib3gtc2hhZG93OiAgICAgICAgICAgICAgICAgIDAgLjI1cmVtIC43NXJlbSByZ2JhKCRibGFjaywgLjEpICFkZWZhdWx0O1xyXG5cclxuLy8gJHRvYXN0LWhlYWRlci1jb2xvcjogICAgICAgICAgICAgICAgJGdyYXktNjAwICFkZWZhdWx0O1xyXG4vLyAkdG9hc3QtaGVhZGVyLWJhY2tncm91bmQtY29sb3I6ICAgICByZ2JhKCR3aGl0ZSwgLjg1KSAhZGVmYXVsdDtcclxuLy8gJHRvYXN0LWhlYWRlci1ib3JkZXItY29sb3I6ICAgICAgICAgcmdiYSgwLCAwLCAwLCAuMDUpICFkZWZhdWx0O1xyXG5cclxuLy8gLy8gQmFkZ2VzXHJcblxyXG4kYmFkZ2UtZm9udC1zaXplOiByZW15KDEyKTtcclxuJGJhZGdlLWZvbnQtd2VpZ2h0OiA1MDA7XHJcbi8vICRiYWRnZS1wYWRkaW5nLXk6ICAgICAgICAgICAgICAgICAgIDAuMjVlbSAhZGVmYXVsdDtcclxuJGJhZGdlLXBhZGRpbmcteDogMC41cmVtO1xyXG4kYmFkZ2UtYm9yZGVyLXJhZGl1czogJGJvcmRlci1yYWRpdXMtbWQ7XHJcblxyXG4vLyAkYmFkZ2UtdHJhbnNpdGlvbjogICAgICAgICAgICAgICAgICAkYnRuLXRyYW5zaXRpb24gIWRlZmF1bHQ7XHJcbi8vICRiYWRnZS1mb2N1cy13aWR0aDogICAgICAgICAgICAgICAgICRpbnB1dC1idG4tZm9jdXMtd2lkdGggIWRlZmF1bHQ7XHJcblxyXG4vLyAkYmFkZ2UtcGlsbC1wYWRkaW5nLXg6ICAgICAgICAgICAgICAuNmVtICFkZWZhdWx0O1xyXG4vLyAvLyBVc2UgYSBoaWdoZXIgdGhhbiBub3JtYWwgdmFsdWUgdG8gZW5zdXJlIGNvbXBsZXRlbHkgcm91bmRlZCBlZGdlcyB3aGVuXHJcbi8vIC8vIGN1c3RvbWl6aW5nIHBhZGRpbmcgb3IgZm9udC1zaXplIG9uIGxhYmVscy5cclxuLy8gJGJhZGdlLXBpbGwtYm9yZGVyLXJhZGl1czogICAgICAgICAgMTByZW0gIWRlZmF1bHQ7XHJcblxyXG4vLyBNb2RhbHNcclxuXHJcbi8vIFBhZGRpbmcgYXBwbGllZCB0byB0aGUgbW9kYWwgYm9keVxyXG4kbW9kYWwtaW5uZXItcGFkZGluZzogMC43NXJlbTtcclxuXHJcbi8vIE1hcmdpbiBiZXR3ZWVuIGVsZW1lbnRzIGluIGZvb3RlciwgbXVzdCBiZSBsb3dlciB0aGFuIG9yIGVxdWFsIHRvIDIgKiAkbW9kYWwtaW5uZXItcGFkZGluZ1xyXG4vLyAkbW9kYWwtZm9vdGVyLW1hcmdpbi1iZXR3ZWVuOiAgICAgICAuNXJlbSAhZGVmYXVsdDtcclxuXHJcbi8vICRtb2RhbC1kaWFsb2ctbWFyZ2luOiAgICAgICAgICAgICAgIC41cmVtICFkZWZhdWx0O1xyXG4vLyAkbW9kYWwtZGlhbG9nLW1hcmdpbi15LXNtLXVwOiAgICAgICAxLjc1cmVtICFkZWZhdWx0O1xyXG5cclxuJG1vZGFsLXRpdGxlLWxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtYmFzZTtcclxuXHJcbiRtb2RhbC1jb250ZW50LWNvbG9yOiBudWxsO1xyXG4kbW9kYWwtY29udGVudC1iZzogJHdoaXRlO1xyXG4kbW9kYWwtY29udGVudC1ib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xyXG4kbW9kYWwtY29udGVudC1ib3JkZXItd2lkdGg6IDA7XHJcbiRtb2RhbC1jb250ZW50LWJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzO1xyXG4kbW9kYWwtY29udGVudC1pbm5lci1ib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cztcclxuJG1vZGFsLWNvbnRlbnQtYm94LXNoYWRvdy14czogbm9uZTtcclxuJG1vZGFsLWNvbnRlbnQtYm94LXNoYWRvdy1zbS11cDogJGJvcmRlci1yYWRpdXM7XHJcblxyXG4kbW9kYWwtYmFja2Ryb3AtYmc6ICRibGFjaztcclxuJG1vZGFsLWJhY2tkcm9wLW9wYWNpdHk6IDAuNztcclxuJG1vZGFsLWhlYWRlci1ib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xyXG4kbW9kYWwtZm9vdGVyLWJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiRtb2RhbC1oZWFkZXItYm9yZGVyLXdpZHRoOiAwO1xyXG4kbW9kYWwtZm9vdGVyLWJvcmRlci13aWR0aDogMDtcclxuJG1vZGFsLWhlYWRlci1wYWRkaW5nLXk6IDAuNzVyZW07XHJcbiRtb2RhbC1oZWFkZXItcGFkZGluZy14OiAxLjVyZW07XHJcbiRtb2RhbC1oZWFkZXItcGFkZGluZzogJG1vZGFsLWhlYWRlci1wYWRkaW5nLXkgJG1vZGFsLWhlYWRlci1wYWRkaW5nLXg7XHJcblxyXG4vLyAkbW9kYWwteGw6ICAgICAgICAgICAgICAgICAgICAgICAgICAxMTQwcHggIWRlZmF1bHQ7XHJcbiRtb2RhbC1sZzogMTA0NHB4O1xyXG4vLyAkbW9kYWwtbWQ6ICAgICAgICAgICAgICAgICAgICAgICAgICA1MDBweCAhZGVmYXVsdDtcclxuLy8gJG1vZGFsLXNtOiAgICAgICAgICAgICAgICAgICAgICAgICAgMzAwcHggIWRlZmF1bHQ7XHJcblxyXG4vLyAkbW9kYWwtZmFkZS10cmFuc2Zvcm06ICAgICAgICAgICAgICB0cmFuc2xhdGUoMCwgLTUwcHgpICFkZWZhdWx0O1xyXG4vLyAkbW9kYWwtc2hvdy10cmFuc2Zvcm06ICAgICAgICAgICAgICBub25lICFkZWZhdWx0O1xyXG4vLyAkbW9kYWwtdHJhbnNpdGlvbjogICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0gLjNzIGVhc2Utb3V0ICFkZWZhdWx0O1xyXG4vLyAkbW9kYWwtc2NhbGUtdHJhbnNmb3JtOiAgICAgICAgICAgICBzY2FsZSgxLjAyKSAhZGVmYXVsdDtcclxuXHJcbi8vIC8vIEFsZXJ0c1xyXG4vLyAvL1xyXG4vLyAvLyBEZWZpbmUgYWxlcnQgY29sb3JzLCBib3JkZXIgcmFkaXVzLCBhbmQgcGFkZGluZy5cclxuXHJcbi8vICRhbGVydC1wYWRkaW5nLXk6ICAgICAgICAgICAgICAgICAgIC43NXJlbSAhZGVmYXVsdDtcclxuLy8gJGFsZXJ0LXBhZGRpbmcteDogICAgICAgICAgICAgICAgICAgMS4yNXJlbSAhZGVmYXVsdDtcclxuLy8gJGFsZXJ0LW1hcmdpbi1ib3R0b206ICAgICAgICAgICAgICAgMXJlbSAhZGVmYXVsdDtcclxuLy8gJGFsZXJ0LWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAgICAgJGJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XHJcbi8vICRhbGVydC1saW5rLWZvbnQtd2VpZ2h0OiAgICAgICAgICAgICRmb250LXdlaWdodC1ib2xkICFkZWZhdWx0O1xyXG4vLyAkYWxlcnQtYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICAgICAkYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xyXG5cclxuLy8gJGFsZXJ0LWJnLWxldmVsOiAgICAgICAgICAgICAgICAgICAgLTEwICFkZWZhdWx0O1xyXG4vLyAkYWxlcnQtYm9yZGVyLWxldmVsOiAgICAgICAgICAgICAgICAtOSAhZGVmYXVsdDtcclxuLy8gJGFsZXJ0LWNvbG9yLWxldmVsOiAgICAgICAgICAgICAgICAgNiAhZGVmYXVsdDtcclxuXHJcbi8vIC8vIFByb2dyZXNzIGJhcnNcclxuXHJcbi8vICRwcm9ncmVzcy1oZWlnaHQ6ICAgICAgICAgICAgICAgICAgIDFyZW0gIWRlZmF1bHQ7XHJcbi8vICRwcm9ncmVzcy1mb250LXNpemU6ICAgICAgICAgICAgICAgICRmb250LXNpemUtYmFzZSAqIC43NSAhZGVmYXVsdDtcclxuLy8gJHByb2dyZXNzLWJnOiAgICAgICAgICAgICAgICAgICAgICAgJGdyYXktMjAwICFkZWZhdWx0O1xyXG4vLyAkcHJvZ3Jlc3MtYm9yZGVyLXJhZGl1czogICAgICAgICAgICAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcclxuLy8gJHByb2dyZXNzLWJveC1zaGFkb3c6ICAgICAgICAgICAgICAgaW5zZXQgMCAuMXJlbSAuMXJlbSByZ2JhKCRibGFjaywgLjEpICFkZWZhdWx0O1xyXG4vLyAkcHJvZ3Jlc3MtYmFyLWNvbG9yOiAgICAgICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XHJcbi8vICRwcm9ncmVzcy1iYXItYmc6ICAgICAgICAgICAgICAgICAgIHRoZW1lLWNvbG9yKFwicHJpbWFyeVwiKSAhZGVmYXVsdDtcclxuLy8gJHByb2dyZXNzLWJhci1hbmltYXRpb24tdGltaW5nOiAgICAgMXMgbGluZWFyIGluZmluaXRlICFkZWZhdWx0O1xyXG4vLyAkcHJvZ3Jlc3MtYmFyLXRyYW5zaXRpb246ICAgICAgICAgICB3aWR0aCAuNnMgZWFzZSAhZGVmYXVsdDtcclxuXHJcbi8vIC8vIExpc3QgZ3JvdXBcclxuXHJcbi8vICRsaXN0LWdyb3VwLWNvbG9yOiAgICAgICAgICAgICAgICAgIG51bGwgIWRlZmF1bHQ7XHJcbi8vICRsaXN0LWdyb3VwLWJnOiAgICAgICAgICAgICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcclxuLy8gJGxpc3QtZ3JvdXAtYm9yZGVyLWNvbG9yOiAgICAgICAgICAgcmdiYSgkYmxhY2ssIC4xMjUpICFkZWZhdWx0O1xyXG4kbGlzdC1ncm91cC1ib3JkZXItd2lkdGg6IDBweDtcclxuJGxpc3QtZ3JvdXAtYm9yZGVyLXJhZGl1czogJGJvcmRlci1yYWRpdXM7XHJcblxyXG4vLyAkbGlzdC1ncm91cC1pdGVtLXBhZGRpbmcteTogICAgICAgICAuNzVyZW0gIWRlZmF1bHQ7XHJcbi8vICRsaXN0LWdyb3VwLWl0ZW0tcGFkZGluZy14OiAgICAgICAgIDEuMjVyZW0gIWRlZmF1bHQ7XHJcblxyXG4vLyAkbGlzdC1ncm91cC1ob3Zlci1iZzogICAgICAgICAgICAgICAkZ3JheS0xMDAgIWRlZmF1bHQ7XHJcbi8vICRsaXN0LWdyb3VwLWFjdGl2ZS1jb2xvcjogICAgICAgICAgICRjb21wb25lbnQtYWN0aXZlLWNvbG9yICFkZWZhdWx0O1xyXG4vLyAkbGlzdC1ncm91cC1hY3RpdmUtYmc6ICAgICAgICAgICAgICAkY29tcG9uZW50LWFjdGl2ZS1iZyAhZGVmYXVsdDtcclxuLy8gJGxpc3QtZ3JvdXAtYWN0aXZlLWJvcmRlci1jb2xvcjogICAgJGxpc3QtZ3JvdXAtYWN0aXZlLWJnICFkZWZhdWx0O1xyXG5cclxuLy8gJGxpc3QtZ3JvdXAtZGlzYWJsZWQtY29sb3I6ICAgICAgICAgJGdyYXktNjAwICFkZWZhdWx0O1xyXG4vLyAkbGlzdC1ncm91cC1kaXNhYmxlZC1iZzogICAgICAgICAgICAkbGlzdC1ncm91cC1iZyAhZGVmYXVsdDtcclxuXHJcbi8vICRsaXN0LWdyb3VwLWFjdGlvbi1jb2xvcjogICAgICAgICAgICRncmF5LTcwMCAhZGVmYXVsdDtcclxuLy8gJGxpc3QtZ3JvdXAtYWN0aW9uLWhvdmVyLWNvbG9yOiAgICAgJGxpc3QtZ3JvdXAtYWN0aW9uLWNvbG9yICFkZWZhdWx0O1xyXG5cclxuLy8gJGxpc3QtZ3JvdXAtYWN0aW9uLWFjdGl2ZS1jb2xvcjogICAgJGJvZHktY29sb3IgIWRlZmF1bHQ7XHJcbi8vICRsaXN0LWdyb3VwLWFjdGlvbi1hY3RpdmUtYmc6ICAgICAgICRncmF5LTIwMCAhZGVmYXVsdDtcclxuXHJcbi8vIC8vIEltYWdlIHRodW1ibmFpbHNcclxuXHJcbi8vICR0aHVtYm5haWwtcGFkZGluZzogICAgICAgICAgICAgICAgIC4yNXJlbSAhZGVmYXVsdDtcclxuLy8gJHRodW1ibmFpbC1iZzogICAgICAgICAgICAgICAgICAgICAgJGJvZHktYmcgIWRlZmF1bHQ7XHJcbi8vICR0aHVtYm5haWwtYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICRib3JkZXItd2lkdGggIWRlZmF1bHQ7XHJcbi8vICR0aHVtYm5haWwtYm9yZGVyLWNvbG9yOiAgICAgICAgICAgICRncmF5LTMwMCAhZGVmYXVsdDtcclxuLy8gJHRodW1ibmFpbC1ib3JkZXItcmFkaXVzOiAgICAgICAgICAgJGJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XHJcbi8vICR0aHVtYm5haWwtYm94LXNoYWRvdzogICAgICAgICAgICAgIDAgMXB4IDJweCByZ2JhKCRibGFjaywgLjA3NSkgIWRlZmF1bHQ7XHJcblxyXG4vLyAvLyBGaWd1cmVzXHJcblxyXG4vLyAkZmlndXJlLWNhcHRpb24tZm9udC1zaXplOiAgICAgICAgICA5MCUgIWRlZmF1bHQ7XHJcbi8vICRmaWd1cmUtY2FwdGlvbi1jb2xvcjogICAgICAgICAgICAgICRncmF5LTYwMCAhZGVmYXVsdDtcclxuXHJcbi8vIC8vIEJyZWFkY3J1bWJzXHJcblxyXG4vLyAkYnJlYWRjcnVtYi1mb250LXNpemU6ICAgICAgICAgICAgICBudWxsICFkZWZhdWx0O1xyXG5cclxuLy8gJGJyZWFkY3J1bWItcGFkZGluZy15OiAgICAgICAgICAgICAgLjc1cmVtICFkZWZhdWx0O1xyXG4vLyAkYnJlYWRjcnVtYi1wYWRkaW5nLXg6ICAgICAgICAgICAgICAxcmVtICFkZWZhdWx0O1xyXG4vLyAkYnJlYWRjcnVtYi1pdGVtLXBhZGRpbmc6ICAgICAgICAgICAuNXJlbSAhZGVmYXVsdDtcclxuXHJcbi8vICRicmVhZGNydW1iLW1hcmdpbi1ib3R0b206ICAgICAgICAgIDFyZW0gIWRlZmF1bHQ7XHJcblxyXG4vLyAkYnJlYWRjcnVtYi1iZzogICAgICAgICAgICAgICAgICAgICAkZ3JheS0yMDAgIWRlZmF1bHQ7XHJcbi8vICRicmVhZGNydW1iLWRpdmlkZXItY29sb3I6ICAgICAgICAgICRncmF5LTYwMCAhZGVmYXVsdDtcclxuLy8gJGJyZWFkY3J1bWItYWN0aXZlLWNvbG9yOiAgICAgICAgICAgJGdyYXktNjAwICFkZWZhdWx0O1xyXG4vLyAkYnJlYWRjcnVtYi1kaXZpZGVyOiAgICAgICAgICAgICAgICBxdW90ZShcIi9cIikgIWRlZmF1bHQ7XHJcblxyXG4vLyAkYnJlYWRjcnVtYi1ib3JkZXItcmFkaXVzOiAgICAgICAgICAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcclxuXHJcbi8vIC8vIENhcm91c2VsXHJcblxyXG4vLyAkY2Fyb3VzZWwtY29udHJvbC1jb2xvcjogICAgICAgICAgICAgJHdoaXRlICFkZWZhdWx0O1xyXG4vLyAkY2Fyb3VzZWwtY29udHJvbC13aWR0aDogICAgICAgICAgICAgMTUlICFkZWZhdWx0O1xyXG4vLyAkY2Fyb3VzZWwtY29udHJvbC1vcGFjaXR5OiAgICAgICAgICAgLjUgIWRlZmF1bHQ7XHJcbi8vICRjYXJvdXNlbC1jb250cm9sLWhvdmVyLW9wYWNpdHk6ICAgICAuOSAhZGVmYXVsdDtcclxuLy8gJGNhcm91c2VsLWNvbnRyb2wtdHJhbnNpdGlvbjogICAgICAgIG9wYWNpdHkgLjE1cyBlYXNlICFkZWZhdWx0O1xyXG5cclxuLy8gJGNhcm91c2VsLWluZGljYXRvci13aWR0aDogICAgICAgICAgIDMwcHggIWRlZmF1bHQ7XHJcbi8vICRjYXJvdXNlbC1pbmRpY2F0b3ItaGVpZ2h0OiAgICAgICAgICAzcHggIWRlZmF1bHQ7XHJcbi8vICRjYXJvdXNlbC1pbmRpY2F0b3ItaGl0LWFyZWEtaGVpZ2h0OiAxMHB4ICFkZWZhdWx0O1xyXG4vLyAkY2Fyb3VzZWwtaW5kaWNhdG9yLXNwYWNlcjogICAgICAgICAgM3B4ICFkZWZhdWx0O1xyXG4vLyAkY2Fyb3VzZWwtaW5kaWNhdG9yLWFjdGl2ZS1iZzogICAgICAgJHdoaXRlICFkZWZhdWx0O1xyXG4vLyAkY2Fyb3VzZWwtaW5kaWNhdG9yLXRyYW5zaXRpb246ICAgICAgb3BhY2l0eSAuNnMgZWFzZSAhZGVmYXVsdDtcclxuXHJcbi8vICRjYXJvdXNlbC1jYXB0aW9uLXdpZHRoOiAgICAgICAgICAgICA3MCUgIWRlZmF1bHQ7XHJcbi8vICRjYXJvdXNlbC1jYXB0aW9uLWNvbG9yOiAgICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XHJcblxyXG4vLyAkY2Fyb3VzZWwtY29udHJvbC1pY29uLXdpZHRoOiAgICAgICAgMjBweCAhZGVmYXVsdDtcclxuXHJcbi8vICRjYXJvdXNlbC1jb250cm9sLXByZXYtaWNvbi1iZzogICAgICB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsPHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIGZpbGw9JyN7JGNhcm91c2VsLWNvbnRyb2wtY29sb3J9JyB3aWR0aD0nOCcgaGVpZ2h0PSc4JyB2aWV3Qm94PScwIDAgOCA4Jz48cGF0aCBkPSdNNS4yNSAwbC00IDQgNCA0IDEuNS0xLjVMNC4yNSA0bDIuNS0yLjVMNS4yNSAweicvPjwvc3ZnPlwiKSAhZGVmYXVsdDtcclxuLy8gJGNhcm91c2VsLWNvbnRyb2wtbmV4dC1pY29uLWJnOiAgICAgIHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCw8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgZmlsbD0nI3skY2Fyb3VzZWwtY29udHJvbC1jb2xvcn0nIHdpZHRoPSc4JyBoZWlnaHQ9JzgnIHZpZXdCb3g9JzAgMCA4IDgnPjxwYXRoIGQ9J00yLjc1IDBsLTEuNSAxLjVMMy43NSA0bC0yLjUgMi41TDIuNzUgOGw0LTQtNC00eicvPjwvc3ZnPlwiKSAhZGVmYXVsdDtcclxuXHJcbi8vICRjYXJvdXNlbC10cmFuc2l0aW9uLWR1cmF0aW9uOiAgICAgICAuNnMgIWRlZmF1bHQ7XHJcbi8vICRjYXJvdXNlbC10cmFuc2l0aW9uOiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0gJGNhcm91c2VsLXRyYW5zaXRpb24tZHVyYXRpb24gZWFzZS1pbi1vdXQgIWRlZmF1bHQ7IC8vIERlZmluZSB0cmFuc2Zvcm0gdHJhbnNpdGlvbiBmaXJzdCBpZiB1c2luZyBtdWx0aXBsZSB0cmFuc2l0aW9ucyAoZS5nLiwgYHRyYW5zZm9ybSAycyBlYXNlLCBvcGFjaXR5IC41cyBlYXNlLW91dGApXHJcblxyXG4vLyAvLyBTcGlubmVyc1xyXG5cclxuLy8gJHNwaW5uZXItd2lkdGg6ICAgICAgICAgMnJlbSAhZGVmYXVsdDtcclxuLy8gJHNwaW5uZXItaGVpZ2h0OiAgICAgICAgJHNwaW5uZXItd2lkdGggIWRlZmF1bHQ7XHJcbi8vICRzcGlubmVyLWJvcmRlci13aWR0aDogIC4yNWVtICFkZWZhdWx0O1xyXG5cclxuLy8gJHNwaW5uZXItd2lkdGgtc206ICAgICAgICAxcmVtICFkZWZhdWx0O1xyXG4vLyAkc3Bpbm5lci1oZWlnaHQtc206ICAgICAgICRzcGlubmVyLXdpZHRoLXNtICFkZWZhdWx0O1xyXG4vLyAkc3Bpbm5lci1ib3JkZXItd2lkdGgtc206IC4yZW0gIWRlZmF1bHQ7XHJcblxyXG4vLyAvLyBDbG9zZVxyXG5cclxuLy8gJGNsb3NlLWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICogMS41ICFkZWZhdWx0O1xyXG4vLyAkY2xvc2UtZm9udC13ZWlnaHQ6ICAgICAgICAgICAgICAgICAkZm9udC13ZWlnaHQtYm9sZCAhZGVmYXVsdDtcclxuLy8gJGNsb3NlLWNvbG9yOiAgICAgICAgICAgICAgICAgICAgICAgJGJsYWNrICFkZWZhdWx0O1xyXG4vLyAkY2xvc2UtdGV4dC1zaGFkb3c6ICAgICAgICAgICAgICAgICAwIDFweCAwICR3aGl0ZSAhZGVmYXVsdDtcclxuXHJcbi8vIC8vIENvZGVcclxuXHJcbi8vICRjb2RlLWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgICAgIDg3LjUlICFkZWZhdWx0O1xyXG4vLyAkY29kZS1jb2xvcjogICAgICAgICAgICAgICAgICAgICAgICAkcGluayAhZGVmYXVsdDtcclxuXHJcbi8vICRrYmQtcGFkZGluZy15OiAgICAgICAgICAgICAgICAgICAgIC4ycmVtICFkZWZhdWx0O1xyXG4vLyAka2JkLXBhZGRpbmcteDogICAgICAgICAgICAgICAgICAgICAuNHJlbSAhZGVmYXVsdDtcclxuLy8gJGtiZC1mb250LXNpemU6ICAgICAgICAgICAgICAgICAgICAgJGNvZGUtZm9udC1zaXplICFkZWZhdWx0O1xyXG4vLyAka2JkLWNvbG9yOiAgICAgICAgICAgICAgICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XHJcbi8vICRrYmQtYmc6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICRncmF5LTIwMCAhZGVmYXVsdDtcclxuXHJcbi8vICRwcmUtY29sb3I6ICAgICAgICAgICAgICAgICAgICAgICAgICRncmF5LTIwMCAhZGVmYXVsdDtcclxuLy8gJHByZS1zY3JvbGxhYmxlLW1heC1oZWlnaHQ6ICAgICAgICAgMzQwcHggIWRlZmF1bHQ7XHJcblxyXG4vLyAvLyBVdGlsaXRpZXNcclxuXHJcbi8vICRkaXNwbGF5czogbm9uZSwgaW5saW5lLCBpbmxpbmUtYmxvY2ssIGJsb2NrLCB0YWJsZSwgdGFibGUtcm93LCB0YWJsZS1jZWxsLCBmbGV4LCBpbmxpbmUtZmxleCAhZGVmYXVsdDtcclxuLy8gJG92ZXJmbG93czogYXV0bywgaGlkZGVuICFkZWZhdWx0O1xyXG4vLyAkcG9zaXRpb25zOiBzdGF0aWMsIHJlbGF0aXZlLCBhYnNvbHV0ZSwgZml4ZWQsIHN0aWNreSAhZGVmYXVsdDtcclxuXHJcbi8vIC8vIFByaW50aW5nXHJcblxyXG4vLyAkcHJpbnQtcGFnZS1zaXplOiAgICAgICAgICAgICAgICAgICBhMyAhZGVmYXVsdDtcclxuLy8gJHByaW50LWJvZHktbWluLXdpZHRoOiAgICAgICAgICAgICAgbWFwLWdldCgkZ3JpZC1icmVha3BvaW50cywgXCJsZ1wiKSAhZGVmYXVsdDtcclxuXHJcbi8vIEp5c2FuIFZhcmlhYmxlc1xyXG5cclxuQGZ1bmN0aW9uIHNwYWNlKCRzaXplKSB7XHJcbiAgQHJldHVybiBtYXAtZ2V0KCRtYXA6ICRzcGFjZXJzLCAka2V5OiAkc2l6ZSk7XHJcbn1cclxuXHJcbiRoZWFkZXItaGVpZ2h0OiA2MnB4O1xyXG4kaGVhZGVyLWhlaWdodC1tZDogMTAwcHg7XHJcbiRoZWFkZXItd2lkdGg6IDI4MHB4O1xyXG5cclxuJGJ0bi1taW4td2lkdGg6IDE2NHB4O1xyXG5cclxuLy8gSi1pbnB1dFxyXG4kai1pbnB1dC1mb250LXNpemU6IDFyZW07XHJcbiRqLWlucHV0LWZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHktYmFzZTtcclxuJGotaW5wdXQtZm9udC1zdHlsZTogbm9ybWFsO1xyXG4kai1pbnB1dC1mb250LXdlaWdodDogJGZvbnQtd2VpZ2h0LWJhc2U7XHJcblxyXG4kai1pbnB1dC1saW5lLWhlaWdodDogMjBweDtcclxuJGotaW5wdXQtcGFkZGluZy15OiAxNy41cHg7XHJcbiRqLWlucHV0LXBhZGRpbmcteDogMjBweDtcclxuXHJcbiRqLWlucHV0LWJvcmRlci13aWR0aDogMXB4O1xyXG4kai1pbnB1dC1ib3JkZXItcmFkaXVzOiA4cHg7XHJcbiRqLWlucHV0LWJvcmRlci1zdHlsZTogc29saWQ7XHJcblxyXG4kai1pbnB1dC1iYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XHJcbiRqLWlucHV0LWxhYmVsLWNvbG9yOiAkZ3JheS1kYXJrO1xyXG4kai1pbnB1dC1ib3JkZXItY29sb3I6ICRncmF5LWxpZ2h0O1xyXG4kai1pbnB1dC10ZXh0LWNvbG9yOiAkYmxhY2s7XHJcbiRqLWlucHV0LW1hc2stY29sb3I6ICRncmF5O1xyXG4kai1pbnB1dC1pY29uLWNvbG9yOiAkb3JhbmdlO1xyXG4kai1pbnB1dC1oZWxwZXItY29sb3I6ICRncmF5LWRhcms7XHJcblxyXG4kai1pbnB1dC1ib3JkZXItY29sb3ItLWFjdGl2ZTogJHByaW1hcnk7XHJcbiRqLWlucHV0LWxhYmVsLWNvbG9yLS1hY3RpdmU6ICRwcmltYXJ5O1xyXG4kai1pbnB1dC10ZXh0LWNvbG9yLS1hY3RpdmU6ICRwcmltYXJ5O1xyXG5cclxuJGotaW5wdXQtYmFja2dyb3VuZC1jb2xvci0tZXJyb3I6ICRyZWQtbGlnaHQ7XHJcbiRqLWlucHV0LWhlbHBlci1jb2xvci0tZXJyb3I6ICRyZWQ7XHJcbiRqLWlucHV0LWJvcmRlci1jb2xvci0tZXJyb3I6ICRyZWQ7XHJcblxyXG4kai1pbnB1dC1iYWNrZ3JvdW5kLWNvbG9yLS1kaXNhYmxlZDogJGlucHV0LWRpc2FibGVkLWJnOyAvLyBmcm9tIGZpZ21hIHByaW1pdGl2ZXMgc2hvdWxkIGJlIGdyYXktMjAwXHJcblxyXG4kai1pbnB1dC1sYWJlbC1wb3NpdGlvbi10b3A6ICRqLWlucHV0LXBhZGRpbmcteSArICRqLWlucHV0LWJvcmRlci13aWR0aDtcclxuJGotaW5wdXQtbGFiZWwtcG9zaXRpb24tdG9wLWFjdGl2ZTogMTBweDtcclxuJGotaW5wdXQtbGluay1wb3NpdGlvbi10b3A6IDE2cHg7XHJcbiRqLWlucHV0LWxhYmVsLXBvc2l0aW9uLWxlZnQ6ICRqLWlucHV0LXBhZGRpbmcteCArICRqLWlucHV0LWJvcmRlci13aWR0aDtcclxuJGotaW5wdXQtbGFiZWwtbGluZS1oZWlnaHQ6ICRqLWlucHV0LWxpbmUtaGVpZ2h0O1xyXG4kai1pbnB1dC1sYWJlbC1jb2xvcjogJGdyYXktZGFyaztcclxuXHJcbiRqLWlucHV0LXBhZGRpbmctdG9wOiAyN3B4O1xyXG4kai1pbnB1dC1wYWRkaW5nLWJvdHRvbTogMTBweDtcclxuJGotaW5wdXQtbWFyZ2luLWJvdHRvbTogMTZweDtcclxuJGotaW5wdXQtcGxhY2Vob2xkZXItY29sb3I6ICRncmF5O1xyXG4kai1pbnB1dC1wbGFjZWhvbGRlci1wb3NpdGlvbjogJGotaW5wdXQtcGFkZGluZy10b3AgKyAkai1pbnB1dC1ib3JkZXItd2lkdGg7XHJcbiRqLWlucHV0LWNoYXItbGVuZ3RoOiA4Ljk5cHg7XHJcblxyXG4kai1pbnB1dC1idXR0b24tcG9zaXRpb246IDIwcHg7XHJcbiRqLWlucHV0LXNoYWRvdy1wb3NpdGlvbjogJGotaW5wdXQtbGFiZWwtcG9zaXRpb24tbGVmdDtcclxuXHJcbiRqLWlucHV0LWxhYmVsLXotaW5kZXg6IDA7XHJcbiRqLWlucHV0LXNoYWRvdy16LWluZGV4OiAxO1xyXG4kai1pbnB1dC16LWluZGV4OiAyO1xyXG4kai1pbnB1dC1saW5rLXotaW5kZXg6IDM7XHJcbiRqLWlucHV0LWJ1dHRvbi16LWluZGV4OiA0O1xyXG5cclxuJGJveC1zaGFkb3ctdG8tdG9wLWxnOiAwIC0xcmVtIDNyZW0gcmdiYSgkYmxhY2ssIDAuMTc1KTtcclxuXHJcbiRlbmFibGUtcG9pbnRlci1jdXJzb3ItZm9yLWJ1dHRvbnM6IHRydWU7XHJcbiJdfQ== */";

/***/ }),

/***/ 31007:
/*!***********************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-group/statement2-group.component.scss?ngResource ***!
  \***********************************************************************************************************/
/***/ ((module) => {

module.exports = ":host {\n  display: block;\n  margin: 20px 0;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YXRlbWVudDItZ3JvdXAuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFBO0VBQ0EsY0FBQTtBQUNGIiwiZmlsZSI6InN0YXRlbWVudDItZ3JvdXAuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgbWFyZ2luOiAyMHB4IDA7XHJcbn1cclxuIl19 */";

/***/ }),

/***/ 82703:
/*!*************************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-header/statement2-header.component.scss?ngResource ***!
  \*************************************************************************************************************/
/***/ ((module) => {

module.exports = ":host {\n  display: grid;\n  padding-top: 24px;\n  grid-column-gap: 24px;\n  column-gap: 24px;\n  grid-template-columns: repeat(4, 1fr);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YXRlbWVudDItaGVhZGVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtFQUNBLGlCQUFBO0VBQ0EscUJBQUE7RUFBQSxnQkFBQTtFQUNBLHFDQUFBO0FBQ0YiLCJmaWxlIjoic3RhdGVtZW50Mi1oZWFkZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBwYWRkaW5nLXRvcDogMjRweDtcclxuICBjb2x1bW4tZ2FwOiAyNHB4O1xyXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDQsIDFmcik7XHJcbn1cclxuIl19 */";

/***/ }),

/***/ 34420:
/*!***************************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-loading/statement2-loading.component.scss?ngResource ***!
  \***************************************************************************************************************/
/***/ ((module) => {

module.exports = ".header {\n  display: grid;\n  padding-top: 24px;\n  grid-column-gap: 24px;\n  column-gap: 24px;\n  grid-template-columns: repeat(4, 1fr);\n}\n\n.transaction {\n  display: grid;\n  grid-column-gap: 24px;\n  column-gap: 24px;\n  grid-template-columns: 40px 160px 1fr;\n  margin: 32px 0;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YXRlbWVudDItbG9hZGluZy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQUE7RUFDQSxpQkFBQTtFQUNBLHFCQUFBO0VBQUEsZ0JBQUE7RUFDQSxxQ0FBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtFQUNBLHFCQUFBO0VBQUEsZ0JBQUE7RUFDQSxxQ0FBQTtFQUNBLGNBQUE7QUFDRiIsImZpbGUiOiJzdGF0ZW1lbnQyLWxvYWRpbmcuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaGVhZGVyIHtcclxuICBkaXNwbGF5OiBncmlkO1xyXG4gIHBhZGRpbmctdG9wOiAyNHB4O1xyXG4gIGNvbHVtbi1nYXA6IDI0cHg7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNCwgMWZyKTtcclxufVxyXG5cclxuLnRyYW5zYWN0aW9uIHtcclxuICBkaXNwbGF5OiBncmlkO1xyXG4gIGNvbHVtbi1nYXA6IDI0cHg7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA0MHB4IDE2MHB4IDFmcjtcclxuICBtYXJnaW46IDMycHggMDtcclxufVxyXG4iXX0= */";

/***/ }),

/***/ 45305:
/*!***********************************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-transaction/statement2-transaction.component.scss?ngResource ***!
  \***********************************************************************************************************************/
/***/ ((module) => {

module.exports = ":host {\n  display: grid;\n  grid-column-gap: 24px;\n  column-gap: 24px;\n  grid-template-columns: 40px 160px 1fr;\n  margin: 32px 0;\n}\n\n.transaction-icon {\n  color: #f6f7f8;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YXRlbWVudDItdHJhbnNhY3Rpb24uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0EscUJBQUE7RUFBQSxnQkFBQTtFQUNBLHFDQUFBO0VBQ0EsY0FBQTtBQUNGOztBQUVBO0VBQ0UsY0FBQTtBQUNGIiwiZmlsZSI6InN0YXRlbWVudDItdHJhbnNhY3Rpb24uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBjb2x1bW4tZ2FwOiAyNHB4O1xyXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNDBweCAxNjBweCAxZnI7XHJcbiAgbWFyZ2luOiAzMnB4IDA7XHJcbn1cclxuXHJcbi50cmFuc2FjdGlvbi1pY29uIHtcclxuICBjb2xvcjogI2Y2ZjdmODtcclxufVxyXG4iXX0= */";

/***/ }),

/***/ 67469:
/*!*************************************************************************!*\
  !*** ./src/app/helpers/statement2/statement2.component.scss?ngResource ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = ".details {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(246, 247, 248, 0.8);\n  z-index: 5000;\n}\n\n.details__close {\n  display: inline-block;\n  font-weight: 400;\n  color: #1a1c1f;\n  text-align: center;\n  vertical-align: middle;\n  cursor: pointer;\n  -webkit-user-select: none;\n          user-select: none;\n  background-color: transparent;\n  border: 1px solid transparent;\n  color: #666c72;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n}\n\n.details__content {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n  width: 25%;\n  min-width: 425px;\n  background: #f6f7f8;\n  box-shadow: 0px 24px 32px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 0px 1px rgba(0, 0, 0, 0.04);\n  border-radius: 12px 0px 0px 12px;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 73846:
/*!*********************************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-interests/deposit-interests.component.scss?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

module.exports = ":host {\n  flex-grow: 1;\n  background: #fff;\n}\n\n.loader {\n  display: grid;\n  grid-column-gap: 24px;\n  column-gap: 24px;\n  grid-template-columns: 40px 160px 1fr;\n  margin: 32px 0;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 97832:
/*!***********************************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-requisites/deposit-requisites.component.scss?ngResource ***!
  \***********************************************************************************************************/
/***/ ((module) => {

module.exports = ".deposit-info {\n  padding: 1rem;\n  margin: 0.5rem 0;\n  background: #fff;\n  border-radius: 0.75rem;\n  max-width: 435px;\n}\n\n.deposit-info + .deposit-info {\n  margin-top: 1rem;\n}\n\n.requisites__footer {\n  display: flex;\n  justify-content: space-between;\n}\n\n.requisites__button {\n  margin-top: 1rem;\n  display: flex;\n  justify-content: center;\n  min-width: calc(50% - 0.5rem);\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 35486:
/*!*********************************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-statement/deposit-statement.component.scss?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

module.exports = ":host {\n  flex-grow: 1;\n  background: #fff;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 44813:
/*!*************************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-terms/deposit-terms.component.scss?ngResource ***!
  \*************************************************************************************************/
/***/ ((module) => {

module.exports = ".deposit-info {\n  padding: 1rem;\n  margin: 0.5rem 0;\n  background: #fff;\n  border-radius: 0.75rem;\n  max-width: 435px;\n}\n\n.deposit-info + .deposit-info {\n  margin-top: 1rem;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 88145:
/*!*************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit/deposit.component.scss?ngResource ***!
  \*************************************************************************************/
/***/ ((module) => {

module.exports = ":host {\n  background: #f6f7f8;\n  display: block;\n}\n\n.deposit-header {\n  background: #fff;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 39771:
/*!************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-header/deposit-header.component.scss?ngResource ***!
  \************************************************************************************************/
/***/ ((module) => {

module.exports = ".deposit-header {\n  height: 145px;\n}\n@media (min-width: 960px) {\n  .deposit-header {\n    height: 160px;\n  }\n}\n@media (min-width: 1920px) {\n  .deposit-header {\n    height: 180px;\n  }\n}\n.iban {\n  display: flex;\n  align-items: center;\n  margin-bottom: 8px;\n  flex-wrap: wrap;\n}\n.iban-img {\n  margin-right: 12px;\n  height: 28px;\n  border-radius: 0.5rem;\n}\n.iban__number {\n  display: flex;\n  align-items: center;\n}\n.actions {\n  display: flex;\n  gap: 16px;\n}\n.actions--content {\n  gap: 32px;\n}\n.actions__item {\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  color: #1586bb;\n  height: 32px;\n  position: relative;\n}\n.actions__item:hover {\n  color: #ef5630;\n}\n.actions__item + .actions__item::before {\n  content: \"\";\n  display: block;\n  position: absolute;\n  height: 20px;\n  left: -17px;\n  width: 1px;\n  background: #b7bec5;\n  top: 50%;\n  transform: translate(50%, -50%);\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 12850:
/*!**********************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-details/deposit-interests-details.component.scss?ngResource ***!
  \**********************************************************************************************************************/
/***/ ((module) => {

module.exports = ":host {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: #f6f7f8;\n}\n\n.transaction-icon {\n  color: #fff;\n}\n\n.header {\n  display: flex;\n  gap: 0.75rem;\n  align-items: center;\n  padding: 1rem;\n}\n\n.main {\n  background: #fff;\n  border-radius: 0.5rem;\n  margin: 0 1rem;\n  padding: 1.5rem 1rem;\n}\n\n.description {\n  color: #666c72;\n  background: #f6f7f8;\n  padding: 0.75rem 1rem;\n  margin: 1.5rem 0;\n  border-radius: 0.5rem;\n  word-break: break-all;\n}\n\n.scrollable {\n  flex-grow: 1;\n  overflow-y: auto;\n  margin-top: 1rem;\n  padding: 0 1rem 1rem 1rem;\n}\n\n.scrollable::-webkit-scrollbar {\n  width: 8px;\n}\n\n.scrollable::-webkit-scrollbar-track {\n  background: #fff;\n}\n\n.scrollable::-webkit-scrollbar-thumb {\n  background: #d6dadf;\n  border-radius: 10px;\n}\n\n.group {\n  background: #fff;\n  border-radius: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.group__header {\n  display: flex;\n  cursor: pointer;\n  align-items: center;\n  padding: 1rem;\n  -webkit-user-select: none;\n          user-select: none;\n}\n\n.group__list {\n  margin: 0;\n  padding: 0 1rem 1rem 1rem;\n}\n\n.group__arrow {\n  margin-left: auto;\n  color: #ef5630;\n}\n\nh5 {\n  font-size: 20px;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 15853:
/*!********************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-filter/deposit-interests-filter.component.scss?ngResource ***!
  \********************************************************************************************************************/
/***/ ((module) => {

module.exports = "@media (min-width: 670px) {\n  :host {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n  }\n}\n\n.filter-group::after {\n  display: none;\n}\n\n@media (min-width: 670px) {\n  .filter-group::after {\n    display: inline-block;\n  }\n  .filter-group:last-child::after {\n    display: none;\n  }\n}\n\n.download-link {\n  display: inline-block;\n  font-weight: 400;\n  color: #1a1c1f;\n  text-align: center;\n  vertical-align: middle;\n  cursor: pointer;\n  -webkit-user-select: none;\n          user-select: none;\n  background-color: transparent;\n  border: 1px solid transparent;\n  transition: all 0.2s ease-in-out;\n  display: flex;\n  color: #1586bb;\n  border-radius: 8px;\n  padding: 8px 4px;\n}\n\n.download-link:hover {\n  background: #e9ecf1;\n  color: #1586bb;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 13304:
/*!******************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-group/deposit-interests-group.component.scss?ngResource ***!
  \******************************************************************************************************************/
/***/ ((module) => {

module.exports = ":host {\n  display: block;\n  margin: 24px 0;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlcG9zaXQtaW50ZXJlc3RzLWdyb3VwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBQTtFQUNBLGNBQUE7QUFDRiIsImZpbGUiOiJkZXBvc2l0LWludGVyZXN0cy1ncm91cC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBtYXJnaW46IDI0cHggMDtcclxufVxyXG4iXX0= */";

/***/ }),

/***/ 71034:
/*!**************************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-statement/deposit-interests-statement.component.scss?ngResource ***!
  \**************************************************************************************************************************/
/***/ ((module) => {

module.exports = ".details {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(246, 247, 248, 0.8);\n  z-index: 5000;\n}\n\n.details__close {\n  display: inline-block;\n  font-weight: 400;\n  color: #1a1c1f;\n  text-align: center;\n  vertical-align: middle;\n  cursor: pointer;\n  -webkit-user-select: none;\n          user-select: none;\n  background-color: transparent;\n  border: 1px solid transparent;\n  color: #666c72;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n}\n\n.details__content {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n  width: 25%;\n  min-width: 425px;\n  background: #f6f7f8;\n  box-shadow: 0px 24px 32px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 0px 1px rgba(0, 0, 0, 0.04);\n  border-radius: 12px 0px 0px 12px;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 88027:
/*!******************************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-transaction/deposit-interests-transaction.component.scss?ngResource ***!
  \******************************************************************************************************************************/
/***/ ((module) => {

module.exports = ":host {\n  display: grid;\n  grid-column-gap: 24px;\n  column-gap: 24px;\n  grid-template-columns: 40px 160px 1fr;\n  margin: 32px 0;\n  position: relative;\n  cursor: pointer;\n}\n:host:hover::before {\n  opacity: 1;\n}\n:host::before {\n  content: \"\";\n  display: block;\n  position: absolute;\n  left: -0.75rem;\n  right: -0.75rem;\n  top: -1rem;\n  bottom: -1rem;\n  z-index: 0;\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.04), 0px 2px 6px rgba(0, 0, 0, 0.04), 0px 10px 20px rgba(0, 0, 0, 0.04);\n  border-radius: 0.75rem;\n  opacity: 0;\n  transition: all 0.2s ease-in-out;\n}\n@media (min-width: 1280px) {\n  :host::before {\n    left: -1rem;\n    right: -1rem;\n  }\n}\n.transaction-icon {\n  width: 40px;\n  height: 40px;\n  background: #f6f7f8;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 43022:
/*!********************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-tabs/deposit-tabs.component.scss?ngResource ***!
  \********************************************************************************************/
/***/ ((module) => {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkZXBvc2l0LXRhYnMuY29tcG9uZW50LnNjc3MifQ== */";

/***/ }),

/***/ 33988:
/*!***************************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-details/statement2-details.component.html?ngResource ***!
  \***************************************************************************************************************/
/***/ ((module) => {

module.exports = "<div class=\"header\">\r\n    <ng-container [ngTemplateOutlet]=\"isCredit ? creditIconTemplate : debitIconTemplate\"></ng-container>\r\n    <div>\r\n        <div class=\"text-dark p2\">â„–{{ transaction.documentNumber }}</div>\r\n        <div class=\"text-muted p3\">\r\n            {{ date$ | async }}\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"block main\">\r\n    <ng-container [ngTemplateOutlet]=\"isCredit ? creditMainTemplate : debitMainTemplate\"></ng-container>\r\n\r\n    <p class=\"description\">\r\n        {{ transaction.description }}\r\n    </p>\r\n\r\n    <!-- <button class=\"btn btn-outline-primary btn-block\">\r\n        <span inlineSVG=\"/assets/icons/v2/pdf-24.svg\"\r\n              class=\"mr-2\"></span>\r\n        <span>{{ 'DEPOSITS.STATEMENT.DETAILS.DOWNLOAD' | translate }}</span>\r\n    </button> -->\r\n</div>\r\n\r\n<section class=\"scrollable\">\r\n    <section class=\"group\"\r\n             *ngFor=\"let group of groups\">\r\n        <j-collapsible>\r\n            <j-collapsible-trigger>\r\n                <div class=\"group__header\">\r\n                    <h5 class=\"mb-0\">{{ group.title | translate }}</h5>\r\n                    <span class=\"j-collapsible-arrow group__arrow\" inlineSVG='/assets/icons/v2/arrow-down-16.svg'></span>\r\n                </div>\r\n            </j-collapsible-trigger>\r\n            <j-collapsible-body>\r\n                <ul class=\"group__list\">\r\n                    <li class=\"j-desc-row\"\r\n                        *ngFor=\"let row of group.data\">\r\n                        <div class=\"text-muted j-desc-child\">\r\n                            {{ row.label | translate }}:\r\n                        </div>\r\n                        <div class=\"text-dark j-desc-child\">\r\n                            {{ row.value }}\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </j-collapsible-body>\r\n        </j-collapsible>\r\n    </section>\r\n</section>\r\n\r\n\r\n<ng-template #creditIconTemplate>\r\n    <span class=\"transaction-icon\"\r\n          inlineSVG='/assets/icons/v2/credit-40.svg'></span>\r\n</ng-template>\r\n\r\n<ng-template #debitIconTemplate>\r\n    <span class=\"transaction-icon\"\r\n          inlineSVG='/assets/icons/v2/debit-40.svg'></span>\r\n</ng-template>\r\n\r\n<ng-template #creditMainTemplate>\r\n    <div class=\"text-dark\">\r\n        <h3 class=\"mb-0\">\r\n            <j-money [showSign]=\"true\"\r\n                     [isCredit]=\"true\"\r\n                     [money]=\"transaction.credit\"></j-money>\r\n        </h3>\r\n        <div class=\"p2\">\r\n            {{ 'DEPOSITS.STATEMENT.CREDIT' | translate }}\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #debitMainTemplate>\r\n    <div class=\"text-dark\">\r\n        <h3 class=\"mb-0\">\r\n            <j-money [showSign]=\"true\"\r\n                     [isDebit]=\"true\"\r\n                     [money]=\"transaction.debit\"></j-money>\r\n        </h3>\r\n        <div class=\"p2\">\r\n            {{ 'DEPOSITS.STATEMENT.DEBIT' | translate }}\r\n        </div>\r\n    </div>\r\n</ng-template>";

/***/ }),

/***/ 59669:
/*!***********************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-group/statement2-group.component.html?ngResource ***!
  \***********************************************************************************************************/
/***/ ((module) => {

module.exports = "<div class=\"d-flex align-items-center justify-content-between\">\n  <h5 class=\"m-0\">\n    {{ title }}\n  </h5>\n  <div>\n    <j-money class=\"text-success\"\n             [showSign]=\"true\"\n             [isCredit]=\"true\"\n             [money]=\"group.creditSum\"></j-money>\n\n    <j-money class=\"text-dark ml-2\"\n             [showSign]=\"true\"\n             [isDebit]=\"true\"\n             [money]=\"group.debitSum\"></j-money>\n  </div>\n</div>\n\n<j-statement2-transaction *ngFor=\"let transaction of group.transactions\"\n                          [transaction]=\"transaction\"\n                          (click)=\"onClick(transaction)\">\n</j-statement2-transaction>";

/***/ }),

/***/ 96707:
/*!*************************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-header/statement2-header.component.html?ngResource ***!
  \*************************************************************************************************************/
/***/ ((module) => {

module.exports = "<div class=\"balances\" *ngFor=\"let balance of balances\">\n  <label class=\"balance-label text-muted p3 m-0\">{{ balance.label | translate }}</label>\n  <j-money class=\"h5 d-block\"\n           [class]=\"balance.classList\"\n           [showSign]=\"balance.showSign\"\n           [isDebit]=\"balance.isDebit\"\n           [isCredit]=\"balance.isCredit\"\n           [money]=\"balance.money\"></j-money>\n</div>";

/***/ }),

/***/ 42091:
/*!***************************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-loading/statement2-loading.component.html?ngResource ***!
  \***************************************************************************************************************/
/***/ ((module) => {

module.exports = "<div class=\"header\">\n  <div class=\"header-item\" *ngFor=\"let count of headerCount\">\n    <ngx-skeleton-loader [theme]=\"{ height: '18px', margin:'0px', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n    <ngx-skeleton-loader [theme]=\"{ height: '36px', margin:'0px', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n  </div>\n</div>\n\n<div class=\"pt-4 d-flex justify-content-between\">\n  <ngx-skeleton-loader [theme]=\"{ width:'60px', height: '36px', margin:'0px', 'background-color':'#ECEEF1' }\">\n  </ngx-skeleton-loader>\n  <ngx-skeleton-loader [theme]=\"{ width:'120px', height: '36px', margin:'0px', 'background-color':'#ECEEF1' }\">\n  </ngx-skeleton-loader>\n</div>\n\n<div class=\"transaction\"\n     *ngFor=\"let count of transactionCount\">\n  <ngx-skeleton-loader [theme]=\"{ width:'40px', height: '40px', margin:'0px', 'background-color':'#ECEEF1' }\">\n  </ngx-skeleton-loader>\n\n  <div>\n    <ngx-skeleton-loader [theme]=\"{ height: '25px', margin:'0px', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n    <ngx-skeleton-loader [theme]=\"{ height: '22px', margin:'0px', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n  </div>\n\n  <div>\n    <ngx-skeleton-loader [theme]=\"{ height: '25px', margin:'0px', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n    <ngx-skeleton-loader [theme]=\"{ height: '22px', margin:'0px', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n  </div>\n</div>";

/***/ }),

/***/ 43553:
/*!***********************************************************************************************************************!*\
  !*** ./src/app/helpers/statement2/components/statement2-transaction/statement2-transaction.component.html?ngResource ***!
  \***********************************************************************************************************************/
/***/ ((module) => {

module.exports = "<ng-container [ngTemplateOutlet]=\"isCredit ? creditTemplate : debitTemplate\"></ng-container>\n\n<ng-template #creditTemplate>\n  <span class=\"transaction-icon\"\n     inlineSVG='/assets/icons/v2/credit-40.svg'></span>\n\n  <div class=\"transaction-summary\">\n    <j-money class=\"d-block p1 mb-1 text-strong\"\n             [showSign]=\"true\"\n             [isCredit]=\"true\"\n             [money]=\"transaction.credit\"></j-money>\n\n    <div class=\"text-muted\">\n      {{ date$ | async }}\n    </div>\n  </div>\n\n  <article class=\"transaction-content\">\n    <h6 class=\"p1 mb-1\">\n      {{ 'DEPOSITS.STATEMENT.CREDIT' | translate }}\n    </h6>\n    <p class=\"text-muted m-0\">\n      {{ transaction.description }}\n    </p>\n  </article>\n</ng-template>\n\n<ng-template #debitTemplate>\n  <span class=\"transaction-icon\"\n     inlineSVG='/assets/icons/v2/debit-40.svg'></span>\n\n  <div class=\"transaction-summary\">\n    <j-money class=\"d-block p1 mb-1 text-strong\"\n             [showSign]=\"true\"\n             [isDebit]=\"true\"\n             [money]=\"transaction.debit\"></j-money>\n\n    <div class=\"text-muted\">\n      {{ date$ | async }}\n    </div>\n  </div>\n\n  <article class=\"transaction-content\">\n    <h6 class=\"p1 mb-1\">\n      {{ 'DEPOSITS.STATEMENT.DEBIT' | translate }}\n    </h6>\n    <p class=\"text-muted m-0\">\n      {{ transaction.description }}\n    </p>\n  </article>\n</ng-template>";

/***/ }),

/***/ 19375:
/*!*************************************************************************!*\
  !*** ./src/app/helpers/statement2/statement2.component.html?ngResource ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = "<section infiniteScroll\n         [scrollWindow]=\"true\"\n         [alwaysCallback]=\"true\"\n         [infiniteScrollDistance]=\"2\"\n         [infiniteScrollThrottle]=\"500\"\n         (scrolled)=\"onScroll()\">\n       <j-statement2-header [statement]=\"statement\"></j-statement2-header>\n       <j-statement2-group *ngFor=\"let group of statement.transactionGroups\"\n                           [group]=\"group\"\n                           [groupType]=\"statement.groupType\"\n                           (clicked)=\"onClick($event)\"></j-statement2-group>\n</section>\n\n<j-empty-placeholder *ngIf=\"!statement.transactionGroups || statement.transactionGroups.length === 0\"\n                     label=\"DEPOSITS.STATEMENT.EMPTY\">\n</j-empty-placeholder>\n\n<section *ngIf=\"activeTransaction\"\n         class=\"details\"\n         [@wrapperAnimations]=\"'in'\"\n         (click)=\"onClose()\">\n       <div class=\"details__content\"\n            [@childAnimations]=\"'in'\">\n              <button class=\"details__close\"\n                      inlineSVG=\"/assets/icons/v2/close-24.svg\"></button>\n              <j-statement2-details [transaction]=\"activeTransaction\"\n                                    (click)=\"$event.stopPropagation()\"\n                                    (closed)=\"onClose()\"></j-statement2-details>\n       </div>\n</section>";

/***/ }),

/***/ 94:
/*!*********************************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-interests/deposit-interests.component.html?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

module.exports = "<section class=\"f-page-body py-3 no-grow\">\n  <section class=\"container f-page-container\">\n    <div class=\"row\">\n      <div [class]=\"colsClasslist\">\n        <ng-container [ngTemplateOutlet]=\"filterDates ? filterTemplate : filterLoadingTemplate\"></ng-container>\n      </div>\n    </div>\n  </section>\n</section>\n\n<section class=\"f-page-extra\">\n  <section class=\"container f-page-container\">\n    <section class=\"row\">\n      <section [class]=\"colsClasslist\">\n        <ng-container\n                      [ngTemplateOutlet]=\"statement ? statementTemplate : hasError ? statementErrorTemplate : statementLoadingTemplate\">\n        </ng-container>\n      </section>\n    </section>\n  </section>\n</section>\n\n<ng-template #filterTemplate>\n  <j-deposit-interests-filter [filterDates]=\"filterDates\"\n                              (filtered)=\"onFilter($event)\"\n                              (kpnDownloaded)=\"onKpnDownload()\"\n                              (downloaded)=\"onDownload()\"></j-deposit-interests-filter>\n</ng-template>\n\n<ng-template #filterLoadingTemplate>\n  <div class=\"d-flex justify-content-end\">\n    <ngx-skeleton-loader [theme]=\"{ width:'250px', height: '36px', margin:'0px', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n  </div>\n</ng-template>\n\n<ng-template #statementTemplate>\n  <j-deposit-interests-statement [statement]=\"statement\"\n                                 [iban]=\"iban\"\n                                 [depositName]=\"depositName\"\n                                 infiniteScroll\n                                 [scrollWindow]=\"true\"\n                                 [alwaysCallback]=\"true\"\n                                 [infiniteScrollDistance]=\"2\"\n                                 [infiniteScrollThrottle]=\"500\"\n                                 (scrolled)=\"onScroll()\"></j-deposit-interests-statement>\n</ng-template>\n\n<ng-template #statementErrorTemplate>\n  <j-error-placeholder (retried)=\"onRetry()\">\n  </j-error-placeholder>\n</ng-template>\n\n<ng-template #statementLoadingTemplate>\n  <div class=\"pt-4 d-flex justify-content-between\">\n    <ngx-skeleton-loader [theme]=\"{ width:'60px', height: '36px', margin:'0px', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n    <ngx-skeleton-loader [theme]=\"{ width:'120px', height: '36px', margin:'0px', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n  </div>\n  <div class=\"loader\"\n       *ngFor=\"let count of loadingCount\">\n    <ngx-skeleton-loader [theme]=\"{ width:'40px', height: '40px', margin:'0px', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n\n    <div>\n      <ngx-skeleton-loader [theme]=\"{ height: '25px', margin:'0px', 'background-color':'#ECEEF1' }\">\n      </ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ height: '22px', margin:'0px', 'background-color':'#ECEEF1' }\">\n      </ngx-skeleton-loader>\n    </div>\n\n    <div>\n      <ngx-skeleton-loader [theme]=\"{ height: '25px', margin:'0px', 'background-color':'#ECEEF1' }\">\n      </ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ height: '22px', margin:'0px', 'background-color':'#ECEEF1' }\">\n      </ngx-skeleton-loader>\n    </div>\n  </div>\n</ng-template>";

/***/ }),

/***/ 97015:
/*!***********************************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-requisites/deposit-requisites.component.html?ngResource ***!
  \***********************************************************************************************************/
/***/ ((module) => {

module.exports = "<section class=\"f-page-body\">\n  <section class=\"container f-page-container\">\n    <div class=\"row\">\n      <div [class]=\"colsClasslist\">\n        <div class=\"deposit-info\">\n          <ng-container [ngTemplateOutlet]=\"isReady ? requisitesTemplate : loadingTemplate\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </section>\n</section>\n\n<ng-template #loadingTemplate>\n  <div class=\"j-desc-row j-desc-row--loading\"\n       *ngFor=\"let count of loadingCount\">\n    <ngx-skeleton-loader [theme]=\"{ height: '17px','background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n    <ngx-skeleton-loader [theme]=\"{ height: '17px', margin:'0px', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n  </div>\n\n   <div class=\"requisites__footer\">\n    <ngx-skeleton-loader class=\"requisites__button\"\n                         [theme]=\"{ height: '50px', 'margin-bottom':'0px', width: '100%', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n    <ngx-skeleton-loader class=\"requisites__button ml-3\"\n                         [theme]=\"{ height: '50px', 'margin-bottom':'0px', width: '100%', 'background-color':'#ECEEF1' }\">\n    </ngx-skeleton-loader>\n  </div>\n</ng-template>\n\n<ng-template #requisitesTemplate>\n  <div class=\"j-desc-row\"\n       *ngFor=\"let item of list\">\n    <div class=\"j-desc-child text-muted\">\n      {{ item.label | translate }}:\n    </div>\n    <div class=\"j-desc-child text-dark\">\n      {{ item.value }}\n    </div>\n  </div>\n\n  <div class=\"requisites__footer\">\n    <button class=\"requisites__button btn btn-outline-primary btn-md\"\n            (click)=\"onCopy()\"\n            [cbContent]=\"textToCopy\"\n            ngxClipboard>\n      <span [inlineSVG]=\"'assets/icons/account/copy.svg'\"></span>\n      <strong class=\"ml-2\">{{ 'ACCOUNTS.REQUISITES.COPY' | translate }}</strong>\n    </button>\n\n    <button class=\"requisites__button btn btn-outline-primary btn-md\"\n            [disabled]=\"isDownloading\"\n            [jLoading]=\"isDownloading\"\n            [jLoadingInverted]=\"true\"\n            (click)=\"onDownload()\">\n      <span [inlineSVG]=\"'assets/icons/account/pdf.svg'\"></span>\n      <strong class=\"ml-2\">{{ 'ACCOUNTS.REQUISITES.DOWNLOAD' | translate }}</strong>\n    </button>\n  </div>\n</ng-template>";

/***/ }),

/***/ 51290:
/*!*********************************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-statement/deposit-statement.component.html?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

module.exports = "<section class=\"f-page-body no-grow\">\n  <section class=\"container f-page-container\">\n    <div class=\"row\">\n      <div [class]=\"colsClasslist\">\n        <j-filter [currency]=\"currency$ | async\"\n                  [mode]=\"filterMode\"\n                  (filtered)=\"onFilter($event)\"\n                  (downloaded)=\"onDownload($event)\"></j-filter>\n      </div>\n    </div>\n  </section>\n</section>\n\n<section class=\"f-page-extra\">\n  <section class=\"container f-page-container\">\n    <section class=\"row\">\n      <section [class]=\"colsClasslist\">\n        <ng-container\n                      [ngTemplateOutlet]=\"statement ? statementTemplate : hasError ? statementErrorTemplate : statementLoadingTemplate\">\n        </ng-container>\n      </section>\n    </section>\n  </section>\n</section>\n\n<ng-template #statementTemplate>\n  <j-statement2 [statement]=\"statement\"\n                [options]=\"statementOptions\"\n                (scrolled)=\"onScroll()\">\n  </j-statement2>\n</ng-template>\n\n<ng-template #statementErrorTemplate>\n  <j-error-placeholder (retried)=\"onRetry()\">\n  </j-error-placeholder>\n</ng-template>\n\n<ng-template #statementLoadingTemplate>\n  <j-statement2-loading></j-statement2-loading>\n</ng-template>";

/***/ }),

/***/ 85502:
/*!*************************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit-terms/deposit-terms.component.html?ngResource ***!
  \*************************************************************************************************/
/***/ ((module) => {

module.exports = "<section class=\"f-page-body\">\n  <section class=\"container f-page-container\">\n    <div class=\"row\">\n      <div [class]=\"colsClasslist\">\n        <ng-container [ngTemplateOutlet]=\"terms ? termsTemplate : hasError ? errorTemplate: loadingTemplate\">\n        </ng-container>\n      </div>\n    </div>\n  </section>\n</section>\n\n<ng-template #errorTemplate>\n  <j-error-placeholder (retried)=\"onRetry()\">\n  </j-error-placeholder>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"deposit-info\">\n    <div class=\"mb-4\">\n      <div>\n        <ngx-skeleton-loader [theme]=\"{ height: '17px', 'margin-bottom':'6px', width: '45%'}\">\n        </ngx-skeleton-loader>\n      </div>\n      <ngx-skeleton-loader [theme]=\"{ height: '25px', 'margin-bottom':'0px', width: '40%'}\">\n      </ngx-skeleton-loader>\n    </div>\n    <div class=\"j-desc-row j-desc-row--loading\"\n         *ngFor=\"let count of mainLoadingCount; let i = index\">\n      <ngx-skeleton-loader\n                           [theme]=\"{ height: i === 0 || i === 2 ? '18px' : '41px', margin:'0px', 'background-color':'#ECEEF1' }\">\n      </ngx-skeleton-loader>\n      <ngx-skeleton-loader\n                           [theme]=\"{ height: i === 0 || i === 2 ? '18px' : '41px', margin:'0px', 'background-color':'#ECEEF1' }\">\n      </ngx-skeleton-loader>\n    </div>\n  </div>\n  <div class=\"deposit-info\">\n    <h5 class=\"j-desc-heading\">{{ 'DEPOSITS.TERMS.REPLENISHMENT.TITLE' | translate }}</h5>\n    <div class=\"j-desc-row j-desc-row--loading\"\n         *ngFor=\"let count of otherLoadingCount; let i = index\">\n      <ngx-skeleton-loader [theme]=\"{ height: i === 0 ? '18px' : '41px', margin:'0px', 'background-color':'#ECEEF1' }\">\n      </ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ height: i === 0 ? '18px' : '41px', margin:'0px', 'background-color':'#ECEEF1' }\">\n      </ngx-skeleton-loader>\n    </div>\n  </div>\n  <div class=\"deposit-info\">\n    <h5 class=\"j-desc-heading\">{{ 'DEPOSITS.TERMS.WITHDRAWAL.TITLE' | translate }}</h5>\n    <div class=\"j-desc-row j-desc-row--loading\"\n         *ngFor=\"let count of otherLoadingCount\">\n      <ngx-skeleton-loader [theme]=\"{ height: '41px', margin:'0px', 'background-color':'#ECEEF1' }\">\n      </ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ height: '41px', margin:'0px', 'background-color':'#ECEEF1' }\">\n      </ngx-skeleton-loader>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #termsTemplate>\n  <div class=\"deposit-info\">\n    <div class=\"text-dark mb-4\">\n      <div class=\"p2\">{{ 'DEPOSITS.TERMS.MAIN.NAME' | translate }}</div>\n      <h4>\n        {{ name }}\n      </h4>\n    </div>\n    <div class=\"p2 j-desc-row\"\n         *ngFor=\"let item of mainInfo\">\n      <div class=\"j-desc-child text-muted\">\n        {{ item.label | translate }}:\n      </div>\n      <div class=\"j-desc-child text-dark\"\n           [innerHTML]=\"item.value\">\n      </div>\n    </div>\n  </div>\n  <div class=\"deposit-info\">\n    <h5 class=\"j-desc-heading\">{{ 'DEPOSITS.TERMS.REPLENISHMENT.TITLE' | translate }}</h5>\n    <div class=\"p2 j-desc-row\"\n         *ngFor=\"let item of replenishmentInfo\">\n      <div class=\"j-desc-child text-muted\">\n        {{ item.label | translate }}:\n      </div>\n      <div class=\"j-desc-child text-dark\"\n           [innerHTML]=\"item.value\">\n      </div>\n    </div>\n  </div>\n  <div class=\"deposit-info\">\n    <h5 class=\"j-desc-heading\">{{ 'DEPOSITS.TERMS.WITHDRAWAL.TITLE' | translate }}</h5>\n    <div class=\"p2 j-desc-row\"\n         *ngFor=\"let item of withdrawalInfo\">\n      <div class=\"j-desc-child text-muted\">\n        {{ item.label | translate }}:\n      </div>\n      <div class=\"j-desc-child text-dark\"\n           [innerHTML]=\"item.value\">\n      </div>\n    </div>\n  </div>\n</ng-template>";

/***/ }),

/***/ 9790:
/*!*************************************************************************************!*\
  !*** ./src/app/pages/deposits/components/deposit/deposit.component.html?ngResource ***!
  \*************************************************************************************/
/***/ ((module) => {

module.exports = "<f-page closePosition=\"outside\"\r\n        [colsClassList]=\"colsClasslist\"\r\n        headerClassList=\"bg-white\"\r\n        (closed)=\"onClose()\">\r\n    <f-page-header>\r\n        <j-deposit-header [deposit]=\"deposit$ | async\" \r\n                          [iban]=\"iban\"></j-deposit-header>\r\n        <j-deposit-tabs></j-deposit-tabs>\r\n    </f-page-header>\r\n    <ng-template #contentTemplate>\r\n        <router-outlet></router-outlet>\r\n    </ng-template>\r\n</f-page>";

/***/ }),

/***/ 18165:
/*!************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-header/deposit-header.component.html?ngResource ***!
  \************************************************************************************************/
/***/ ((module) => {

module.exports = "<section class=\"account-header deposit-header\">\n  <ng-container [ngTemplateOutlet]=\"deposit ? depositTemplate : loadingTemplate\"></ng-container>\n</section>\n\n<ng-template #depositTemplate>\n  <div class=\"iban\">\n    <div class=\"iban__number\">\n      <div class=\"iban-img\">\n        <j-entity-logo size=\"sm\"\n                       [name]=\"deposit.balance?.currency\"></j-entity-logo>\n      </div>\n\n      <span class=\"d-inline-block text-muted mr-4\">{{ iban | formatIban }}</span>\n    </div>\n  </div>\n  <h1 class=\"m-0\">\n    <j-money [money]=\"deposit.balance\"></j-money>\n  </h1>\n\n  <div class=\"actions actions--content\">\n    <a *ngIf=\"deposit.depositType && deposit.additionalDetails.payOut && !(isDepositOperationsDisabled$ | async)\"\n       class=\"actions__item\"\n       routerLink=\"/transfers\"\n       [queryParams]=\"{ from: iban }\">\n      <span inlineSVG=\"/assets/icons/v2/arrow-right-top-9.svg\"></span>\n      <span>{{ 'DEPOSITS.ACTIONS.WITHDRAWAL' | translate }}</span>\n    </a>\n\n    <a *ngIf=\"deposit.depositType && deposit.additionalDetails.addPay && !(isDepositOperationsDisabled$ | async)\"\n       class=\"actions__item\"\n       routerLink=\"/transfers\"\n       [queryParams]=\"{ to: iban }\">\n      <span inlineSVG=\"/assets/icons/v2/arrow-left-down-9.svg\"></span>\n      <span>{{ 'DEPOSITS.ACTIONS.REPLENISHMENT' | translate }}</span>\n    </a>\n  </div>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"iban\">\n    <div class=\"iban__number\">\n      <div class=\"iban-img\">\n        <ngx-skeleton-loader\n                             [theme]=\"{ width: '28px', height: '28px', 'margin-bottom':'0', 'background-color':'#ECEEF1'}\">\n        </ngx-skeleton-loader>\n      </div>\n\n      <span class=\"d-inline-block text-muted mr-4\">{{ iban | formatIban }}</span>\n    </div>\n  </div>\n  <h1>\n    <ngx-skeleton-loader [theme]=\"{ height: '46px', width: '60%', 'margin-bottom':'0', 'background-color':'#ECEEF1'}\">\n    </ngx-skeleton-loader>\n  </h1>\n\n  <div class=\"actions\">\n    <ngx-skeleton-loader [theme]=\"{ width: '100px', height: '28px', 'margin-bottom':'0', 'background-color':'#ECEEF1'}\">\n    </ngx-skeleton-loader>\n    <ngx-skeleton-loader [theme]=\"{ width: '100px', height: '28px', 'margin-bottom':'0', 'background-color':'#ECEEF1'}\">\n    </ngx-skeleton-loader>\n  </div>\n</ng-template>";

/***/ }),

/***/ 67843:
/*!**********************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-details/deposit-interests-details.component.html?ngResource ***!
  \**********************************************************************************************************************/
/***/ ((module) => {

module.exports = "<div class=\"header\">\n  <span class=\"transaction-icon\"\n        inlineSVG='/assets/icons/v2/gift-24.svg'></span>\n  <div>\n    <div class=\"text-dark p2\">{{ transaction.colvirStatusName }}</div>\n    <div class=\"text-muted p3\">\n      {{ date$ | async }}\n    </div>\n  </div>\n</div>\n\n<div class=\"block main\">\n  <div class=\"text-dark\">\n    <h3 class=\"mb-0\">\n      <j-money [showSign]=\"true\"\n               [isCredit]=\"true\"\n               [money]=\"transaction.interest\"></j-money>\n    </h3>\n    <div class=\"p2\">\n      {{ 'DEPOSITS.INTERESTS.TRANSACTION.TITLE' | translate: {name: depositName} }}\n    </div>\n  </div>\n\n  <p class=\"description\">\n    {{ (transaction.taxed ? 'DEPOSITS.INTERESTS.TRANSACTION.DESCRIPTION.WITH_KPN' :\n    'DEPOSITS.INTERESTS.TRANSACTION.DESCRIPTION.WITHOUT_KPN') | translate }}\n  </p>\n\n  <button (click)=\"onDownload()\"\n          class=\"btn btn-outline-primary btn-block\">\n    <span inlineSVG=\"/assets/icons/v2/pdf-24.svg\"\n          class=\"mr-2\"></span>\n    <span>{{ 'DEPOSITS.STATEMENT.DETAILS.DOWNLOAD' | translate }}</span>\n  </button>\n</div>\n\n<section class=\"scrollable\">\n  <section class=\"group\"\n           *ngFor=\"let group of groups\">\n    <j-collapsible>\n      <j-collapsible-trigger>\n        <div class=\"group__header\">\n          <h5 class=\"mb-0\">{{ group.title | translate }}</h5>\n          <span class=\"j-collapsible-arrow group__arrow\"\n                inlineSVG='/assets/icons/v2/arrow-down-16.svg'></span>\n        </div>\n      </j-collapsible-trigger>\n      <j-collapsible-body>\n        <ul class=\"group__list\">\n          <li class=\"j-desc-row\"\n              *ngFor=\"let row of group.data\">\n            <div class=\"text-muted j-desc-child\">\n              {{ row.label | translate }}:\n            </div>\n            <div class=\"text-dark j-desc-child\">\n              {{ row.value | async }}\n              <button *ngIf=\"row.isCertificate\"\n                      (click)=\"onKpnDownload()\"\n                      class=\"pl-1 p-0 btn btn-link link-blue\">\n                {{'DEPOSITS.KPN.CERTIFICATE' | translate }}\n              </button>\n            </div>\n          </li>\n        </ul>\n      </j-collapsible-body>\n    </j-collapsible>\n  </section>\n</section>";

/***/ }),

/***/ 92069:
/*!********************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-filter/deposit-interests-filter.component.html?ngResource ***!
  \********************************************************************************************************************/
/***/ ((module) => {

module.exports = "<j-filter-period-dropdown (submitted)=\"onFilter($event)\"\n                          class=\"filter-group\"\n                          [customDates]=\"filterDates\"\n                          placement=\"left-top\"></j-filter-period-dropdown>\n\n<div class=\"px-3 filter-group\">\n    <button (click)=\"onKpnDownload()\"\n            class=\"download-link\">{{ 'DEPOSITS.INTERESTS.KPN_CERTIFICATE' | translate }}</button>\n</div>\n\n<div class=\"pl-3 filter-group\">\n    <button (click)=\"onDownload()\"\n            class=\"download-link\">PDF</button>\n</div>";

/***/ }),

/***/ 58308:
/*!******************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-group/deposit-interests-group.component.html?ngResource ***!
  \******************************************************************************************************************/
/***/ ((module) => {

module.exports = "<div class=\"d-flex align-items-center justify-content-between\">\n  <h5 class=\"m-0\">\n    {{ title }}\n  </h5>\n  <j-money class=\"text-success\"\n           [showSign]=\"true\"\n           [money]=\"group.creditSum\"></j-money>\n</div>\n\n<j-deposit-interests-transaction *ngFor=\"let transaction of group.transactions\"\n                                 (click)=\"onClick(transaction)\"\n                                 [transaction]=\"transaction\"\n                                 [depositName]=\"depositName\">\n</j-deposit-interests-transaction>";

/***/ }),

/***/ 36381:
/*!**************************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-statement/deposit-interests-statement.component.html?ngResource ***!
  \**************************************************************************************************************************/
/***/ ((module) => {

module.exports = "<j-deposit-interests-group *ngFor=\"let group of statement?.transactionGroups\"\n                           (clicked)=\"onClick($event)\"\n                           [group]=\"group\"\n                           [depositName]=\"depositName\">\n</j-deposit-interests-group>\n\n<j-empty-placeholder *ngIf=\"!statement.transactionGroups || statement.transactionGroups?.length === 0\"\n                     label=\"DEPOSITS.INTERESTS.EMPTY\">\n</j-empty-placeholder>\n\n<section *ngIf=\"activeTransaction\"\n         class=\"details\"\n         [@wrapperAnimations]=\"'in'\"\n         (click)=\"onClose()\">\n        <div class=\"details__content\"\n             (click)=\"$event.stopPropagation()\"\n             [@childAnimations]=\"'in'\">\n                <button class=\"details__close\"\n                        (click)=\"onClose()\"\n                        inlineSVG=\"/assets/icons/v2/close-24.svg\"></button>\n\n                <j-deposit-interests-details [transaction]=\"activeTransaction\"\n                                             [iban]=\"iban\"\n                                             [depositName]=\"depositName\"></j-deposit-interests-details>\n        </div>\n</section>";

/***/ }),

/***/ 17765:
/*!******************************************************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-interests-transaction/deposit-interests-transaction.component.html?ngResource ***!
  \******************************************************************************************************************************/
/***/ ((module) => {

module.exports = "<i class=\"transaction-icon\"\n   inlineSVG=\"assets/icons/v2/gift-24.svg\"></i>\n\n<div class=\"transaction-summary\">\n  <j-money class=\"d-block p1 mb-1 text-strong\"\n           [showSign]=\"true\"\n           [money]=\"transaction.interest\"></j-money>\n  <div class=\"text-muted\">\n    {{ date$ | async }}\n  </div>\n</div>\n\n<article class=\"transaction-content\">\n  <h6 class=\"p1 mb-1\">\n    {{ 'DEPOSITS.INTERESTS.TRANSACTION.TITLE' | translate: { name: depositName } }}\n  </h6>\n  <p class=\"text-muted m-0\">\n    {{ (transaction.taxed ? 'DEPOSITS.INTERESTS.TRANSACTION.DESCRIPTION.WITH_KPN' :\n    'DEPOSITS.INTERESTS.TRANSACTION.DESCRIPTION.WITHOUT_KPN') | translate }}\n  </p>\n</article>";

/***/ }),

/***/ 89503:
/*!********************************************************************************************!*\
  !*** ./src/app/pages/deposits/helpers/deposit-tabs/deposit-tabs.component.html?ngResource ***!
  \********************************************************************************************/
/***/ ((module) => {

module.exports = "<div class=\"f-page-tabs-wrap\">\n  <nav class=\"f-page-tabs\">\n    <a [routerLink]=\"tab.link\"\n       routerLinkActive=\"active\"\n       *ngFor=\"let tab of tabs\">\n      {{ tab.label | translate}}\n    </a>\n  </nav>\n</div>";

/***/ })

}]);
//# sourceMappingURL=src_app_pages_deposits_deposits_module_ts.js.map