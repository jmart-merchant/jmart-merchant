{"version":3,"file":"default-src_app_conversion_conversion_service_ts-src_app_payments_services_index_ts.js","mappings":"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","sources":["./src/app/conversion/conversion.service.ts","./src/app/payments/services/can-deactivate-payment.guard.ts","./src/app/payments/services/index.ts","./src/app/payments/services/payment-type-switch.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { ApiService } from '@api/index';\n\nimport { CompanyService } from '@company/company.service';\n\nimport { Payment } from '@payments/models';\nimport { PaymentApiService } from '@payments/services/payment-api.service';\nimport { PaymentsPipelineService } from '@payments/services/payments-pipeline.service';\n\nimport { CURRENCY, IMoney } from '@shared/currency/currency.model';\nimport {\n  IConversionPurpose,\n  IExchangeRate,\n  PAYMENT_CATEGORY,\n  PAYMENT_STATUS,\n  PAYMENT_TYPE,\n} from '@shared/models';\nimport { MaskedService } from '@shared/masked/masked.service';\n\nimport { IConversionForm } from './conversion-form/conversion-form.component';\nimport { PaymentsSharedService } from '@shared/services/payments-shared.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConversionService {\n  constructor(\n    private api: ApiService,\n    private companyService: CompanyService,\n    private maskedService: MaskedService,\n    private paymentsPipelineService: PaymentsPipelineService,\n    private paymentsApiService: PaymentApiService,\n    private paymentsSharedService: PaymentsSharedService\n  ) {}\n\n  getPurposeList() {\n    const url = `dictionaries/conversion-purposes`;\n    return this.api.get<IConversionPurpose[]>(url);\n  }\n\n  getRateObservable(body: IExchangeRate) {\n    const url = `companies/${this.companyService.currentId}/payments/exchange-rate`;\n    return this.api.postObservable<IExchangeRate>(url, body);\n  }\n\n  getRate(body: IExchangeRate) {\n    return this.paymentsSharedService.getExchangeRate(body);\n  }\n\n  getConversionById(conversionId: string): any {\n    return this.paymentsApiService.getPaymentById(conversionId);\n  }\n\n  saveEditedConversion(\n    conversionForm: IConversionForm,\n    originalPayment: Payment\n  ) {\n    return this.paymentsApiService.updatePayment(\n      this.mapConversionToPayment(conversionForm, originalPayment) as any,\n      { paymentId: conversionForm.id }\n    );\n  }\n\n  async getCommission(form: IConversionForm): Promise<IMoney> {\n    const url = `companies/${this.companyService.currentId}/payments/commission`;\n    const body = this.mapFormToPayment(form);\n\n    const retrieved = await this.api.post<{\n      commissionAmount: number;\n      currency: CURRENCY;\n    }>(url, body);\n    const commission = {\n      amount: retrieved.commissionAmount || 0,\n      currency: retrieved.currency || CURRENCY.KZT,\n    };\n\n    return commission;\n  }\n\n  createConversion(form: IConversionForm) {\n    return this.paymentsApiService.createPayment(this.mapFormToPayment(form));\n  }\n\n  updateConversion(form: IConversionForm) {\n    return this.paymentsApiService.updatePayment(this.mapFormToPayment(form), {\n      paymentId: form.id,\n    });\n  }\n\n  async createAndSignConversion(form: IConversionForm) {\n    const paymentResult = await this.createConversion(form);\n    return this.paymentsPipelineService.processPaymentVerify(paymentResult);\n  }\n\n  mapFormToPayment(form: IConversionForm) {\n    const mappedPayment = {\n      status: {\n        code: PAYMENT_STATUS.CREATED,\n      },\n      paymentRecipient: {\n        recipientAccount: {\n          iban: form.to?.iban,\n        },\n      },\n      type: PAYMENT_TYPE.CONVERSION,\n      category: PAYMENT_CATEGORY.CONVERSION,\n      details: {\n        exchangeRate: form.rate,\n        conversionPurpose: form.purpose,\n        description: form.description,\n        payerIban: form.from?.iban,\n        paymentAmount: {\n          amount: this.maskedService.getNumberedAmount(form.fromAmount),\n          currency: form.from?.balance?.currency,\n        },\n        documentId: form.documentNumber,\n      },\n    };\n\n    if (form.commissionAccount) {\n      (mappedPayment.details as any).exchangeRate = {\n        ...mappedPayment.details.exchangeRate,\n        commissionWithdrawalIban: form.commissionAccount?.iban,\n      };\n    }\n\n    return mappedPayment;\n  }\n\n  private mapConversionToPayment(\n    conversionForm: IConversionForm,\n    originalPayment\n  ) {\n    originalPayment.paymentRecipient.recipientAccount.iban =\n      conversionForm.to.iban;\n    originalPayment.details.exchangeRate = conversionForm.rate;\n    originalPayment.details.conversionPurpose = conversionForm.purpose;\n    originalPayment.details.description = conversionForm.description;\n    originalPayment.details.payerIban = conversionForm.from.iban;\n    originalPayment.details.paymentAmount = {\n      amount: this.maskedService.getNumberedAmount(conversionForm.fromAmount),\n      currency: conversionForm.from.balance.currency,\n    };\n    originalPayment.details.documentId = conversionForm.documentNumber;\n\n    return originalPayment;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CanDeactivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { NgForm } from '@angular/forms';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { PaymentGuardModalComponent } from '@payments/components/payment-guard-modal/payment-guard-modal.component';\nimport { BasePaymentContainer } from '@payments/containers/base-payment.container';\nimport { AuthService } from '@auth/auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CanDeactivatePaymentGuard\n  implements CanDeactivate<BasePaymentContainer<any>> {\n  constructor(\n    protected modal: NgbModal,\n    private auth: AuthService,\n    private router: Router\n  ) {}\n  canDeactivate(\n    component: BasePaymentContainer<any>,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState?: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n\n    // check page reloading after draft creation. payment id to url, but no notification\n    const { extras } = this.router.getCurrentNavigation();\n    if (extras?.state?.silent) {\n      return Promise.resolve(true);\n    }\n    if (component && component.formDirective && this.auth.isAuthenticated) {\n      const { formDirective, form } = component;\n\n      if (\n        (!formDirective.submitted && form.dirty) ||\n        (formDirective.submitted && form.dirty)\n      ) {\n        return this.modal.open(PaymentGuardModalComponent, {\n          backdropClass: 'backdrop_light',\n          windowClass: 'modal_light modal_max-height',\n          centered: true,\n        }).result;\n      }\n    }\n    return Promise.resolve(true);\n  }\n}\n","export * from './can-deactivate-payment.guard';\nexport * from './currency-payment.service';\nexport * from './form-model';\nexport * from './payment-api.service';\nexport * from './payment-type-switch.guard';\nexport * from './payments-form-factory.service';\nexport * from './payments-pipeline.service';\nexport * from './payments.service';","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n  ActivatedRoute,\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { PaymentApiService } from './payment-api.service';\nimport { PaymentsService } from './payments.service';\nimport { paymentsRoutes } from '@payments/payments-routes';\nimport { NotifierService } from 'angular-notifier';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentTypeSwitchGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private api: PaymentApiService,\n    private payments: PaymentsService,\n    private notification: NotifierService\n  ) {}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const repeatPayment = this.router.getCurrentNavigation().extras?.state\n      ?.repeatPayment;\n    const paymentId = next.params?.paymentId || repeatPayment?.id;\n    let route = paymentsRoutes.tenge.order;\n    if (repeatPayment) {\n      route = this.payments.getPaymentRouteByType(repeatPayment.type);\n    }\n    if (paymentId) {\n      this.api\n        .getPaymentById(paymentId)\n        .then((response) => {\n          const commands = [this.payments.getPaymentRouteByType(response.type)];\n          if (!repeatPayment) {\n            commands.push(paymentId);\n          }\n          this.router.navigate(\n            commands,\n            {\n              state: {\n                resolvedPayment: response,\n              },\n            }\n          );\n        })\n        .catch((e) => {\n          this.router.navigate([paymentsRoutes.tenge.order]);\n          this.notification.show({\n            type: 'error',\n            message: e,\n          });\n        });\n    } else {\n      this.router.navigate([route]);\n    }\n    return false;\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}