{"version":3,"file":"src_app_transfers_transfers_module_ts.js","mappings":"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","sources":["./src/app/payments/services/can-deactivate-payment.guard.ts","./src/app/payments/services/form-model.ts","./src/app/payments/services/index.ts","./src/app/payments/services/payment-type-switch.guard.ts","./src/app/transfers/modals/index.ts","./src/app/transfers/modals/transfer-error/transfer-error.component.ts","./src/app/transfers/modals/transfer-success/transfer-success.component.ts","./src/app/transfers/transfers-own/transfers-own.component.ts","./src/app/transfers/transfers-routing.module.ts","./src/app/transfers/transfers.component.ts","./src/app/transfers/transfers.module.ts","./src/app/transfers/transfers.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  CanDeactivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { NgForm } from '@angular/forms';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { PaymentGuardModalComponent } from '@payments/components/payment-guard-modal/payment-guard-modal.component';\nimport { BasePaymentContainer } from '@payments/containers/base-payment.container';\nimport { AuthService } from '@auth/auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CanDeactivatePaymentGuard\n  implements CanDeactivate<BasePaymentContainer<any>> {\n  constructor(\n    protected modal: NgbModal,\n    private auth: AuthService,\n    private router: Router\n  ) {}\n  canDeactivate(\n    component: BasePaymentContainer<any>,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState?: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n\n    // check page reloading after draft creation. payment id to url, but no notification\n    const { extras } = this.router.getCurrentNavigation();\n    if (extras?.state?.silent) {\n      return Promise.resolve(true);\n    }\n    if (component && component.formDirective && this.auth.isAuthenticated) {\n      const { formDirective, form } = component;\n\n      if (\n        (!formDirective.submitted && form.dirty) ||\n        (formDirective.submitted && form.dirty)\n      ) {\n        return this.modal.open(PaymentGuardModalComponent, {\n          backdropClass: 'backdrop_light',\n          windowClass: 'modal_light modal_max-height',\n          centered: true,\n        }).result;\n      }\n    }\n    return Promise.resolve(true);\n  }\n}\n","import { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\n\nimport { RegularAccount } from '@accounts/index';\n\nimport { Employee } from '@shared/employee/employee.model';\nimport {\n  PAYMENT_TYPE,\n  KNP,\n  IFxContract,\n  IDictionaryValue,\n  ICountry,\n  IFxContractRecipient,\n} from '@shared/models';\nimport { CURRENCY } from '@shared/currency/currency.model';\n\nimport { COUNTRY, IBank } from './currency-payment.service';\n\nexport type PaymentFormModel =\n  | OrderPaymentFormModel\n  | TaxPaymentFormModel\n  | EmployeeFormModel\n  | CurrencyPaymentFormModel;\n\nexport type EmployeeFormModel =\n  | PensionPaymentFormModel\n  | SocialPaymentFormModel\n  | MedicalPaymentFormModel\n  | SalaryPaymentFormModel;\n\nexport interface BasePaymentData {\n  number: string;\n  senderAccount: RegularAccount;\n  type?: PAYMENT_TYPE;\n\n  knp: string;\n  amount: string;\n  date: any;\n  bankAccount?: string;\n  employees?: Employee[];\n  purpose?: string;\n  urgent?: boolean;\n  vat?: boolean;\n  kbk?: string;\n  /** switch to periodStart and periodEnd */\n  intervalEnabled?: boolean;\n  /** заполняется, когда выбран 1 период. mm.YYYY */\n  period?: Date;\n  /** заполняется, когда выбраны начало и конец mm.YYYY*/\n  periodStart?: Date;\n  /** заполняется, когда выбраны начало и конец mm.YYYY*/\n  periodEnd?: Date;\n  /** VIN автомобиля без масок */\n  vin?: string;\n  /** номер адм протокола без масок */\n  protocolNumber?: string;\n\n  bankReceiver?: string;\n  /** notify by email. Currently actual for payment order */\n  emailOnSuccess?: string;\n}\n\nexport interface OrderPaymentFormModel {\n  type: PAYMENT_TYPE.INTERNAL | PAYMENT_TYPE.EXTERNAL | undefined;\n  iinOrBin: string;\n  name: string;\n  bankAccount: string;\n  kbeCode: string;\n  number: string;\n  date: NgbDateStruct;\n  knp: string;\n  purpose: string;\n  senderAccount: RegularAccount;\n  amount: string;\n  \n  withinContract?: boolean;\n  contract?: IFxContract;\n  contractId?: string;\n  fxContractRecipient?: IFxContractRecipient;\n  fxContractRecipientId?: string;\n  \n  // currency: string;\n  vat: boolean;\n  urgent: boolean;\n  notify: boolean;\n  emailOnSuccess?: string;\n}\nexport interface TaxPaymentFormModel {\n  type: PAYMENT_TYPE.TAX;\n  bankAccount: string;\n  ugd: string;\n  number: string;\n  date: NgbDateStruct;\n  knp: string;\n  kbk: string;\n  senderAccount: RegularAccount;\n  amount: string;\n  purpose: string;\n  // currency: string;\n  urgent: boolean;\n\n  /** switch to periodStart and periodEnd */\n  intervalEnabled?: boolean;\n  /** заполняется, когда выбран 1 период. mm.YYYY */\n  period?: Date;\n  /** заполняется, когда выбраны начало и конец mm.YYYY*/\n  periodStart?: Date;\n  /** заполняется, когда выбраны начало и конец mm.YYYY*/\n  periodEnd?: Date;\n  /** VIN автомобиля без масок */\n  vin?: string;\n  /** номер адм протокола без масок */\n  protocolNumber?: string;\n}\nexport interface BaseEmployeeFormModel {\n  number: string;\n  date: NgbDateStruct;\n  knp: string;\n  period: Date;\n  employees: Employee[];\n  senderAccount: RegularAccount;\n  purpose: string;\n  amount: string;\n  urgent: boolean;\n  commonPeriodEnabled: boolean;\n}\nexport interface PensionPaymentFormModel extends BaseEmployeeFormModel {\n  type: PAYMENT_TYPE.PENSION;\n}\n\nexport interface SocialPaymentFormModel extends BaseEmployeeFormModel {\n  type: PAYMENT_TYPE.SOCIAL;\n}\n\nexport interface MedicalPaymentFormModel extends BaseEmployeeFormModel {\n  type: PAYMENT_TYPE.MEDICAL;\n}\n\nexport interface SalaryPaymentFormModel\n  extends Omit<BaseEmployeeFormModel, 'commonPeriodEnabled' | 'period'> {\n  type: PAYMENT_TYPE.SALARY;\n  bankReceiver: string;\n  isResidents: boolean;\n  bankAccount?: string;\n}\n\nexport interface CurrencyPaymentFormModel {\n  isNewPayment?: boolean;\n\n  type?: PAYMENT_TYPE.FOREIGN;\n  senderAccount: RegularAccount;\n\n  withinContract?: boolean;\n  contract?: IFxContract;\n  contractId?: string;\n  fxContractRecipient?: IFxContractRecipient;\n  fxContractRecipientId?: string;\n\n  countryCode: COUNTRY;\n  country: ICountry;\n  cityName?: string;\n\n  bankLabel: string;\n  bank: IBank;\n\n  hasIntermediaryBank: boolean;\n  intermediaryBankLabel: string;\n  intermediaryBank: IBank;\n\n  name?: string;\n  kbeCode: string;\n  receiverIban?: string;\n  iinOrBin?: string;\n  bankAccount: string;\n  number: string;\n  date: NgbDateStruct;\n  knp: string;\n  knpObject: KNP;\n  amount: string;\n  purpose: string;\n  notify: boolean;\n  emailOnSuccess: string;\n  kpp: string;\n\n  comission: number;\n  comissionCurrency: CURRENCY;\n  commissionAccount?: RegularAccount;\n  payComission?: boolean;\n\n  kvo: string;\n  kio: string;\n\n  // China\n  codeWord: IDictionaryValue;\n\n  // russian budget\n  isRussianBudget?: boolean;\n\n  isRussianTaxPayer?: boolean;\n  payerInn?: string;\n  payerKpp?: string;\n\n  kbk: any;\n\n  oktmo?: string;\n  payerStatus?: string;\n\n  hasRussianBudgetExtras?: boolean;\n  budgetDocNumber?: string;\n  paymentBasis?: string;\n  budgetPeriod?: string;\n  uip?: string;\n\n  // RubNonRussia\n  isRubNonRussia?: boolean;\n\n  rubNonRussiaCorrespondentBankLabel?: string;\n  rubNonRussiaCorrespondentBank?: IBank;\n\n  rubNonRussiaBankLabel?: string;\n  rubNonRussiaBank?: IBank;\n\n  rubNonRussiaCorrespondentIban?: string;\n\n  // Australia\n  audIndex: string;\n  audState: string;\n  audStreet: string;\n  audBuildingNumber: string;\n\n  audAddress: string;\n  canAddress: string;\n}\n","export * from './can-deactivate-payment.guard';\nexport * from './currency-payment.service';\nexport * from './form-model';\nexport * from './payment-api.service';\nexport * from './payment-type-switch.guard';\nexport * from './payments-form-factory.service';\nexport * from './payments-pipeline.service';\nexport * from './payments.service';","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n  ActivatedRoute,\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { PaymentApiService } from './payment-api.service';\nimport { PaymentsService } from './payments.service';\nimport { paymentsRoutes } from '@payments/payments-routes';\nimport { NotifierService } from 'angular-notifier';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentTypeSwitchGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private api: PaymentApiService,\n    private payments: PaymentsService,\n    private notification: NotifierService\n  ) {}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const repeatPayment = this.router.getCurrentNavigation().extras?.state\n      ?.repeatPayment;\n    const paymentId = next.params?.paymentId || repeatPayment?.id;\n    let route = paymentsRoutes.tenge.order;\n    if (repeatPayment) {\n      route = this.payments.getPaymentRouteByType(repeatPayment.type);\n    }\n    if (paymentId) {\n      this.api\n        .getPaymentById(paymentId)\n        .then((response) => {\n          const commands = [this.payments.getPaymentRouteByType(response.type)];\n          if (!repeatPayment) {\n            commands.push(paymentId);\n          }\n          this.router.navigate(\n            commands,\n            {\n              state: {\n                resolvedPayment: response,\n              },\n            }\n          );\n        })\n        .catch((e) => {\n          this.router.navigate([paymentsRoutes.tenge.order]);\n          this.notification.show({\n            type: 'error',\n            message: e,\n          });\n        });\n    } else {\n      this.router.navigate([route]);\n    }\n    return false;\n  }\n}\n","import { TransferErrorComponent } from './transfer-error/transfer-error.component';\nimport { TransferSuccessComponent } from './transfer-success/transfer-success.component';\n\nexport const TRANSFERS_MODALS = [\n  TransferErrorComponent,\n  TransferSuccessComponent,\n];\n\nexport * from './transfer-error/transfer-error.component';\nexport * from './transfer-success/transfer-success.component';\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'j-transfer-error',\r\n  templateUrl: './transfer-error.component.html',\r\n  styleUrls: ['./transfer-error.component.scss'],\r\n})\r\nexport class TransferErrorComponent {\r\n  @Input() description: string;\r\n  @Input() errorText: string;\r\n\r\n  constructor(public modal: NgbActiveModal, private router: Router) {}\r\n\r\n  dismissModal() {\r\n    this.modal.dismiss();\r\n  }\r\n\r\n  closeModal() {\r\n    this.router.navigate(['/transfers']);\r\n    this.modal.close();\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { IMoney } from '@shared/currency/currency.model';\n\n@Component({\n  selector: 'j-transfer-success',\n  templateUrl: './transfer-success.component.html',\n  styleUrls: ['./transfer-success.component.scss'],\n})\nexport class TransferSuccessComponent {\n  @Input() description: string;\n  @Input() totalBalance: IMoney;\n\n  constructor(public modal: NgbActiveModal) {}\n\n  dismissModal() {\n    this.modal.dismiss();\n  }\n\n  closeModal() {\n    this.modal.close();\n  }\n}\n","import { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { combineLatest, Subscription } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { NotifierService } from 'angular-notifier';\r\n\r\nimport { AmountFormatPipe, MoneyPipe } from '@shared/pipes';\r\nimport { PAYMENT_TYPE } from '@shared/models';\r\nimport { CURRENCY } from '@shared/currency/currency.model';\r\nimport { MaskedService } from '@shared/masked/masked.service';\r\n\r\nimport {\r\n  AccountsService,\r\n  ACCOUNT_TYPE,\r\n  RegularAccount,\r\n  AccountDropdownComponent,\r\n  Deposit,\r\n  IAccountDropdownOption,\r\n} from '@accounts/index';\r\n\r\nimport { Card, CARD_CATEGORY } from '@cards/models';\r\nimport { CardsService } from '@cards/services';\r\n\r\nimport { CompanyService } from '@company/company.service';\r\n\r\nimport { FeatureFlagsService, FEATURE_FLAG } from '@feature-flags/index';\r\n\r\nimport { Payment } from '@payments/models';\r\nimport { PaymentsService, PaymentApiService } from '@payments/services';\r\n\r\nimport { TransferSuccessComponent, TransferErrorComponent } from '../modals';\r\nimport { ITransferOwnForm, TransfersService } from '../transfers.service';\r\nimport { FILTER_PAYMENT_STATUS } from '@filter/filter.model';\r\nimport { NavService } from '@shared/nav/nav.service';\r\nimport { AuthorityPermissionsService } from '@authorities/services';\r\n\r\nconst SAME_IBANS_NOTIFICATION = 'TRANSFERS.SAME_IBANS_NOTIFICATION';\r\n\r\nconst CANT_BE_ZERO = (control: AbstractControl) => {\r\n  if (control?.value == 0) {\r\n    return { cantBeZero: true };\r\n  }\r\n  return null;\r\n};\r\n\r\n@Component({\r\n  selector: 'j-transfers-own',\r\n  templateUrl: './transfers-own.component.html',\r\n  styleUrls: ['./transfers-own.component.scss'],\r\n})\r\nexport class TransfersOwnComponent implements OnDestroy, AfterViewInit {\r\n  accounts: IAccountDropdownOption[];\r\n  transferForm: FormGroup;\r\n\r\n  isEditing;\r\n  isRestricted = false;\r\n  isSubmitted = false;\r\n  isLoading = true;\r\n  repeatPayment = null;\r\n\r\n  from: IAccountDropdownOption;\r\n  to: IAccountDropdownOption;\r\n\r\n  defaultCurrency = CURRENCY.KZT;\r\n  originalPayment: Payment;\r\n  maxSumParams = null;\r\n  irreducibleBalanceParams = null;\r\n  unsufficientFundsParams = null;\r\n  hasUnsufficientFunds = false;\r\n\r\n  @ViewChild('fromDropdown') fromDropdown: AccountDropdownComponent;\r\n  @ViewChild('toDropdown') toDropdown: AccountDropdownComponent;\r\n\r\n  subscription = new Subscription();\r\n\r\n  isAccountsLoading = true;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private transfersService: TransfersService,\r\n    private companyService: CompanyService,\r\n    private paymentsService: PaymentsService,\r\n    private accountsService: AccountsService,\r\n    private amountFormatPipe: AmountFormatPipe,\r\n    private modalService: NgbModal,\r\n    private router: Router,\r\n    private maskedService: MaskedService,\r\n    private paymentsApiService: PaymentApiService,\r\n    private cardsService: CardsService,\r\n    private featureFlagsService: FeatureFlagsService,\r\n    private notifierService: NotifierService,\r\n    private translateService: TranslateService,\r\n    private moneyPipe: MoneyPipe,\r\n    private navService: NavService,\r\n    private authorityPermissionsService: AuthorityPermissionsService\r\n  ) {\r\n    this.transferForm = new FormGroup({\r\n      id: new FormControl(''),\r\n      from: new FormControl('', [Validators.required]),\r\n      fromAccount: new FormControl(null),\r\n      to: new FormControl('', [Validators.required]),\r\n      toAccount: new FormControl(null),\r\n      documentNumber: new FormControl('', [Validators.required]),\r\n      amount: new FormControl('', [Validators.required, CANT_BE_ZERO]),\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    const routeParamsSubscription = this.route.params.subscribe((params) => {\r\n      if (params.id) {\r\n        this.f.id.setValue(params.id);\r\n        this.isEditing = true;\r\n      }\r\n    });\r\n\r\n    this.subscription.add(routeParamsSubscription);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.getPermission()\r\n      .then(() => {\r\n        if (this.isRestricted) {\r\n          this.isLoading = false;\r\n        } else {\r\n          this.initPage();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.isLoading = false;\r\n        this.initPage();\r\n      });\r\n  }\r\n\r\n  initPage() {\r\n    const routeStateSubscription = combineLatest([\r\n      this.route.paramMap.pipe(map(() => window.history.state)),\r\n      this.route.queryParams,\r\n      this.featureFlagsService.featureFlags$.pipe(\r\n        filter((flags) => flags?.length > 0)\r\n      ),\r\n    ]).subscribe((values) => {\r\n      const [state, params] = values;\r\n\r\n      if (this.isEditing) {\r\n        this.loadEditTransfer(this.f.id.value);\r\n      } else if (state.repeatPaymentId) {\r\n        this.loadRepeatTransfer(state.repeatPaymentId);\r\n      } else {\r\n        this.loadNewTransfer(params);\r\n      }\r\n    });\r\n\r\n    const formSubscription = this.transferForm.valueChanges.subscribe(\r\n      (value) => {\r\n        this.isSubmitted = false;\r\n      }\r\n    );\r\n\r\n    this.subscription.add(routeStateSubscription);\r\n    this.subscription.add(formSubscription);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  get fromAccounts() {\r\n    return this.accounts?.filter((account) => {\r\n      switch (account.accountType) {\r\n        case ACCOUNT_TYPE.ACCOUNT:\r\n          return (\r\n            account.balance.currency === CURRENCY.KZT ||\r\n            (this.to?.accountType === ACCOUNT_TYPE.DEPOSIT &&\r\n              this.to.balance.currency === account.balance.currency)\r\n          );\r\n        case ACCOUNT_TYPE.CARD:\r\n          return (account as Card).category !== CARD_CATEGORY.PRIVATE;\r\n        case ACCOUNT_TYPE.DEPOSIT:\r\n          return (\r\n            (account as Deposit).depositType &&\r\n            (account as Deposit).additionalDetails.payOut\r\n          );\r\n        default:\r\n          return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  get commissionParams() {\r\n    return {\r\n      amount: this.moneyPipe.transform({\r\n        amount: 0,\r\n        currency: this.from?.balance.currency || this.to?.balance.currency || this.defaultCurrency,\r\n      }),\r\n    };\r\n  }\r\n\r\n  get toAccounts() {\r\n    return this.accounts?.filter((account) => {\r\n      switch (account.accountType) {\r\n        case ACCOUNT_TYPE.ACCOUNT:\r\n          return (\r\n            account.balance.currency === CURRENCY.KZT ||\r\n            (this.from?.accountType === ACCOUNT_TYPE.DEPOSIT &&\r\n              (this.from as Deposit).additionalDetails.clientAccount ===\r\n                account.iban)\r\n          );\r\n        case ACCOUNT_TYPE.DEPOSIT:\r\n          return (\r\n            (account as Deposit).depositType &&\r\n            (account as Deposit).additionalDetails.addPay\r\n          );\r\n        default:\r\n          return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  get canSendAndSign() {\r\n    return (\r\n      this.companyService.isSecondaryAuthority() ||\r\n      (this.companyService.isPrimaryAuthority() &&\r\n        this.companyService.isSingleSignScheme())\r\n    );\r\n  }\r\n\r\n  get canSendOnly() {\r\n    return (\r\n      this.companyService.isNoSignAuthority() ||\r\n      (this.companyService.isPrimaryAuthority() &&\r\n        this.companyService.isMultipleSignScheme())\r\n    );\r\n  }\r\n\r\n  get f() {\r\n    return this.transferForm.controls;\r\n  }\r\n\r\n  mapIrreducibleBalanceParams() {\r\n    if (!this.from || !(this.from as Deposit)?.irreducibleBalance) {\r\n      this.irreducibleBalanceParams = null;\r\n      return null;\r\n    }\r\n\r\n    this.irreducibleBalanceParams = {\r\n      amount: this.moneyPipe.transform({\r\n        amount: (this.from as Deposit)?.irreducibleBalance,\r\n        currency: this.from.balance.currency,\r\n      }),\r\n    };\r\n  }\r\n\r\n  mapMaxSumParams() {\r\n    if (!this.to || !(this.to as Deposit)?.additionalDetails?.maxSum) {\r\n      this.maxSumParams = null;\r\n      return;\r\n    }\r\n\r\n    this.maxSumParams = {\r\n      amount: this.moneyPipe.transform({\r\n        amount: (this.to as Deposit)?.additionalDetails?.maxSum,\r\n        currency: this.to.balance.currency,\r\n      }),\r\n    };\r\n  }\r\n\r\n  mapUnsufficientFundsParams() {\r\n    this.unsufficientFundsParams = {\r\n      amount: this.moneyPipe.transform({\r\n        amount: this.amountDelta,\r\n        currency: this.from.balance.currency,\r\n      }),\r\n    };\r\n  }\r\n\r\n  mapHasUnsufficientFunds() {\r\n    this.hasUnsufficientFunds = this.amountDelta > 0;\r\n  }\r\n\r\n  onFromSelect(selectedAccount: IAccountDropdownOption) {\r\n    if (!selectedAccount) {\r\n      return;\r\n    }\r\n\r\n    this.selectFromAccount(selectedAccount);\r\n\r\n    this.applyClearOnFromSelectedRule(selectedAccount);\r\n    this.applySelectFromCompanionRule(selectedAccount);\r\n\r\n    this.applyDepositAmountValidation();\r\n    this.applyDepositWithdrawalRule(selectedAccount);\r\n\r\n    this.applyFromCurrencyRule(selectedAccount);\r\n  }\r\n\r\n  onToSelect(selectedAccount: IAccountDropdownOption) {\r\n    if (!selectedAccount) {\r\n      return;\r\n    }\r\n\r\n    this.selectToAccount(selectedAccount);\r\n\r\n    this.applyClearOnToSelectedRule(selectedAccount);\r\n    this.applySelectToCompanionRule(selectedAccount);\r\n\r\n    this.applyDepositAmountValidation();\r\n    this.applyDepositReplenishmentRule(selectedAccount);\r\n\r\n    this.applyToCurrencyRule(selectedAccount);\r\n  }\r\n\r\n  async loadRepeatTransfer(repeatTransferId: string) {\r\n    this.isLoading = true;\r\n\r\n    const values = await Promise.all([\r\n      this.transfersService.getTransferById(repeatTransferId),\r\n      this.retrieveAccounts(),\r\n    ]);\r\n\r\n    this.applyOnlyAccountRule();\r\n\r\n    const [originalPayment] = values;\r\n\r\n    const repeatTransfer = await this.mapRepeatTransferFromPayment(\r\n      originalPayment\r\n    );\r\n    this.initRepeatTransfer(repeatTransfer);\r\n    this.setAutoNumeration();\r\n\r\n    this.isLoading = false;\r\n  }\r\n\r\n  async loadEditTransfer(transferId: string) {\r\n    this.isLoading = true;\r\n\r\n    this.originalPayment = await this.transfersService.getTransferById(\r\n      transferId\r\n    );\r\n    const repeatTransfer = await this.mapRepeatTransferFromPayment(\r\n      this.originalPayment\r\n    );\r\n\r\n    await this.retrieveAccounts();\r\n\r\n    this.applyOnlyAccountRule();\r\n\r\n    this.initRepeatTransfer(repeatTransfer);\r\n\r\n    this.isLoading = false;\r\n  }\r\n\r\n  async loadNewTransfer(params = null) {\r\n    this.isLoading = true;\r\n\r\n    await this.retrieveAccounts();\r\n\r\n    this.setAutoNumeration();\r\n    this.setInitialParams(params);\r\n\r\n    this.isLoading = false;\r\n  }\r\n\r\n  async edit() {\r\n    this.isSubmitted = true;\r\n\r\n    if (this.transferForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.transfersService.saveEditedTransfer(\r\n        this.transferForm.value,\r\n        this.originalPayment\r\n      );\r\n      this.showEditSuccess();\r\n    } catch (error) {\r\n      this.showEditError(error);\r\n    }\r\n  }\r\n\r\n  async createOnly() {\r\n    this.isSubmitted = true;\r\n\r\n    if (this.transferForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n\r\n    const formValue = this.transferForm.getRawValue();\r\n\r\n    const isAllowed = await this.checkIfAllowedToCreate(formValue.amount);\r\n    if (!isAllowed) {\r\n      this.isLoading = false;\r\n      return;\r\n    }\r\n\r\n    const paymentNumberStore = this.paymentsService.paymentNumber;\r\n\r\n    try {\r\n      await this.transfersService.createOwnTransfer(formValue);\r\n      this.showCreateSuccess();\r\n      paymentNumberStore.entity = null;\r\n    } catch (error) {\r\n      paymentNumberStore.entity = this.f.documentNumber.value;\r\n      this.showCreateError(error);\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  async createAndSign() {\r\n    this.isSubmitted = true;\r\n\r\n    if (this.transferForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n\r\n    const formValue = this.transferForm.getRawValue();\r\n\r\n    const isAllowed = await this.checkIfAllowedToCreate(formValue.amount);\r\n    if (!isAllowed) {\r\n      this.isLoading = false;\r\n      return;\r\n    }\r\n\r\n    const paymentNumberStore = this.paymentsService.paymentNumber;\r\n\r\n    try {\r\n      await this.transfersService.createAndSignOwnTransfer(formValue);\r\n      this.showCreateAndSignSuccess();\r\n      paymentNumberStore.entity = null;\r\n    } catch (error) {\r\n      paymentNumberStore.entity = this.f.documentNumber.value;\r\n      this.showCreateAndSignError(error);\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  private async getPermission() {\r\n    try {\r\n      this.isRestricted = await this.authorityPermissionsService.isRestricted(\r\n        PAYMENT_TYPE.IN_BETWEEN\r\n      );\r\n    } catch (error) {\r\n      this.isRestricted = false;\r\n    }\r\n  }\r\n\r\n  private async checkIfAllowedToCreate(amount: string) {\r\n    const isWorkingTimeCheckPassed =\r\n      await this.paymentsApiService.checkWorkingTime();\r\n\r\n    const isAmountCheckPassed = await this.paymentsApiService.checkAmountLimit(\r\n      amount,\r\n      PAYMENT_TYPE.IN_BETWEEN\r\n    );\r\n\r\n    return isWorkingTimeCheckPassed && isAmountCheckPassed;\r\n  }\r\n\r\n  private async mapRepeatTransferFromPayment(payment: Payment) {\r\n    await this.retrieveAccounts();\r\n\r\n    let fromIban = payment.details?.payerIban;\r\n    if (\r\n      payment.type === PAYMENT_TYPE.CARD_TO_CARD ||\r\n      payment.type === PAYMENT_TYPE.CARD_TO_ACCOUNT\r\n    ) {\r\n      fromIban = this.fromAccounts.find(\r\n        (card) =>\r\n          card.accountType === ACCOUNT_TYPE.CARD &&\r\n          (card as Card).accountId === (payment.details as any)?.payerAccountId\r\n      ).iban;\r\n    }\r\n\r\n    return {\r\n      to: payment.paymentRecipient?.recipientAccount?.iban,\r\n      toAccount: this.toAccounts.find(\r\n        (account) =>\r\n          account.iban === payment.paymentRecipient?.recipientAccount?.iban\r\n      ),\r\n      from: fromIban,\r\n      fromAccount: this.fromAccounts.find(\r\n        (account) => account.iban === fromIban\r\n      ),\r\n      documentNumber: payment.details?.documentId,\r\n      amount: payment.details?.paymentAmount.amount,\r\n    };\r\n  }\r\n\r\n  private setInitialParams(params) {\r\n    if (!params) {\r\n      return;\r\n    }\r\n\r\n    if (params.from) {\r\n      this.fromDropdown.selectByIban(params.from);\r\n    }\r\n\r\n    if (params.to) {\r\n      this.toDropdown.selectByIban(params.to);\r\n    }\r\n  }\r\n\r\n  private initRepeatTransfer(repeatTransfer: ITransferOwnForm) {\r\n    if (!repeatTransfer) {\r\n      return;\r\n    }\r\n\r\n    this.selectToAccountByIban(repeatTransfer.to);\r\n    this.selectFromAccountByIban(repeatTransfer.from);\r\n    this.f.documentNumber.setValue(repeatTransfer.documentNumber);\r\n    this.f.amount.setValue(\r\n      this.maskedService.getMaskedAmount(repeatTransfer.amount)\r\n    );\r\n  }\r\n\r\n  get amountDelta() {\r\n    const { amount } = this.transferForm.getRawValue();\r\n    return (\r\n      this.maskedService.getNumberedAmount(amount) - this.from?.balance?.amount\r\n    );\r\n  }\r\n\r\n  private applyDepositAmountValidation() {\r\n    const validators = [Validators.required, CANT_BE_ZERO];\r\n\r\n    if (this.from?.accountType === ACCOUNT_TYPE.DEPOSIT) {\r\n      validators.push(this.generateIrreducibleValidator);\r\n    }\r\n\r\n    if (this.to?.accountType === ACCOUNT_TYPE.DEPOSIT) {\r\n      validators.push(this.generateMaxSumValidator);\r\n    }\r\n\r\n    this.transferForm.controls.amount.setValidators(validators);\r\n  }\r\n\r\n  private generateIrreducibleValidator() {\r\n    const validator = (control: AbstractControl) => {\r\n      if (\r\n        this.from.balance.amount -\r\n          this.maskedService.getNumberedAmount(control.value) <=\r\n        (this.from as Deposit).irreducibleBalance\r\n      ) {\r\n        return {\r\n          irreducible: true,\r\n        };\r\n      }\r\n      return null;\r\n    };\r\n\r\n    return validator;\r\n  }\r\n\r\n  private generateMaxSumValidator() {\r\n    const validator = (control: AbstractControl) => {\r\n      if (\r\n        this.to.balance.amount +\r\n          this.maskedService.getNumberedAmount(control.value) >\r\n        (this.to as Deposit)?.additionalDetails?.maxSum\r\n      ) {\r\n        return {\r\n          maxSum: true,\r\n        };\r\n      }\r\n      return null;\r\n    };\r\n\r\n    return validator;\r\n  }\r\n\r\n  private applySelectToCompanionRule(selectedAccount: IAccountDropdownOption) {\r\n    if (this.accounts?.length == 2) {\r\n      const unselected = this.findUnselectedAccount(selectedAccount);\r\n      this.selectFromAccount(unselected);\r\n      this.fromDropdown?.selectAccount(unselected);\r\n    }\r\n  }\r\n\r\n  private applyDepositReplenishmentRule(\r\n    selectedAccount: IAccountDropdownOption\r\n  ) {\r\n    if (selectedAccount.accountType === ACCOUNT_TYPE.DEPOSIT) {\r\n      this.selectFromAccountByIban(\r\n        (selectedAccount as Deposit).additionalDetails.clientAccount\r\n      );\r\n    } else if (\r\n      this.from?.accountType === ACCOUNT_TYPE.DEPOSIT &&\r\n      selectedAccount.iban !==\r\n        (this.from as Deposit)?.additionalDetails?.clientAccount\r\n    ) {\r\n      this.clearFromAccount();\r\n    }\r\n  }\r\n\r\n  private applyFromCurrencyRule(selectedAccount: IAccountDropdownOption) {\r\n    if (\r\n      // (selectedAccount.accountType === ACCOUNT_TYPE.DEPOSIT ||\r\n      // this.to.accountType === ACCOUNT_TYPE.DEPOSIT) &&\r\n      selectedAccount.balance.currency !== this.to?.balance?.currency\r\n    ) {\r\n      this.clearToAccount();\r\n    }\r\n  }\r\n\r\n  private applyToCurrencyRule(selectedAccount: IAccountDropdownOption) {\r\n    if (\r\n      // (selectedAccount.accountType === ACCOUNT_TYPE.DEPOSIT ||\r\n      // this.from.accountType === ACCOUNT_TYPE.DEPOSIT) &&\r\n      selectedAccount.balance.currency !== this.from?.balance?.currency\r\n    ) {\r\n      this.clearFromAccount();\r\n    }\r\n  }\r\n\r\n  private applyDepositWithdrawalRule(selectedAccount: IAccountDropdownOption) {\r\n    if (\r\n      selectedAccount.accountType !== ACCOUNT_TYPE.DEPOSIT ||\r\n      !(selectedAccount as Deposit)?.additionalDetails?.clientAccount\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this.selectToAccountByIban(\r\n      (selectedAccount as Deposit).additionalDetails.clientAccount\r\n    );\r\n  }\r\n\r\n  private applySelectFromCompanionRule(\r\n    selectedAccount: IAccountDropdownOption\r\n  ) {\r\n    if (this.accounts?.length == 2) {\r\n      const unselected = this.findUnselectedAccount(selectedAccount);\r\n      this.selectToAccount(unselected);\r\n      this.toDropdown?.selectAccount(unselected);\r\n    }\r\n  }\r\n\r\n  private findUnselectedAccount(selectedAccount: IAccountDropdownOption) {\r\n    return this.accounts?.find((account) => {\r\n      return account != selectedAccount;\r\n    });\r\n  }\r\n\r\n  private findAccountByIban(iban: string) {\r\n    return this.accounts?.find((account) => {\r\n      return account.iban == iban;\r\n    });\r\n  }\r\n\r\n  private applyClearOnFromSelectedRule(\r\n    selectedAccount: IAccountDropdownOption\r\n  ) {\r\n    const isSameAccounts = selectedAccount == this.to;\r\n    const haveSameIbans =\r\n      selectedAccount.iban == this.to?.iban && !isSameAccounts;\r\n\r\n    if (isSameAccounts || haveSameIbans) {\r\n      this.clearToAccount();\r\n    }\r\n\r\n    if (haveSameIbans) {\r\n      this.notifierService.notify(\r\n        'default',\r\n        this.translateService.instant(SAME_IBANS_NOTIFICATION)\r\n      );\r\n    }\r\n  }\r\n\r\n  private applyClearOnToSelectedRule(selectedAccount: IAccountDropdownOption) {\r\n    const isSameAccounts = selectedAccount == this.from;\r\n    const haveSameIbans =\r\n      selectedAccount.iban == this.from?.iban && !isSameAccounts;\r\n\r\n    if (isSameAccounts || haveSameIbans) {\r\n      this.clearFromAccount();\r\n    }\r\n\r\n    if (haveSameIbans) {\r\n      this.notifierService.notify(\r\n        'default',\r\n        this.translateService.instant(SAME_IBANS_NOTIFICATION)\r\n      );\r\n    }\r\n  }\r\n\r\n  private applyOnlyAccountRule() {\r\n    if (this.accounts?.length == 1) {\r\n      const onlyAccount = this.accounts[0];\r\n      if (\r\n        !(\r\n          (onlyAccount as RegularAccount).isLocked ||\r\n          (onlyAccount as Card).hasLockedState\r\n        )\r\n      ) {\r\n        this.selectFromAccount(onlyAccount);\r\n        this.fromDropdown.selectAccount(onlyAccount);\r\n      } else {\r\n        this.selectToAccount(onlyAccount);\r\n        this.toDropdown.selectAccount(onlyAccount);\r\n      }\r\n    }\r\n  }\r\n\r\n  private selectToAccount(selectedAccount: IAccountDropdownOption) {\r\n    this.to = selectedAccount;\r\n    this.f.to.setValue(this.to?.iban);\r\n    this.f.toAccount.setValue(this.to);\r\n  }\r\n\r\n  private selectFromAccount(selectedAccount: IAccountDropdownOption) {\r\n    this.from = selectedAccount;\r\n    this.f.from.setValue(this.from?.iban);\r\n    this.f.fromAccount.setValue(this.from);\r\n  }\r\n\r\n  private selectToAccountByIban(iban: string) {\r\n    const foundAccount = this.findAccountByIban(iban);\r\n    this.selectToAccount(foundAccount);\r\n    this.toDropdown.selectAccount(foundAccount);\r\n  }\r\n\r\n  private selectFromAccountByIban(iban: string) {\r\n    const foundAccount = this.findAccountByIban(iban);\r\n    this.selectFromAccount(foundAccount);\r\n    this.fromDropdown.selectAccount(foundAccount);\r\n  }\r\n\r\n  private clearToAccount() {\r\n    this.to = null;\r\n    this.f.to.setValue(null);\r\n    this.toDropdown?.clearSelected();\r\n  }\r\n\r\n  private clearFromAccount() {\r\n    this.from = null;\r\n    this.f.from.setValue(null);\r\n    this.fromDropdown?.clearSelected();\r\n  }\r\n\r\n  private isAccountAllowed(account: IAccountDropdownOption) {\r\n    const isDepositsOperationsDisabled = this.featureFlagsService.isDisabled(\r\n      FEATURE_FLAG.DEPOSIT_OPERATIONS\r\n    );\r\n\r\n    switch (account.accountType) {\r\n      case ACCOUNT_TYPE.ACCOUNT:\r\n        return true; // account.balance.currency === CURRENCY.KZT;\r\n\r\n      case ACCOUNT_TYPE.DEPOSIT:\r\n        if (isDepositsOperationsDisabled) {\r\n          return false;\r\n        }\r\n\r\n        return (\r\n          (account as Deposit).additionalDetails.addPay ||\r\n          (account as Deposit).additionalDetails.payOut\r\n        );\r\n    }\r\n  }\r\n\r\n  // TODO: Переписать на использование AccountsStore\r\n  private async retrieveAccounts() {\r\n    this.isAccountsLoading = true;\r\n\r\n    try {\r\n      await this.accountsService\r\n        .retrieveAccounts()\r\n        .then((result) => {\r\n          const filteredAccounts = result.filter((account) =>\r\n            this.isAccountAllowed(account)\r\n          );\r\n\r\n          this.accounts = this.accounts\r\n            ? [...this.accounts, ...filteredAccounts]\r\n            : [...filteredAccounts];\r\n        })\r\n        .catch((e) => {\r\n          this.accounts = this.accounts || [];\r\n          console.log(e);\r\n        });\r\n\r\n      if (!this.featureFlagsService.isDisabled(FEATURE_FLAG.CARD_TRANSFERS)) {\r\n        await this.cardsService\r\n          .getCorporateCards()\r\n          .then((result) => {\r\n            const filteredCards = result.filter((card) => {\r\n              return card.balance.currency === CURRENCY.KZT;\r\n            });\r\n            this.accounts = this.accounts\r\n              ? [...this.accounts, ...filteredCards]\r\n              : [...filteredCards];\r\n          })\r\n          .catch((e) => {\r\n            this.accounts = this.accounts || [];\r\n            console.log(e);\r\n          });\r\n      }\r\n    } catch (error) {\r\n    } finally {\r\n      this.isAccountsLoading = false;\r\n    }\r\n  }\r\n\r\n  private showEditSuccess() {\r\n    const amount = parseFloat(\r\n      this.maskedService.getUnmaskedAmount(this.f.amount.value)\r\n    );\r\n    this.showSuccessModal('TRANSFERS.EDIT.SUCCESS', amount);\r\n  }\r\n\r\n  private async showEditError(error: string) {\r\n    try {\r\n      await this.showErrorModal('TRANSFERS.EDIT.ERROR', error);\r\n      this.edit();\r\n    } catch (error) {\r\n      this.navigateToHome();\r\n    }\r\n  }\r\n\r\n  private showCreateSuccess() {\r\n    const amount = this.maskedService.getNumberedAmount(this.f.amount.value);\r\n    this.showSuccessModal('TRANSFERS.CREATE.SUCCESS', amount);\r\n  }\r\n\r\n  private async showCreateError(error: string) {\r\n    try {\r\n      await this.showErrorModal('TRANSFERS.CREATE.ERROR', error);\r\n      this.createOnly();\r\n    } catch (error) {\r\n      this.navigateToHome();\r\n    }\r\n  }\r\n\r\n  private showCreateAndSignSuccess() {\r\n    const amount = this.maskedService.getNumberedAmount(this.f.amount.value);\r\n    this.showSuccessModal('TRANSFERS.CREATE_AND_SIGN.SUCCESS', amount, true);\r\n  }\r\n\r\n  private async showCreateAndSignError(error: string) {\r\n    try {\r\n      await this.showErrorModal('TRANSFERS.CREATE_AND_SIGN.ERROR', error);\r\n      this.createAndSign();\r\n    } catch (error) {\r\n      this.navigateToHome();\r\n    }\r\n  }\r\n\r\n  private async showSuccessModal(\r\n    description: string,\r\n    amount: number,\r\n    hasSigned = false\r\n  ) {\r\n    const modal = this.modalService.open(TransferSuccessComponent, {\r\n      backdropClass: 'backdrop_light',\r\n      windowClass: 'modal_light modal_sm',\r\n      backdrop: 'static',\r\n      centered: true,\r\n    });\r\n    modal.componentInstance.description = description;\r\n    modal.componentInstance.totalBalance = {\r\n      amount: amount,\r\n      currency: this.from?.balance.currency || this.to?.balance.currency || this.defaultCurrency,\r\n    };\r\n    try {\r\n      await modal.result;\r\n      this.navigateToHistory(hasSigned);\r\n    } catch (error) {\r\n      this.navigateToHome();\r\n    }\r\n  }\r\n\r\n  private showErrorModal(description: string, error: any) {\r\n    const modal = this.modalService.open(TransferErrorComponent, {\r\n      backdropClass: 'backdrop_light',\r\n      windowClass: 'modal_light modal_sm',\r\n      backdrop: 'static',\r\n      centered: true,\r\n    });\r\n    modal.componentInstance.description = description;\r\n    modal.componentInstance.errorText = this.mapErrors(error?.data) || error;\r\n\r\n    return modal.result;\r\n  }\r\n\r\n  private mapErrors(data: any) {\r\n    let errorsMarkup = '';\r\n\r\n    for (const [key, value] of Object.entries(data)) {\r\n      errorsMarkup += value + '<br>';\r\n    }\r\n\r\n    return errorsMarkup || null;\r\n  }\r\n\r\n  private setAutoNumeration() {\r\n    this.subscription.add(\r\n      this.paymentsService.paymentNumber$.subscribe((numberFromStore) => {\r\n        this.f.documentNumber.setValue(numberFromStore);\r\n      })\r\n    );\r\n  }\r\n\r\n  private navigateToHome() {\r\n    this.navService.retrieveContractBadges();\r\n    this.navService.retrieveLetterBadges();\r\n\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  private navigateToHistory(hasSigned: boolean = false) {\r\n    let paymentStatus = FILTER_PAYMENT_STATUS.FOR_SIGN;\r\n\r\n    this.navService.retrieveContractBadges();\r\n    this.navService.retrieveLetterBadges();\r\n\r\n    if (\r\n      hasSigned &&\r\n      this.companyService.isPrimaryAuthority() &&\r\n      this.companyService.isSingleSignScheme()\r\n    ) {\r\n      paymentStatus = FILTER_PAYMENT_STATUS.IN_PROGRESS;\r\n    }\r\n\r\n    this.router.navigate([`/history/tenge`], {\r\n      queryParams: { paymentStatus },\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TransfersComponent } from './transfers.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TransfersComponent,\n    data: {\n      title: 'TRANSFERS.TITLE',\n    },\n  },\n  {\n    path: ':id',\n    component: TransfersComponent,\n  },\n  {\n    path: '**',\n    redirectTo: '',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TransfersRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\n\r\nimport { NavService } from '@shared/nav/nav.service';\r\n\r\n@Component({\r\n  selector: 'j-transfers',\r\n  templateUrl: './transfers.component.html',\r\n  styleUrls: ['./transfers.component.scss'],\r\n})\r\nexport class TransfersComponent implements OnInit {\r\n  constructor(private location: Location, private navService: NavService) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  onClose() {\r\n    this.navService.retrieveLetterBadges();\r\n    this.navService.retrieveContractBadges();\r\n\r\n    this.location.back();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgxSkeletonLoaderModule } from 'ngx-skeleton-loader';\n\nimport { AccountsModule } from '@accounts/index';\n\nimport { SharedModule } from '@shared/shared.module';\n\nimport { TransfersRoutingModule } from './transfers-routing.module';\n\nimport { TransfersComponent } from './transfers.component';\nimport { TransfersOwnComponent } from './transfers-own/transfers-own.component';\n\nimport { TRANSFERS_MODALS } from './modals';\n\n@NgModule({\n  declarations: [TransfersComponent, TransfersOwnComponent, TRANSFERS_MODALS],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n\n    NgxSkeletonLoaderModule,\n    TransfersRoutingModule,\n    AccountsModule,\n    SharedModule,\n    TranslateModule,\n  ],\n})\nexport class TransfersModule {}\n","import {\r\n  ACCOUNT_TYPE,\r\n  Deposit,\r\n  IAccountDropdownOption,\r\n  RegularAccount,\r\n} from '@accounts/account.model';\r\nimport { AccountsService } from '@accounts/services';\r\nimport { Injectable } from '@angular/core';\r\nimport { Card } from '@cards/models';\r\nimport { Payment } from '@payments/models';\r\nimport { PaymentApiService } from '@payments/services/payment-api.service';\r\nimport { PaymentsPipelineService } from '@payments/services/payments-pipeline.service';\r\nimport { CURRENCY } from '@shared/currency/currency.model';\r\nimport { MaskedService } from '@shared/masked/masked.service';\r\nimport { PAYMENT_CATEGORY, PAYMENT_TYPE } from '@shared/models';\r\n\r\nexport interface ITransferOwnForm {\r\n  id?: string;\r\n  from: string;\r\n  fromAccount: IAccountDropdownOption;\r\n  to: string;\r\n  toAccount: IAccountDropdownOption;\r\n  documentNumber: string;\r\n  amount: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TransfersService {\r\n  constructor(\r\n    private accountsService: AccountsService,\r\n    private paymentsPipelineService: PaymentsPipelineService,\r\n    private paymentsApiService: PaymentApiService,\r\n    private maskedService: MaskedService\r\n  ) {}\r\n\r\n  getTransferById(transferId: string) {\r\n    return this.paymentsApiService.getPaymentById(transferId);\r\n  }\r\n\r\n  saveEditedTransfer(transferForm: ITransferOwnForm, originalPayment: Payment) {\r\n    return this.paymentsApiService.updatePayment(\r\n      {\r\n        ...originalPayment,\r\n        ...this.mapTransferOwnPaymentBody(transferForm),\r\n      },\r\n      { paymentId: transferForm.id }\r\n    );\r\n  }\r\n\r\n  async createOwnTransfer(transferForm: ITransferOwnForm) {\r\n    try {\r\n      return this.paymentsApiService.createPayment(\r\n        this.mapTransferOwnPaymentBody(transferForm)\r\n      );\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async createAndSignOwnTransfer(transferForm: ITransferOwnForm) {\r\n    const paymentResult = await this.createOwnTransfer(transferForm);\r\n    return this.paymentsPipelineService.processPaymentVerify(paymentResult);\r\n  }\r\n\r\n  private mapTransferOwnPaymentBody(transferForm: ITransferOwnForm) {\r\n    let paymentType = PAYMENT_TYPE.IN_BETWEEN;\r\n    let payerAccountId = null;\r\n\r\n    if (\r\n      transferForm.fromAccount.accountType === ACCOUNT_TYPE.ACCOUNT &&\r\n      transferForm.toAccount.accountType === ACCOUNT_TYPE.CARD\r\n    ) {\r\n      paymentType = PAYMENT_TYPE.ACCOUNT_TO_CARD;\r\n    }\r\n\r\n    if (\r\n      transferForm.fromAccount.accountType === ACCOUNT_TYPE.CARD &&\r\n      transferForm.toAccount.accountType === ACCOUNT_TYPE.ACCOUNT\r\n    ) {\r\n      paymentType = PAYMENT_TYPE.CARD_TO_ACCOUNT;\r\n      payerAccountId = (transferForm.fromAccount as Card).accountId;\r\n    }\r\n\r\n    if (\r\n      transferForm.fromAccount.accountType === ACCOUNT_TYPE.CARD &&\r\n      transferForm.toAccount.accountType === ACCOUNT_TYPE.CARD\r\n    ) {\r\n      paymentType = PAYMENT_TYPE.CARD_TO_CARD;\r\n      payerAccountId = (transferForm.fromAccount as Card).accountId;\r\n    }\r\n\r\n    if (\r\n      transferForm.fromAccount.accountType === ACCOUNT_TYPE.DEPOSIT &&\r\n      transferForm.toAccount.accountType === ACCOUNT_TYPE.ACCOUNT\r\n    ) {\r\n      paymentType = PAYMENT_TYPE.DEPOSIT_WITHDRAWAL;\r\n    }\r\n\r\n    if (\r\n      transferForm.fromAccount.accountType === ACCOUNT_TYPE.ACCOUNT &&\r\n      transferForm.toAccount.accountType === ACCOUNT_TYPE.DEPOSIT\r\n    ) {\r\n      paymentType = PAYMENT_TYPE.DEPOSIT_REPLENISHMENT;\r\n    }\r\n\r\n    let depositName = null;\r\n\r\n    if (transferForm.fromAccount.accountType === ACCOUNT_TYPE.DEPOSIT) {\r\n      depositName = this.accountsService.getDepositName(\r\n        transferForm.fromAccount as Deposit\r\n      );\r\n    } else if (transferForm.toAccount.accountType === ACCOUNT_TYPE.DEPOSIT) {\r\n      depositName = this.accountsService.getDepositName(\r\n        transferForm.toAccount as Deposit\r\n      );\r\n    }\r\n\r\n    let mappedPayment = {\r\n      type: paymentType,\r\n      category: PAYMENT_CATEGORY.DOMESTIC,\r\n      paymentRecipient: {\r\n        recipientAccount: {\r\n          iban: transferForm.to,\r\n        },\r\n      },\r\n      details: {\r\n        payerIban: transferForm.from,\r\n        paymentAmount: {\r\n          amount: this.maskedService.getNumberedAmount(transferForm.amount),\r\n          currency: transferForm.fromAccount?.balance?.currency || transferForm.toAccount?.balance?.currency || CURRENCY.KZT, \r\n        },\r\n        documentId: transferForm.documentNumber,\r\n        associatedField: {\r\n          parameters: {\r\n            depositName,\r\n            payerCardNumber:\r\n              transferForm.fromAccount.accountType === ACCOUNT_TYPE.CARD\r\n                ? (transferForm.fromAccount as Card).cardNumber\r\n                : null,\r\n            recipientCardNumber:\r\n              transferForm.toAccount.accountType === ACCOUNT_TYPE.CARD\r\n                ? (transferForm.toAccount as Card).cardNumber\r\n                : null,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    if (payerAccountId) {\r\n      (mappedPayment.details as any) = {\r\n        ...mappedPayment.details,\r\n        payerAccountId,\r\n      };\r\n    }\r\n\r\n    return mappedPayment;\r\n  }\r\n\r\n  private mapTransferOwnToPayment(\r\n    transferForm: ITransferOwnForm,\r\n    originalPayment: Payment\r\n  ) {\r\n    originalPayment.paymentRecipient.recipientAccount.iban = transferForm.to;\r\n    originalPayment.details.payerIban = transferForm.from;\r\n    originalPayment.details.paymentAmount.amount =\r\n      this.maskedService.getNumberedAmount(transferForm.amount);\r\n    originalPayment.details.documentId = transferForm.documentNumber;\r\n\r\n    return originalPayment;\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}